
LDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080086c8  080086c8  000186c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001dc  08008d04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08008d04  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff9e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002259  00000000  00000000  000301aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018791  00000000  00000000  00034010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010782  00000000  00000000  0004c7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2aa  00000000  00000000  0005cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f81cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  000f8220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086ac 	.word	0x080086ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080086ac 	.word	0x080086ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <getLightIntensity>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float getLightIntensity(uint16_t adcResistanceValue){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	float resistanceVoltage = adcResistanceValue*VSENSE;
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fae1 	bl	8000534 <__aeabi_i2d>
 8000f72:	a331      	add	r3, pc, #196	; (adr r3, 8001038 <getLightIntensity+0xd8>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fb46 	bl	8000608 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <getLightIntensity+0xe8>)
 8000f8a:	f7ff fc67 	bl	800085c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fe0f 	bl	8000bb8 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]
	float LDR_inv = (MAXVOLT-resistanceVoltage)/(resistanceVoltage*BASERESISTANCE);
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff fada 	bl	8000558 <__aeabi_f2d>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	a123      	add	r1, pc, #140	; (adr r1, 8001038 <getLightIntensity+0xd8>)
 8000faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fae:	f7ff f973 	bl	8000298 <__aeabi_dsub>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4614      	mov	r4, r2
 8000fb8:	461d      	mov	r5, r3
 8000fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fbe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800104c <getLightIntensity+0xec>
 8000fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff fac5 	bl	8000558 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fc41 	bl	800085c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fde9 	bl	8000bb8 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	60bb      	str	r3, [r7, #8]
	return 10*pow(BASERESISTANCE*LDR_inv, 1.25);
 8000fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800104c <getLightIntensity+0xec>
 8000ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff6:	ee17 0a90 	vmov	r0, s15
 8000ffa:	f7ff faad 	bl	8000558 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001040 <getLightIntensity+0xe0>
 8001006:	ec43 2b10 	vmov	d0, r2, r3
 800100a:	f006 fc35 	bl	8007878 <pow>
 800100e:	ec51 0b10 	vmov	r0, r1, d0
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <getLightIntensity+0xf0>)
 8001018:	f7ff faf6 	bl	8000608 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fdc8 	bl	8000bb8 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	ee07 3a90 	vmov	s15, r3
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	66666666 	.word	0x66666666
 800103c:	400a6666 	.word	0x400a6666
 8001040:	00000000 	.word	0x00000000
 8001044:	3ff40000 	.word	0x3ff40000
 8001048:	40b00000 	.word	0x40b00000
 800104c:	42c80000 	.word	0x42c80000
 8001050:	40240000 	.word	0x40240000

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fc9c 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f81a 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 f96c 	bl	800133c <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f000 f94a 	bl	80012fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001068:	f000 f91e 	bl	80012a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800106c:	f000 f87e 	bl	800116c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001070:	f000 f8ce 	bl	8001210 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <main+0x34>)
 8001076:	f002 fd13 	bl	8003aa0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValue, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	4903      	ldr	r1, [pc, #12]	; (800108c <main+0x38>)
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <main+0x3c>)
 8001080:	f000 fe4e 	bl	8001d20 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0x30>
 8001086:	bf00      	nop
 8001088:	200002a0 	.word	0x200002a0
 800108c:	2000032c 	.word	0x2000032c
 8001090:	200001f8 	.word	0x200001f8

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fce8 	bl	8004a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0xd0>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a28      	ldr	r2, [pc, #160]	; (8001164 <SystemClock_Config+0xd0>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <SystemClock_Config+0xd0>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SystemClock_Config+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemClock_Config+0xd4>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SystemClock_Config+0xd4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2310      	movs	r3, #16
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001100:	2302      	movs	r3, #2
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001108:	2310      	movs	r3, #16
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800110c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001112:	2304      	movs	r3, #4
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001116:	2307      	movs	r3, #7
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f001 ffd6 	bl	80030d0 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800112a:	f000 f9cd 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fa38 	bl	80035c0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001156:	f000 f9b7 	bl	80014c8 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <MX_ADC1_Init+0xa0>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_ADC1_Init+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_ADC1_Init+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011d2:	f000 fc51 	bl	8001a78 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80011dc:	f000 f974 	bl	80014c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011e8:	2307      	movs	r3, #7
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011f2:	f000 fea3 	bl	8001f3c <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011fc:	f000 f964 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001f8 	.word	0x200001f8
 800120c:	40012000 	.word	0x40012000

08001210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_TIM2_Init+0x94>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001236:	2253      	movs	r2, #83	; 0x53
 8001238:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM2_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM2_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001256:	f002 fbd3 	bl	8003a00 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001260:	f000 f932 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001272:	f002 fd7f 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800127c:	f000 f924 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001280:	2320      	movs	r3, #32
 8001282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_TIM2_Init+0x94>)
 800128e:	f002 ff85 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001298:	f000 f916 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200002a0 	.word	0x200002a0

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART2_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f002 ffde 	bl	80042a0 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 f8ed 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002e8 	.word	0x200002e8
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_DMA_Init+0x3c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <MX_DMA_Init+0x3c>)
 800130c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_DMA_Init+0x3c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2038      	movs	r0, #56	; 0x38
 8001324:	f001 f98f 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001328:	2038      	movs	r0, #56	; 0x38
 800132a:	f001 f9a8 	bl	800267e <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a2c      	ldr	r2, [pc, #176]	; (800140c <MX_GPIO_Init+0xd0>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <MX_GPIO_Init+0xd0>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <MX_GPIO_Init+0xd0>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_GPIO_Init+0xd0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <MX_GPIO_Init+0xd0>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2120      	movs	r1, #32
 80013c6:	4812      	ldr	r0, [pc, #72]	; (8001410 <MX_GPIO_Init+0xd4>)
 80013c8:	f001 fe68 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_GPIO_Init+0xd8>)
 80013e4:	f001 fcd6 	bl	8002d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e8:	2320      	movs	r3, #32
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_GPIO_Init+0xd4>)
 8001400:	f001 fcc8 	bl	8002d94 <HAL_GPIO_Init>

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020800 	.word	0x40020800

08001418 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001418:	b580      	push	{r7, lr}
 800141a:	b098      	sub	sp, #96	; 0x60
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
	float lightIntensity = getLightIntensity(adcValue[0]);
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd9b 	bl	8000f60 <getLightIntensity>
 800142a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	sumLightIntensity += lightIntensity;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
	nOfConversions++;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_ADC_ConvCpltCallback+0xa4>)
 800144a:	6013      	str	r3, [r2, #0]

	if(nOfConversions == 1000){
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_ADC_ConvCpltCallback+0xa4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001454:	d129      	bne.n	80014aa <HAL_ADC_ConvCpltCallback+0x92>
		float meanLightIntensity = sumLightIntensity/nOfConversions;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001458:	edd3 6a00 	vldr	s13, [r3]
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_ADC_ConvCpltCallback+0xa4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		char string[64];
		int length = snprintf(string, 64, "mean light intensity: %.3f lux\n\r", meanLightIntensity);
 8001470:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001472:	f7ff f871 	bl	8000558 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f107 000c 	add.w	r0, r7, #12
 800147e:	e9cd 2300 	strd	r2, r3, [sp]
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	f003 ff69 	bl	800535c <sniprintf>
 800148a:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_UART_Transmit(&huart2, (const uint8_t*)string, length, 64);
 800148c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	2340      	movs	r3, #64	; 0x40
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_ADC_ConvCpltCallback+0xac>)
 8001498:	f002 ff4f 	bl	800433a <HAL_UART_Transmit>
		sumLightIntensity = 0;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
		nOfConversions = 0;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_ADC_ConvCpltCallback+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
	}
}
 80014aa:	bf00      	nop
 80014ac:	3758      	adds	r7, #88	; 0x58
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000032c 	.word	0x2000032c
 80014b8:	20000334 	.word	0x20000334
 80014bc:	20000330 	.word	0x20000330
 80014c0:	080086c8 	.word	0x080086c8
 80014c4:	200002e8 	.word	0x200002e8

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_MspInit+0x4c>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001512:	2007      	movs	r0, #7
 8001514:	f001 f88c 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a33      	ldr	r2, [pc, #204]	; (8001610 <HAL_ADC_MspInit+0xec>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d15f      	bne.n	8001606 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a2a      	ldr	r2, [pc, #168]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_ADC_MspInit+0xf0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4821      	ldr	r0, [pc, #132]	; (8001618 <HAL_ADC_MspInit+0xf4>)
 8001592:	f001 fbff 	bl	8002d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_ADC_MspInit+0xf8>)
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_ADC_MspInit+0xfc>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_ADC_MspInit+0xf8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015dc:	f001 f86a 	bl	80026b4 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015e6:	f7ff ff6f 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_ADC_MspInit+0xf8>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2012      	movs	r0, #18
 80015fc:	f001 f823 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001600:	2012      	movs	r0, #18
 8001602:	f001 f83c 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40012000 	.word	0x40012000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000
 800161c:	20000240 	.word	0x20000240
 8001620:	40026410 	.word	0x40026410

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d115      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_TIM_Base_MspInit+0x48>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_TIM_Base_MspInit+0x48>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_Base_MspInit+0x48>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201c      	movs	r0, #28
 8001658:	f000 fff5 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165c:	201c      	movs	r0, #28
 800165e:	f001 f80e 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ca:	230c      	movs	r3, #12
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016e6:	f001 fb55 	bl	8002d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f974 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <ADC_IRQHandler+0x10>)
 800175a:	f000 f9d0 	bl	8001afe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001f8 	.word	0x200001f8

08001768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM2_IRQHandler+0x10>)
 800176e:	f002 f9f9 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002a0 	.word	0x200002a0

0800177c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA2_Stream0_IRQHandler+0x10>)
 8001782:	f001 f89d 	bl	80028c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000240 	.word	0x20000240

08001790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_kill>:

int _kill(int pid, int sig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017aa:	f003 f93b 	bl	8004a24 <__errno>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2216      	movs	r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
	return -1;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0x12>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
	}

return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
	}
	return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f003 f8a0 	bl	8004a24 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20018000 	.word	0x20018000
 8001910:	00000400 	.word	0x00000400
 8001914:	20000338 	.word	0x20000338
 8001918:	20000350 	.word	0x20000350

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800195c:	4c0b      	ldr	r4, [pc, #44]	; (800198c <LoopFillZerobss+0x26>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196a:	f7ff ffd7 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 f85f 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fb6f 	bl	8001054 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001984:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 8001988:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800198c:	20000350 	.word	0x20000350

08001990 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <DMA1_Stream0_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fe37 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd84 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fe4f 	bl	800269a <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 fe17 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	2000033c 	.word	0x2000033c

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000033c 	.word	0x2000033c

08001a78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e033      	b.n	8001af6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fd44 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001abe:	f023 0302 	bic.w	r3, r3, #2
 8001ac2:	f043 0202 	orr.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fb58 	bl	8002180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae6:	e001      	b.n	8001aec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d049      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0xca>
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d046      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12b      	bne.n	8001bb8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d127      	bne.n	8001bb8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0220 	bic.w	r2, r2, #32
 8001b92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc2d 	bl	8001418 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0212 	mvn.w	r2, #18
 8001bc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d057      	beq.n	8001c8e <HAL_ADC_IRQHandler+0x190>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d054      	beq.n	8001c8e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d139      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d12b      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d124      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11d      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d119      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fbfc 	bl	800247c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 020c 	mvn.w	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d017      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x1d6>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d014      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f925 	bl	8001f14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0201 	mvn.w	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <HAL_ADC_IRQHandler+0x218>
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0220 	mvn.w	r2, #32
 8001d04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f90e 	bl	8001f28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0220 	mvn.w	r2, #32
 8001d14:	601a      	str	r2, [r3, #0]
  }
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1e>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0ce      	b.n	8001edc <HAL_ADC_Start_DMA+0x1bc>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d018      	beq.n	8001d86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_ADC_Start_DMA+0x1c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_ADC_Start_DMA+0x1c8>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9a      	lsrs	r2, r3, #18
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d94:	d107      	bne.n	8001da6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	f040 8086 	bne.w	8001ec2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001de0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df4:	d106      	bne.n	8001e04 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f023 0206 	bic.w	r2, r3, #6
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_ADC_Start_DMA+0x1cc>)
 8001e14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_ADC_Start_DMA+0x1d0>)
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	4a34      	ldr	r2, [pc, #208]	; (8001ef4 <HAL_ADC_Start_DMA+0x1d4>)
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <HAL_ADC_Start_DMA+0x1d8>)
 8001e2c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e46:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	334c      	adds	r3, #76	; 0x4c
 8001e62:	4619      	mov	r1, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f000 fcd2 	bl	8002810 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d129      	bne.n	8001eda <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e020      	b.n	8001eda <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_ADC_Start_DMA+0x1dc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d11b      	bne.n	8001eda <HAL_ADC_Start_DMA+0x1ba>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d114      	bne.n	8001eda <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	e00b      	b.n	8001eda <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	40012300 	.word	0x40012300
 8001ef0:	08002379 	.word	0x08002379
 8001ef4:	08002433 	.word	0x08002433
 8001ef8:	0800244f 	.word	0x0800244f
 8001efc:	40012000 	.word	0x40012000

08001f00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e105      	b.n	8002164 <HAL_ADC_ConfigChannel+0x228>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d925      	bls.n	8001fb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	2207      	movs	r2, #7
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68d9      	ldr	r1, [r3, #12]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4403      	add	r3, r0
 8001fa6:	3b1e      	subs	r3, #30
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	e022      	b.n	8001ffa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2207      	movs	r2, #7
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4403      	add	r3, r0
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d824      	bhi.n	800204c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	400a      	ands	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b05      	subs	r3, #5
 800203e:	fa00 f203 	lsl.w	r2, r0, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
 800204a:	e04c      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d824      	bhi.n	800209e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b23      	subs	r3, #35	; 0x23
 8002066:	221f      	movs	r2, #31
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43da      	mvns	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	400a      	ands	r2, r1
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b23      	subs	r3, #35	; 0x23
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
 800209c:	e023      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	221f      	movs	r2, #31
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	400a      	ands	r2, r1
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b41      	subs	r3, #65	; 0x41
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_ADC_ConfigChannel+0x234>)
 80020e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_ADC_ConfigChannel+0x238>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1cc>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_ADC_ConfigChannel+0x238>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d123      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x1e6>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b11      	cmp	r3, #17
 8002120:	d11b      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d111      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_ConfigChannel+0x23c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_ADC_ConfigChannel+0x240>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9a      	lsrs	r2, r3, #18
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	e002      	b.n	8002154 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40012300 	.word	0x40012300
 8002174:	40012000 	.word	0x40012000
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83

08002180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002188:	4b79      	ldr	r3, [pc, #484]	; (8002370 <ADC_Init+0x1f0>)
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	021a      	lsls	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <ADC_Init+0x1f4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00f      	b.n	800227e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	005a      	lsls	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	035a      	lsls	r2, r3, #13
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e007      	b.n	80022f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	3b01      	subs	r3, #1
 8002310:	051a      	lsls	r2, r3, #20
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002336:	025a      	lsls	r2, r3, #9
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	029a      	lsls	r2, r3, #10
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40012300 	.word	0x40012300
 8002374:	0f000001 	.word	0x0f000001

08002378 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13c      	bne.n	800240c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d12b      	bne.n	8002404 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d127      	bne.n	8002404 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d119      	bne.n	8002404 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0220 	bic.w	r2, r2, #32
 80023de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff f807 	bl	8001418 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800240a:	e00e      	b.n	800242a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff fd85 	bl	8001f28 <HAL_ADC_ErrorCallback>
}
 800241e:	e004      	b.n	800242a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff fd5d 	bl	8001f00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff fd5a 	bl	8001f28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff f9ce 	bl	8001a60 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e099      	b.n	8002804 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f0:	e00f      	b.n	8002712 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f2:	f7ff f9b5 	bl	8001a60 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d908      	bls.n	8002712 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e078      	b.n	8002804 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e8      	bne.n	80026f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_DMA_Init+0x158>)
 800272c:	4013      	ands	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2b04      	cmp	r3, #4
 800276a:	d107      	bne.n	800277c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	4313      	orrs	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0307 	bic.w	r3, r3, #7
 8002792:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d117      	bne.n	80027d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fa6f 	bl	8002c9c <DMA_CheckFifoParam>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027d2:	2301      	movs	r3, #1
 80027d4:	e016      	b.n	8002804 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa26 	bl	8002c30 <DMA_CalcBaseAndBitshift>
 80027e4:	4603      	mov	r3, r0
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	223f      	movs	r2, #63	; 0x3f
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	f010803f 	.word	0xf010803f

08002810 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_DMA_Start_IT+0x26>
 8002832:	2302      	movs	r3, #2
 8002834:	e040      	b.n	80028b8 <HAL_DMA_Start_IT+0xa8>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d12f      	bne.n	80028aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f9b8 	bl	8002bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	223f      	movs	r2, #63	; 0x3f
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0216 	orr.w	r2, r2, #22
 800287e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0208 	orr.w	r2, r2, #8
 8002896:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e005      	b.n	80028b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028cc:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <HAL_DMA_IRQHandler+0x248>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a8e      	ldr	r2, [pc, #568]	; (8002b0c <HAL_DMA_IRQHandler+0x24c>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	2208      	movs	r2, #8
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01a      	beq.n	800292c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2208      	movs	r2, #8
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f043 0201 	orr.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2201      	movs	r2, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2201      	movs	r2, #1
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f043 0202 	orr.w	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2204      	movs	r2, #4
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2210      	movs	r2, #16
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d043      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d03c      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2210      	movs	r2, #16
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d024      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
 80029ee:	e01f      	b.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
 8002a00:	e016      	b.n	8002a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0208 	bic.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2220      	movs	r2, #32
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 808f 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8087 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2220      	movs	r2, #32
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d136      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0216 	bic.w	r2, r2, #22
 8002a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x1da>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	223f      	movs	r2, #63	; 0x3f
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07e      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
        }
        return;
 8002ad6:	e079      	b.n	8002bcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01d      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d031      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
 8002b04:	e02c      	b.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
 8002b20:	e01e      	b.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0210 	bic.w	r2, r2, #16
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d032      	beq.n	8002bce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2205      	movs	r2, #5
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d307      	bcc.n	8002ba8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f2      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x2cc>
 8002ba6:	e000      	b.n	8002baa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ba8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
 8002bca:	e000      	b.n	8002bce <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bcc:	bf00      	nop
    }
  }
}
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d108      	bne.n	8002c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c12:	e007      	b.n	8002c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3b10      	subs	r3, #16
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <DMA_CalcBaseAndBitshift+0x64>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d909      	bls.n	8002c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c70:	e007      	b.n	8002c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	aaaaaaab 	.word	0xaaaaaaab
 8002c98:	08008704 	.word	0x08008704

08002c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d856      	bhi.n	8002d6a <DMA_CheckFifoParam+0xce>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x28>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002d6b 	.word	0x08002d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d046      	beq.n	8002d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e043      	b.n	8002d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cee:	d140      	bne.n	8002d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e03d      	b.n	8002d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d121      	bne.n	8002d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d837      	bhi.n	8002d76 <DMA_CheckFifoParam+0xda>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x70>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d23 	.word	0x08002d23
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002d35 	.word	0x08002d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e030      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d025      	beq.n	8002d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d32:	e022      	b.n	8002d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3c:	d11f      	bne.n	8002d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d42:	e01c      	b.n	8002d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d903      	bls.n	8002d52 <DMA_CheckFifoParam+0xb6>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d003      	beq.n	8002d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d50:	e018      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      break;
 8002d56:	e015      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e00b      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e00a      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e008      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d72:	bf00      	nop
 8002d74:	e006      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
 8002d78:	e004      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
    }
  } 
  
  return status; 
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e159      	b.n	8003064 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f040 8148 	bne.w	800305e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d017      	beq.n	8002e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d123      	bne.n	8002ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a2 	beq.w	800305e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b54      	ldr	r3, [pc, #336]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f36:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_GPIO_Init+0x2ec>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a49      	ldr	r2, [pc, #292]	; (8003084 <HAL_GPIO_Init+0x2f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x202>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a48      	ldr	r2, [pc, #288]	; (8003088 <HAL_GPIO_Init+0x2f4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x1fe>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_GPIO_Init+0x2f8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x1fa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a46      	ldr	r2, [pc, #280]	; (8003090 <HAL_GPIO_Init+0x2fc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x1f6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_GPIO_Init+0x300>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x1f2>
 8002f82:	2304      	movs	r3, #4
 8002f84:	e008      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f96:	2300      	movs	r3, #0
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f002 0203 	and.w	r2, r2, #3
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x2ec>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <HAL_GPIO_Init+0x304>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003058:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_GPIO_Init+0x304>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f aea2 	bls.w	8002db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e267      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b7e      	ldr	r3, [pc, #504]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e242      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a75      	ldr	r2, [pc, #468]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6f      	ldr	r2, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6c      	ldr	r2, [pc, #432]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a68      	ldr	r2, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a65      	ldr	r2, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fc6a 	bl	8001a60 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe fc66 	bl	8001a60 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e207      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fc56 	bl	8001a60 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fc52 	bl	8001a60 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1f3      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c7      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4937      	ldr	r1, [pc, #220]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_OscConfig+0x244>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe fc0b 	bl	8001a60 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fe fc07 	bl	8001a60 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a8      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4925      	ldr	r1, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x244>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe fbea 	bl	8001a60 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fe fbe6 	bl	8001a60 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e187      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d036      	beq.n	8003328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x248>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe fbca 	bl	8001a60 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe fbc6 	bl	8001a60 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e167      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
 80032ee:	e01b      	b.n	8003328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_OscConfig+0x248>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fbb3 	bl	8001a60 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	e00e      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fe fbaf 	bl	8001a60 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d907      	bls.n	800331c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e150      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
 8003310:	40023800 	.word	0x40023800
 8003314:	42470000 	.word	0x42470000
 8003318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ea      	bne.n	80032fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8097 	beq.w	8003464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333a:	4b81      	ldr	r3, [pc, #516]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a7c      	ldr	r2, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d118      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003372:	4b74      	ldr	r3, [pc, #464]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a73      	ldr	r2, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337e:	f7fe fb6f 	bl	8001a60 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe fb6b 	bl	8001a60 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e10c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x2ea>
 80033ac:	4b64      	ldr	r3, [pc, #400]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a63      	ldr	r2, [pc, #396]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	e01c      	b.n	80033f4 <HAL_RCC_OscConfig+0x324>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x30c>
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x324>
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6713      	str	r3, [r2, #112]	; 0x70
 80033e8:	4b55      	ldr	r3, [pc, #340]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a54      	ldr	r2, [pc, #336]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0304 	bic.w	r3, r3, #4
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fb30 	bl	8001a60 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fb2c 	bl	8001a60 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0cb      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ee      	beq.n	8003404 <HAL_RCC_OscConfig+0x334>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fe fb1a 	bl	8001a60 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fe fb16 	bl	8001a60 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0b5      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003446:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ee      	bne.n	8003430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4a38      	ldr	r2, [pc, #224]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a1 	beq.w	80035b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346e:	4b34      	ldr	r3, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b08      	cmp	r3, #8
 8003478:	d05c      	beq.n	8003534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d141      	bne.n	8003506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe faea 	bl	8001a60 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fae6 	bl	8001a60 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e087      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	491b      	ldr	r1, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fabf 	bl	8001a60 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fabb 	bl	8001a60 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e05c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x416>
 8003504:	e054      	b.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe faa8 	bl	8001a60 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe faa4 	bl	8001a60 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e045      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x444>
 8003532:	e03d      	b.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e038      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000
 8003548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d028      	beq.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d121      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d11a      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	3b01      	subs	r3, #1
 8003596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cc      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d90c      	bls.n	80035fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	2b03      	cmp	r3, #3
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e067      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0203 	bic.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4934      	ldr	r1, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fe f9d6 	bl	8001a60 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fe f9d2 	bl	8001a60 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 020c 	and.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1eb      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d20c      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe f936 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	080086ec 	.word	0x080086ec
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b094      	sub	sp, #80	; 0x50
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	2300      	movs	r3, #0
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80e1 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0db      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037c4:	e0db      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e0d8      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
 80037fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	ebb2 0801 	subs.w	r8, r2, r1
 8003844:	4659      	mov	r1, fp
 8003846:	eb63 0901 	sbc.w	r9, r3, r1
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4623      	mov	r3, r4
 8003864:	eb18 0303 	adds.w	r3, r8, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	462b      	mov	r3, r5
 800386c:	eb49 0303 	adc.w	r3, r9, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387e:	4629      	mov	r1, r5
 8003880:	024b      	lsls	r3, r1, #9
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003888:	4621      	mov	r1, r4
 800388a:	024a      	lsls	r2, r1, #9
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800389c:	f7fd f9dc 	bl	8000c58 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	e058      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	2200      	movs	r2, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	4611      	mov	r1, r2
 80038b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	f04f 0000 	mov.w	r0, #0
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d6:	0150      	lsls	r0, r2, #5
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4641      	mov	r1, r8
 80038de:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003900:	eb63 050b 	sbc.w	r5, r3, fp
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	00eb      	lsls	r3, r5, #3
 800390e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003912:	00e2      	lsls	r2, r4, #3
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	4643      	mov	r3, r8
 800391a:	18e3      	adds	r3, r4, r3
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	464b      	mov	r3, r9
 8003920:	eb45 0303 	adc.w	r3, r5, r3
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003932:	4629      	mov	r1, r5
 8003934:	028b      	lsls	r3, r1, #10
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800393c:	4621      	mov	r1, r4
 800393e:	028a      	lsls	r2, r1, #10
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	61fa      	str	r2, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	f7fd f982 	bl	8000c58 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800396c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003980:	4618      	mov	r0, r3
 8003982:	3750      	adds	r7, #80	; 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	007a1200 	.word	0x007a1200

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	080086fc 	.word	0x080086fc

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	080086fc 	.word	0x080086fc

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e041      	b.n	8003a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fdfc 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fa92 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d001      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e044      	b.n	8003b42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x6c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d013      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x6c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_TIM_Base_Start_IT+0xb4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x6c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_TIM_Base_Start_IT+0xb8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x6c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_TIM_Base_Start_IT+0xbc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x6c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d010      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	e007      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40000c00 	.word	0x40000c00
 8003b60:	40014000 	.word	0x40014000

08003b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0202 	mvn.w	r2, #2
 8003b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9bf 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9b1 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f9c2 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0204 	mvn.w	r2, #4
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f995 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f987 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f998 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0208 	mvn.w	r2, #8
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f96b 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f95d 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f96e 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0210 	mvn.w	r2, #16
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2208      	movs	r2, #8
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f941 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f933 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f944 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0201 	mvn.w	r2, #1
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f90d 	bl	8003f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d10e      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d107      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fabc 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f909 	bl	8003f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0220 	mvn.w	r2, #32
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa86 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b4      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd4>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x172>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xa6>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11a>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfa>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13a>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f000 f997 	bl	800415c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f000 f980 	bl	800415c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 f8f4 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	; 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f94d 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 f913 	bl	80040c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	; 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f93d 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 f8d4 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f92d 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 f924 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a31      	ldr	r2, [pc, #196]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a30      	ldr	r2, [pc, #192]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <TIM_Base_SetConfig+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_Base_SetConfig+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <TIM_Base_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <TIM_Base_SetConfig+0xe4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d103      	bne.n	8004038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	615a      	str	r2, [r3, #20]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 030a 	bic.w	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0210 	bic.w	r2, r3, #16
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	f043 0307 	orr.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	431a      	orrs	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e050      	b.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d018      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d013      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10c      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03f      	b.n	8004332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd f9d2 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f929 	bl	800453c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08a      	sub	sp, #40	; 0x28
 800433e:	af02      	add	r7, sp, #8
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	d17c      	bne.n	8004454 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_Transmit+0x2c>
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e075      	b.n	8004456 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit+0x3e>
 8004374:	2302      	movs	r3, #2
 8004376:	e06e      	b.n	8004456 <HAL_UART_Transmit+0x11c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2221      	movs	r2, #33	; 0x21
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438e:	f7fd fb67 	bl	8001a60 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	d108      	bne.n	80043bc <HAL_UART_Transmit+0x82>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e003      	b.n	80043c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043cc:	e02a      	b.n	8004424 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f840 	bl	800445e <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e036      	b.n	8004456 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	3302      	adds	r3, #2
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e007      	b.n	8004416 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cf      	bne.n	80043ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f810 	bl	800445e <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b090      	sub	sp, #64	; 0x40
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	e050      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d04c      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x30>
 800447e:	f7fd faef 	bl	8001a60 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800448a:	429a      	cmp	r2, r3
 800448c:	d241      	bcs.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ae:	637a      	str	r2, [r7, #52]	; 0x34
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	613b      	str	r3, [r7, #16]
   return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e2:	623a      	str	r2, [r7, #32]
 80044e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	69f9      	ldr	r1, [r7, #28]
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d09f      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3740      	adds	r7, #64	; 0x40
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b0c0      	sub	sp, #256	; 0x100
 8004542:	af00      	add	r7, sp, #0
 8004544:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	68d9      	ldr	r1, [r3, #12]
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	ea40 0301 	orr.w	r3, r0, r1
 8004564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004594:	f021 010c 	bic.w	r1, r1, #12
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	6999      	ldr	r1, [r3, #24]
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	ea40 0301 	orr.w	r3, r0, r1
 80045c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8f      	ldr	r3, [pc, #572]	; (8004808 <UART_SetConfig+0x2cc>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d005      	beq.n	80045dc <UART_SetConfig+0xa0>
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b8d      	ldr	r3, [pc, #564]	; (800480c <UART_SetConfig+0x2d0>)
 80045d8:	429a      	cmp	r2, r3
 80045da:	d104      	bne.n	80045e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7ff f9fc 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 80045e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045e4:	e003      	b.n	80045ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045e6:	f7ff f9e3 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 80045ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f8:	f040 810c 	bne.w	8004814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004606:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800460a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	1891      	adds	r1, r2, r2
 8004614:	65b9      	str	r1, [r7, #88]	; 0x58
 8004616:	415b      	adcs	r3, r3
 8004618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800461e:	4621      	mov	r1, r4
 8004620:	eb12 0801 	adds.w	r8, r2, r1
 8004624:	4629      	mov	r1, r5
 8004626:	eb43 0901 	adc.w	r9, r3, r1
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463e:	4690      	mov	r8, r2
 8004640:	4699      	mov	r9, r3
 8004642:	4623      	mov	r3, r4
 8004644:	eb18 0303 	adds.w	r3, r8, r3
 8004648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800464c:	462b      	mov	r3, r5
 800464e:	eb49 0303 	adc.w	r3, r9, r3
 8004652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004662:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800466a:	460b      	mov	r3, r1
 800466c:	18db      	adds	r3, r3, r3
 800466e:	653b      	str	r3, [r7, #80]	; 0x50
 8004670:	4613      	mov	r3, r2
 8004672:	eb42 0303 	adc.w	r3, r2, r3
 8004676:	657b      	str	r3, [r7, #84]	; 0x54
 8004678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800467c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004680:	f7fc faea 	bl	8000c58 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4b61      	ldr	r3, [pc, #388]	; (8004810 <UART_SetConfig+0x2d4>)
 800468a:	fba3 2302 	umull	r2, r3, r3, r2
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	011c      	lsls	r4, r3, #4
 8004692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800469c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80046ac:	415b      	adcs	r3, r3
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046b4:	4641      	mov	r1, r8
 80046b6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ba:	4649      	mov	r1, r9
 80046bc:	eb43 0b01 	adc.w	fp, r3, r1
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d4:	4692      	mov	sl, r2
 80046d6:	469b      	mov	fp, r3
 80046d8:	4643      	mov	r3, r8
 80046da:	eb1a 0303 	adds.w	r3, sl, r3
 80046de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046e2:	464b      	mov	r3, r9
 80046e4:	eb4b 0303 	adc.w	r3, fp, r3
 80046e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004700:	460b      	mov	r3, r1
 8004702:	18db      	adds	r3, r3, r3
 8004704:	643b      	str	r3, [r7, #64]	; 0x40
 8004706:	4613      	mov	r3, r2
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
 800470e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004716:	f7fc fa9f 	bl	8000c58 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4611      	mov	r1, r2
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <UART_SetConfig+0x2d4>)
 8004722:	fba3 2301 	umull	r2, r3, r3, r1
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2264      	movs	r2, #100	; 0x64
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <UART_SetConfig+0x2d4>)
 8004738:	fba3 2302 	umull	r2, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004744:	441c      	add	r4, r3
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004750:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	1891      	adds	r1, r2, r2
 800475e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004760:	415b      	adcs	r3, r3
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004768:	4641      	mov	r1, r8
 800476a:	1851      	adds	r1, r2, r1
 800476c:	6339      	str	r1, [r7, #48]	; 0x30
 800476e:	4649      	mov	r1, r9
 8004770:	414b      	adcs	r3, r1
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004780:	4659      	mov	r1, fp
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	4651      	mov	r1, sl
 8004786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478a:	4651      	mov	r1, sl
 800478c:	00ca      	lsls	r2, r1, #3
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	4603      	mov	r3, r0
 8004794:	4642      	mov	r2, r8
 8004796:	189b      	adds	r3, r3, r2
 8004798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800479c:	464b      	mov	r3, r9
 800479e:	460a      	mov	r2, r1
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047bc:	460b      	mov	r3, r1
 80047be:	18db      	adds	r3, r3, r3
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c2:	4613      	mov	r3, r2
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047d2:	f7fc fa41 	bl	8000c58 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <UART_SetConfig+0x2d4>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	; 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a08      	ldr	r2, [pc, #32]	; (8004810 <UART_SetConfig+0x2d4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 0207 	and.w	r2, r3, #7
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4422      	add	r2, r4
 8004802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004804:	e105      	b.n	8004a12 <UART_SetConfig+0x4d6>
 8004806:	bf00      	nop
 8004808:	40011000 	.word	0x40011000
 800480c:	40011400 	.word	0x40011400
 8004810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800481e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004826:	4642      	mov	r2, r8
 8004828:	464b      	mov	r3, r9
 800482a:	1891      	adds	r1, r2, r2
 800482c:	6239      	str	r1, [r7, #32]
 800482e:	415b      	adcs	r3, r3
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
 8004832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004836:	4641      	mov	r1, r8
 8004838:	1854      	adds	r4, r2, r1
 800483a:	4649      	mov	r1, r9
 800483c:	eb43 0501 	adc.w	r5, r3, r1
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	00eb      	lsls	r3, r5, #3
 800484a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484e:	00e2      	lsls	r2, r4, #3
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	4643      	mov	r3, r8
 8004856:	18e3      	adds	r3, r4, r3
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800485c:	464b      	mov	r3, r9
 800485e:	eb45 0303 	adc.w	r3, r5, r3
 8004862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004882:	4629      	mov	r1, r5
 8004884:	008b      	lsls	r3, r1, #2
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488c:	4621      	mov	r1, r4
 800488e:	008a      	lsls	r2, r1, #2
 8004890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004894:	f7fc f9e0 	bl	8000c58 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b60      	ldr	r3, [pc, #384]	; (8004a20 <UART_SetConfig+0x4e4>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	61b9      	str	r1, [r7, #24]
 80048c0:	415b      	adcs	r3, r3
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	6139      	str	r1, [r7, #16]
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	67bb      	str	r3, [r7, #120]	; 0x78
 8004912:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004920:	4649      	mov	r1, r9
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492a:	4641      	mov	r1, r8
 800492c:	008a      	lsls	r2, r1, #2
 800492e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004932:	f7fc f991 	bl	8000c58 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <UART_SetConfig+0x4e4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <UART_SetConfig+0x4e4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495a:	441c      	add	r4, r3
 800495c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004960:	2200      	movs	r2, #0
 8004962:	673b      	str	r3, [r7, #112]	; 0x70
 8004964:	677a      	str	r2, [r7, #116]	; 0x74
 8004966:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	415b      	adcs	r3, r3
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800497a:	4641      	mov	r1, r8
 800497c:	1851      	adds	r1, r2, r1
 800497e:	6039      	str	r1, [r7, #0]
 8004980:	4649      	mov	r1, r9
 8004982:	414b      	adcs	r3, r1
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004992:	4659      	mov	r1, fp
 8004994:	00cb      	lsls	r3, r1, #3
 8004996:	4651      	mov	r1, sl
 8004998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499c:	4651      	mov	r1, sl
 800499e:	00ca      	lsls	r2, r1, #3
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	4642      	mov	r2, r8
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ac:	464b      	mov	r3, r9
 80049ae:	460a      	mov	r2, r1
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	663b      	str	r3, [r7, #96]	; 0x60
 80049c0:	667a      	str	r2, [r7, #100]	; 0x64
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049ce:	4649      	mov	r1, r9
 80049d0:	008b      	lsls	r3, r1, #2
 80049d2:	4641      	mov	r1, r8
 80049d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d8:	4641      	mov	r1, r8
 80049da:	008a      	lsls	r2, r1, #2
 80049dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049e0:	f7fc f93a 	bl	8000c58 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <UART_SetConfig+0x4e4>)
 80049ea:	fba3 1302 	umull	r1, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2164      	movs	r1, #100	; 0x64
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <UART_SetConfig+0x4e4>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4422      	add	r2, r4
 8004a10:	609a      	str	r2, [r3, #8]
}
 8004a12:	bf00      	nop
 8004a14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	51eb851f 	.word	0x51eb851f

08004a24 <__errno>:
 8004a24:	4b01      	ldr	r3, [pc, #4]	; (8004a2c <__errno+0x8>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4d0d      	ldr	r5, [pc, #52]	; (8004a68 <__libc_init_array+0x38>)
 8004a34:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	4d0b      	ldr	r5, [pc, #44]	; (8004a70 <__libc_init_array+0x40>)
 8004a42:	4c0c      	ldr	r4, [pc, #48]	; (8004a74 <__libc_init_array+0x44>)
 8004a44:	f003 fe32 	bl	80086ac <_init>
 8004a48:	1b64      	subs	r4, r4, r5
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08008b20 	.word	0x08008b20
 8004a6c:	08008b20 	.word	0x08008b20
 8004a70:	08008b20 	.word	0x08008b20
 8004a74:	08008b24 	.word	0x08008b24

08004a78 <memset>:
 8004a78:	4402      	add	r2, r0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d100      	bne.n	8004a82 <memset+0xa>
 8004a80:	4770      	bx	lr
 8004a82:	f803 1b01 	strb.w	r1, [r3], #1
 8004a86:	e7f9      	b.n	8004a7c <memset+0x4>

08004a88 <__cvt>:
 8004a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	ec55 4b10 	vmov	r4, r5, d0
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	460e      	mov	r6, r1
 8004a94:	4619      	mov	r1, r3
 8004a96:	462b      	mov	r3, r5
 8004a98:	bfbb      	ittet	lt
 8004a9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a9e:	461d      	movlt	r5, r3
 8004aa0:	2300      	movge	r3, #0
 8004aa2:	232d      	movlt	r3, #45	; 0x2d
 8004aa4:	700b      	strb	r3, [r1, #0]
 8004aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004aac:	4691      	mov	r9, r2
 8004aae:	f023 0820 	bic.w	r8, r3, #32
 8004ab2:	bfbc      	itt	lt
 8004ab4:	4622      	movlt	r2, r4
 8004ab6:	4614      	movlt	r4, r2
 8004ab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004abc:	d005      	beq.n	8004aca <__cvt+0x42>
 8004abe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ac2:	d100      	bne.n	8004ac6 <__cvt+0x3e>
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	e000      	b.n	8004acc <__cvt+0x44>
 8004aca:	2103      	movs	r1, #3
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	ab02      	add	r3, sp, #8
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	ec45 4b10 	vmov	d0, r4, r5
 8004ad8:	4653      	mov	r3, sl
 8004ada:	4632      	mov	r2, r6
 8004adc:	f000 fd00 	bl	80054e0 <_dtoa_r>
 8004ae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	d102      	bne.n	8004aee <__cvt+0x66>
 8004ae8:	f019 0f01 	tst.w	r9, #1
 8004aec:	d022      	beq.n	8004b34 <__cvt+0xac>
 8004aee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004af2:	eb07 0906 	add.w	r9, r7, r6
 8004af6:	d110      	bne.n	8004b1a <__cvt+0x92>
 8004af8:	783b      	ldrb	r3, [r7, #0]
 8004afa:	2b30      	cmp	r3, #48	; 0x30
 8004afc:	d10a      	bne.n	8004b14 <__cvt+0x8c>
 8004afe:	2200      	movs	r2, #0
 8004b00:	2300      	movs	r3, #0
 8004b02:	4620      	mov	r0, r4
 8004b04:	4629      	mov	r1, r5
 8004b06:	f7fb ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b0a:	b918      	cbnz	r0, 8004b14 <__cvt+0x8c>
 8004b0c:	f1c6 0601 	rsb	r6, r6, #1
 8004b10:	f8ca 6000 	str.w	r6, [sl]
 8004b14:	f8da 3000 	ldr.w	r3, [sl]
 8004b18:	4499      	add	r9, r3
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb ffd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b26:	b108      	cbz	r0, 8004b2c <__cvt+0xa4>
 8004b28:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b2c:	2230      	movs	r2, #48	; 0x30
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	454b      	cmp	r3, r9
 8004b32:	d307      	bcc.n	8004b44 <__cvt+0xbc>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b38:	1bdb      	subs	r3, r3, r7
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	b004      	add	sp, #16
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	1c59      	adds	r1, r3, #1
 8004b46:	9103      	str	r1, [sp, #12]
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e7f0      	b.n	8004b2e <__cvt+0xa6>

08004b4c <__exponent>:
 8004b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2900      	cmp	r1, #0
 8004b52:	bfb8      	it	lt
 8004b54:	4249      	neglt	r1, r1
 8004b56:	f803 2b02 	strb.w	r2, [r3], #2
 8004b5a:	bfb4      	ite	lt
 8004b5c:	222d      	movlt	r2, #45	; 0x2d
 8004b5e:	222b      	movge	r2, #43	; 0x2b
 8004b60:	2909      	cmp	r1, #9
 8004b62:	7042      	strb	r2, [r0, #1]
 8004b64:	dd2a      	ble.n	8004bbc <__exponent+0x70>
 8004b66:	f10d 0407 	add.w	r4, sp, #7
 8004b6a:	46a4      	mov	ip, r4
 8004b6c:	270a      	movs	r7, #10
 8004b6e:	46a6      	mov	lr, r4
 8004b70:	460a      	mov	r2, r1
 8004b72:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b76:	fb07 1516 	mls	r5, r7, r6, r1
 8004b7a:	3530      	adds	r5, #48	; 0x30
 8004b7c:	2a63      	cmp	r2, #99	; 0x63
 8004b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b86:	4631      	mov	r1, r6
 8004b88:	dcf1      	bgt.n	8004b6e <__exponent+0x22>
 8004b8a:	3130      	adds	r1, #48	; 0x30
 8004b8c:	f1ae 0502 	sub.w	r5, lr, #2
 8004b90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b94:	1c44      	adds	r4, r0, #1
 8004b96:	4629      	mov	r1, r5
 8004b98:	4561      	cmp	r1, ip
 8004b9a:	d30a      	bcc.n	8004bb2 <__exponent+0x66>
 8004b9c:	f10d 0209 	add.w	r2, sp, #9
 8004ba0:	eba2 020e 	sub.w	r2, r2, lr
 8004ba4:	4565      	cmp	r5, ip
 8004ba6:	bf88      	it	hi
 8004ba8:	2200      	movhi	r2, #0
 8004baa:	4413      	add	r3, r2
 8004bac:	1a18      	subs	r0, r3, r0
 8004bae:	b003      	add	sp, #12
 8004bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bba:	e7ed      	b.n	8004b98 <__exponent+0x4c>
 8004bbc:	2330      	movs	r3, #48	; 0x30
 8004bbe:	3130      	adds	r1, #48	; 0x30
 8004bc0:	7083      	strb	r3, [r0, #2]
 8004bc2:	70c1      	strb	r1, [r0, #3]
 8004bc4:	1d03      	adds	r3, r0, #4
 8004bc6:	e7f1      	b.n	8004bac <__exponent+0x60>

08004bc8 <_printf_float>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	ed2d 8b02 	vpush	{d8}
 8004bd0:	b08d      	sub	sp, #52	; 0x34
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bd8:	4616      	mov	r6, r2
 8004bda:	461f      	mov	r7, r3
 8004bdc:	4605      	mov	r5, r0
 8004bde:	f001 fa6d 	bl	80060bc <_localeconv_r>
 8004be2:	f8d0 a000 	ldr.w	sl, [r0]
 8004be6:	4650      	mov	r0, sl
 8004be8:	f7fb fafa 	bl	80001e0 <strlen>
 8004bec:	2300      	movs	r3, #0
 8004bee:	930a      	str	r3, [sp, #40]	; 0x28
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bfc:	3307      	adds	r3, #7
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	f103 0208 	add.w	r2, r3, #8
 8004c06:	f8c8 2000 	str.w	r2, [r8]
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c1a:	9307      	str	r3, [sp, #28]
 8004c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c20:	ee08 0a10 	vmov	s16, r0
 8004c24:	4b9f      	ldr	r3, [pc, #636]	; (8004ea4 <_printf_float+0x2dc>)
 8004c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	f7fb ff85 	bl	8000b3c <__aeabi_dcmpun>
 8004c32:	bb88      	cbnz	r0, 8004c98 <_printf_float+0xd0>
 8004c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c38:	4b9a      	ldr	r3, [pc, #616]	; (8004ea4 <_printf_float+0x2dc>)
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	f7fb ff5f 	bl	8000b00 <__aeabi_dcmple>
 8004c42:	bb48      	cbnz	r0, 8004c98 <_printf_float+0xd0>
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	f7fb ff4e 	bl	8000aec <__aeabi_dcmplt>
 8004c50:	b110      	cbz	r0, 8004c58 <_printf_float+0x90>
 8004c52:	232d      	movs	r3, #45	; 0x2d
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c58:	4b93      	ldr	r3, [pc, #588]	; (8004ea8 <_printf_float+0x2e0>)
 8004c5a:	4894      	ldr	r0, [pc, #592]	; (8004eac <_printf_float+0x2e4>)
 8004c5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c60:	bf94      	ite	ls
 8004c62:	4698      	movls	r8, r3
 8004c64:	4680      	movhi	r8, r0
 8004c66:	2303      	movs	r3, #3
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	9b05      	ldr	r3, [sp, #20]
 8004c6c:	f023 0204 	bic.w	r2, r3, #4
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	f04f 0900 	mov.w	r9, #0
 8004c76:	9700      	str	r7, [sp, #0]
 8004c78:	4633      	mov	r3, r6
 8004c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f9d8 	bl	8005034 <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	f040 8090 	bne.w	8004daa <_printf_float+0x1e2>
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	b00d      	add	sp, #52	; 0x34
 8004c90:	ecbd 8b02 	vpop	{d8}
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	f7fb ff4c 	bl	8000b3c <__aeabi_dcmpun>
 8004ca4:	b140      	cbz	r0, 8004cb8 <_printf_float+0xf0>
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bfbc      	itt	lt
 8004cac:	232d      	movlt	r3, #45	; 0x2d
 8004cae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cb2:	487f      	ldr	r0, [pc, #508]	; (8004eb0 <_printf_float+0x2e8>)
 8004cb4:	4b7f      	ldr	r3, [pc, #508]	; (8004eb4 <_printf_float+0x2ec>)
 8004cb6:	e7d1      	b.n	8004c5c <_printf_float+0x94>
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cbe:	9206      	str	r2, [sp, #24]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	d13f      	bne.n	8004d44 <_printf_float+0x17c>
 8004cc4:	2306      	movs	r3, #6
 8004cc6:	6063      	str	r3, [r4, #4]
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	6861      	ldr	r1, [r4, #4]
 8004ccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	ab0a      	add	r3, sp, #40	; 0x28
 8004cd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cda:	ab09      	add	r3, sp, #36	; 0x24
 8004cdc:	ec49 8b10 	vmov	d0, r8, r9
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	6022      	str	r2, [r4, #0]
 8004ce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f7ff fecd 	bl	8004a88 <__cvt>
 8004cee:	9b06      	ldr	r3, [sp, #24]
 8004cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cf2:	2b47      	cmp	r3, #71	; 0x47
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	d108      	bne.n	8004d0a <_printf_float+0x142>
 8004cf8:	1cc8      	adds	r0, r1, #3
 8004cfa:	db02      	blt.n	8004d02 <_printf_float+0x13a>
 8004cfc:	6863      	ldr	r3, [r4, #4]
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	dd41      	ble.n	8004d86 <_printf_float+0x1be>
 8004d02:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d06:	fa5f fb8b 	uxtb.w	fp, fp
 8004d0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d0e:	d820      	bhi.n	8004d52 <_printf_float+0x18a>
 8004d10:	3901      	subs	r1, #1
 8004d12:	465a      	mov	r2, fp
 8004d14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d18:	9109      	str	r1, [sp, #36]	; 0x24
 8004d1a:	f7ff ff17 	bl	8004b4c <__exponent>
 8004d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d20:	1813      	adds	r3, r2, r0
 8004d22:	2a01      	cmp	r2, #1
 8004d24:	4681      	mov	r9, r0
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	dc02      	bgt.n	8004d30 <_printf_float+0x168>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	07d2      	lsls	r2, r2, #31
 8004d2e:	d501      	bpl.n	8004d34 <_printf_float+0x16c>
 8004d30:	3301      	adds	r3, #1
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d09c      	beq.n	8004c76 <_printf_float+0xae>
 8004d3c:	232d      	movs	r3, #45	; 0x2d
 8004d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d42:	e798      	b.n	8004c76 <_printf_float+0xae>
 8004d44:	9a06      	ldr	r2, [sp, #24]
 8004d46:	2a47      	cmp	r2, #71	; 0x47
 8004d48:	d1be      	bne.n	8004cc8 <_printf_float+0x100>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1bc      	bne.n	8004cc8 <_printf_float+0x100>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e7b9      	b.n	8004cc6 <_printf_float+0xfe>
 8004d52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d56:	d118      	bne.n	8004d8a <_printf_float+0x1c2>
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	6863      	ldr	r3, [r4, #4]
 8004d5c:	dd0b      	ble.n	8004d76 <_printf_float+0x1ae>
 8004d5e:	6121      	str	r1, [r4, #16]
 8004d60:	b913      	cbnz	r3, 8004d68 <_printf_float+0x1a0>
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	07d0      	lsls	r0, r2, #31
 8004d66:	d502      	bpl.n	8004d6e <_printf_float+0x1a6>
 8004d68:	3301      	adds	r3, #1
 8004d6a:	440b      	add	r3, r1
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d70:	f04f 0900 	mov.w	r9, #0
 8004d74:	e7de      	b.n	8004d34 <_printf_float+0x16c>
 8004d76:	b913      	cbnz	r3, 8004d7e <_printf_float+0x1b6>
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	07d2      	lsls	r2, r2, #31
 8004d7c:	d501      	bpl.n	8004d82 <_printf_float+0x1ba>
 8004d7e:	3302      	adds	r3, #2
 8004d80:	e7f4      	b.n	8004d6c <_printf_float+0x1a4>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e7f2      	b.n	8004d6c <_printf_float+0x1a4>
 8004d86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	db05      	blt.n	8004d9c <_printf_float+0x1d4>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	6121      	str	r1, [r4, #16]
 8004d94:	07d8      	lsls	r0, r3, #31
 8004d96:	d5ea      	bpl.n	8004d6e <_printf_float+0x1a6>
 8004d98:	1c4b      	adds	r3, r1, #1
 8004d9a:	e7e7      	b.n	8004d6c <_printf_float+0x1a4>
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	bfd4      	ite	le
 8004da0:	f1c1 0202 	rsble	r2, r1, #2
 8004da4:	2201      	movgt	r2, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	e7e0      	b.n	8004d6c <_printf_float+0x1a4>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	055a      	lsls	r2, r3, #21
 8004dae:	d407      	bmi.n	8004dc0 <_printf_float+0x1f8>
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	4642      	mov	r2, r8
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d12c      	bne.n	8004e18 <_printf_float+0x250>
 8004dbe:	e764      	b.n	8004c8a <_printf_float+0xc2>
 8004dc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dc4:	f240 80e0 	bls.w	8004f88 <_printf_float+0x3c0>
 8004dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f7fb fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d034      	beq.n	8004e42 <_printf_float+0x27a>
 8004dd8:	4a37      	ldr	r2, [pc, #220]	; (8004eb8 <_printf_float+0x2f0>)
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b8      	blx	r7
 8004de2:	3001      	adds	r0, #1
 8004de4:	f43f af51 	beq.w	8004c8a <_printf_float+0xc2>
 8004de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dec:	429a      	cmp	r2, r3
 8004dee:	db02      	blt.n	8004df6 <_printf_float+0x22e>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	07d8      	lsls	r0, r3, #31
 8004df4:	d510      	bpl.n	8004e18 <_printf_float+0x250>
 8004df6:	ee18 3a10 	vmov	r3, s16
 8004dfa:	4652      	mov	r2, sl
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	f43f af41 	beq.w	8004c8a <_printf_float+0xc2>
 8004e08:	f04f 0800 	mov.w	r8, #0
 8004e0c:	f104 091a 	add.w	r9, r4, #26
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4543      	cmp	r3, r8
 8004e16:	dc09      	bgt.n	8004e2c <_printf_float+0x264>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	079b      	lsls	r3, r3, #30
 8004e1c:	f100 8105 	bmi.w	800502a <_printf_float+0x462>
 8004e20:	68e0      	ldr	r0, [r4, #12]
 8004e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e24:	4298      	cmp	r0, r3
 8004e26:	bfb8      	it	lt
 8004e28:	4618      	movlt	r0, r3
 8004e2a:	e730      	b.n	8004c8e <_printf_float+0xc6>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	464a      	mov	r2, r9
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f af27 	beq.w	8004c8a <_printf_float+0xc2>
 8004e3c:	f108 0801 	add.w	r8, r8, #1
 8004e40:	e7e6      	b.n	8004e10 <_printf_float+0x248>
 8004e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dc39      	bgt.n	8004ebc <_printf_float+0x2f4>
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <_printf_float+0x2f0>)
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af19 	beq.w	8004c8a <_printf_float+0xc2>
 8004e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d102      	bne.n	8004e66 <_printf_float+0x29e>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	07d9      	lsls	r1, r3, #31
 8004e64:	d5d8      	bpl.n	8004e18 <_printf_float+0x250>
 8004e66:	ee18 3a10 	vmov	r3, s16
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f af09 	beq.w	8004c8a <_printf_float+0xc2>
 8004e78:	f04f 0900 	mov.w	r9, #0
 8004e7c:	f104 0a1a 	add.w	sl, r4, #26
 8004e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e82:	425b      	negs	r3, r3
 8004e84:	454b      	cmp	r3, r9
 8004e86:	dc01      	bgt.n	8004e8c <_printf_float+0x2c4>
 8004e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8a:	e792      	b.n	8004db2 <_printf_float+0x1ea>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4652      	mov	r2, sl
 8004e90:	4631      	mov	r1, r6
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b8      	blx	r7
 8004e96:	3001      	adds	r0, #1
 8004e98:	f43f aef7 	beq.w	8004c8a <_printf_float+0xc2>
 8004e9c:	f109 0901 	add.w	r9, r9, #1
 8004ea0:	e7ee      	b.n	8004e80 <_printf_float+0x2b8>
 8004ea2:	bf00      	nop
 8004ea4:	7fefffff 	.word	0x7fefffff
 8004ea8:	08008710 	.word	0x08008710
 8004eac:	08008714 	.word	0x08008714
 8004eb0:	0800871c 	.word	0x0800871c
 8004eb4:	08008718 	.word	0x08008718
 8004eb8:	08008720 	.word	0x08008720
 8004ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	bfa8      	it	ge
 8004ec4:	461a      	movge	r2, r3
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	4691      	mov	r9, r2
 8004eca:	dc37      	bgt.n	8004f3c <_printf_float+0x374>
 8004ecc:	f04f 0b00 	mov.w	fp, #0
 8004ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ed4:	f104 021a 	add.w	r2, r4, #26
 8004ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	eba3 0309 	sub.w	r3, r3, r9
 8004ee0:	455b      	cmp	r3, fp
 8004ee2:	dc33      	bgt.n	8004f4c <_printf_float+0x384>
 8004ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	db3b      	blt.n	8004f64 <_printf_float+0x39c>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	07da      	lsls	r2, r3, #31
 8004ef0:	d438      	bmi.n	8004f64 <_printf_float+0x39c>
 8004ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef4:	9a05      	ldr	r2, [sp, #20]
 8004ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ef8:	1a9a      	subs	r2, r3, r2
 8004efa:	eba3 0901 	sub.w	r9, r3, r1
 8004efe:	4591      	cmp	r9, r2
 8004f00:	bfa8      	it	ge
 8004f02:	4691      	movge	r9, r2
 8004f04:	f1b9 0f00 	cmp.w	r9, #0
 8004f08:	dc35      	bgt.n	8004f76 <_printf_float+0x3ae>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f12:	f104 0a1a 	add.w	sl, r4, #26
 8004f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	eba3 0309 	sub.w	r3, r3, r9
 8004f20:	4543      	cmp	r3, r8
 8004f22:	f77f af79 	ble.w	8004e18 <_printf_float+0x250>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f aeaa 	beq.w	8004c8a <_printf_float+0xc2>
 8004f36:	f108 0801 	add.w	r8, r8, #1
 8004f3a:	e7ec      	b.n	8004f16 <_printf_float+0x34e>
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4642      	mov	r2, r8
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	d1c0      	bne.n	8004ecc <_printf_float+0x304>
 8004f4a:	e69e      	b.n	8004c8a <_printf_float+0xc2>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	9205      	str	r2, [sp, #20]
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f ae97 	beq.w	8004c8a <_printf_float+0xc2>
 8004f5c:	9a05      	ldr	r2, [sp, #20]
 8004f5e:	f10b 0b01 	add.w	fp, fp, #1
 8004f62:	e7b9      	b.n	8004ed8 <_printf_float+0x310>
 8004f64:	ee18 3a10 	vmov	r3, s16
 8004f68:	4652      	mov	r2, sl
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1be      	bne.n	8004ef2 <_printf_float+0x32a>
 8004f74:	e689      	b.n	8004c8a <_printf_float+0xc2>
 8004f76:	9a05      	ldr	r2, [sp, #20]
 8004f78:	464b      	mov	r3, r9
 8004f7a:	4442      	add	r2, r8
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	d1c1      	bne.n	8004f0a <_printf_float+0x342>
 8004f86:	e680      	b.n	8004c8a <_printf_float+0xc2>
 8004f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f8a:	2a01      	cmp	r2, #1
 8004f8c:	dc01      	bgt.n	8004f92 <_printf_float+0x3ca>
 8004f8e:	07db      	lsls	r3, r3, #31
 8004f90:	d538      	bpl.n	8005004 <_printf_float+0x43c>
 8004f92:	2301      	movs	r3, #1
 8004f94:	4642      	mov	r2, r8
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f ae74 	beq.w	8004c8a <_printf_float+0xc2>
 8004fa2:	ee18 3a10 	vmov	r3, s16
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f ae6b 	beq.w	8004c8a <_printf_float+0xc2>
 8004fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f7fb fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fc0:	b9d8      	cbnz	r0, 8004ffa <_printf_float+0x432>
 8004fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc4:	f108 0201 	add.w	r2, r8, #1
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d10e      	bne.n	8004ff2 <_printf_float+0x42a>
 8004fd4:	e659      	b.n	8004c8a <_printf_float+0xc2>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f ae52 	beq.w	8004c8a <_printf_float+0xc2>
 8004fe6:	f108 0801 	add.w	r8, r8, #1
 8004fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	4543      	cmp	r3, r8
 8004ff0:	dcf1      	bgt.n	8004fd6 <_printf_float+0x40e>
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ff8:	e6dc      	b.n	8004db4 <_printf_float+0x1ec>
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	f104 0a1a 	add.w	sl, r4, #26
 8005002:	e7f2      	b.n	8004fea <_printf_float+0x422>
 8005004:	2301      	movs	r3, #1
 8005006:	4642      	mov	r2, r8
 8005008:	e7df      	b.n	8004fca <_printf_float+0x402>
 800500a:	2301      	movs	r3, #1
 800500c:	464a      	mov	r2, r9
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae38 	beq.w	8004c8a <_printf_float+0xc2>
 800501a:	f108 0801 	add.w	r8, r8, #1
 800501e:	68e3      	ldr	r3, [r4, #12]
 8005020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005022:	1a5b      	subs	r3, r3, r1
 8005024:	4543      	cmp	r3, r8
 8005026:	dcf0      	bgt.n	800500a <_printf_float+0x442>
 8005028:	e6fa      	b.n	8004e20 <_printf_float+0x258>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	f104 0919 	add.w	r9, r4, #25
 8005032:	e7f4      	b.n	800501e <_printf_float+0x456>

08005034 <_printf_common>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	4616      	mov	r6, r2
 800503a:	4699      	mov	r9, r3
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	690b      	ldr	r3, [r1, #16]
 8005040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005044:	4293      	cmp	r3, r2
 8005046:	bfb8      	it	lt
 8005048:	4613      	movlt	r3, r2
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005050:	4607      	mov	r7, r0
 8005052:	460c      	mov	r4, r1
 8005054:	b10a      	cbz	r2, 800505a <_printf_common+0x26>
 8005056:	3301      	adds	r3, #1
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	0699      	lsls	r1, r3, #26
 800505e:	bf42      	ittt	mi
 8005060:	6833      	ldrmi	r3, [r6, #0]
 8005062:	3302      	addmi	r3, #2
 8005064:	6033      	strmi	r3, [r6, #0]
 8005066:	6825      	ldr	r5, [r4, #0]
 8005068:	f015 0506 	ands.w	r5, r5, #6
 800506c:	d106      	bne.n	800507c <_printf_common+0x48>
 800506e:	f104 0a19 	add.w	sl, r4, #25
 8005072:	68e3      	ldr	r3, [r4, #12]
 8005074:	6832      	ldr	r2, [r6, #0]
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	42ab      	cmp	r3, r5
 800507a:	dc26      	bgt.n	80050ca <_printf_common+0x96>
 800507c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005080:	1e13      	subs	r3, r2, #0
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	bf18      	it	ne
 8005086:	2301      	movne	r3, #1
 8005088:	0692      	lsls	r2, r2, #26
 800508a:	d42b      	bmi.n	80050e4 <_printf_common+0xb0>
 800508c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d01e      	beq.n	80050d8 <_printf_common+0xa4>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	68e5      	ldr	r5, [r4, #12]
 800509e:	6832      	ldr	r2, [r6, #0]
 80050a0:	f003 0306 	and.w	r3, r3, #6
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	bf08      	it	eq
 80050a8:	1aad      	subeq	r5, r5, r2
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	bf0c      	ite	eq
 80050b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b4:	2500      	movne	r5, #0
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bfc4      	itt	gt
 80050ba:	1a9b      	subgt	r3, r3, r2
 80050bc:	18ed      	addgt	r5, r5, r3
 80050be:	2600      	movs	r6, #0
 80050c0:	341a      	adds	r4, #26
 80050c2:	42b5      	cmp	r5, r6
 80050c4:	d11a      	bne.n	80050fc <_printf_common+0xc8>
 80050c6:	2000      	movs	r0, #0
 80050c8:	e008      	b.n	80050dc <_printf_common+0xa8>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4652      	mov	r2, sl
 80050ce:	4649      	mov	r1, r9
 80050d0:	4638      	mov	r0, r7
 80050d2:	47c0      	blx	r8
 80050d4:	3001      	adds	r0, #1
 80050d6:	d103      	bne.n	80050e0 <_printf_common+0xac>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e0:	3501      	adds	r5, #1
 80050e2:	e7c6      	b.n	8005072 <_printf_common+0x3e>
 80050e4:	18e1      	adds	r1, r4, r3
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	2030      	movs	r0, #48	; 0x30
 80050ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ee:	4422      	add	r2, r4
 80050f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f8:	3302      	adds	r3, #2
 80050fa:	e7c7      	b.n	800508c <_printf_common+0x58>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4622      	mov	r2, r4
 8005100:	4649      	mov	r1, r9
 8005102:	4638      	mov	r0, r7
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d0e6      	beq.n	80050d8 <_printf_common+0xa4>
 800510a:	3601      	adds	r6, #1
 800510c:	e7d9      	b.n	80050c2 <_printf_common+0x8e>
	...

08005110 <_printf_i>:
 8005110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005114:	7e0f      	ldrb	r7, [r1, #24]
 8005116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005118:	2f78      	cmp	r7, #120	; 0x78
 800511a:	4691      	mov	r9, r2
 800511c:	4680      	mov	r8, r0
 800511e:	460c      	mov	r4, r1
 8005120:	469a      	mov	sl, r3
 8005122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005126:	d807      	bhi.n	8005138 <_printf_i+0x28>
 8005128:	2f62      	cmp	r7, #98	; 0x62
 800512a:	d80a      	bhi.n	8005142 <_printf_i+0x32>
 800512c:	2f00      	cmp	r7, #0
 800512e:	f000 80d8 	beq.w	80052e2 <_printf_i+0x1d2>
 8005132:	2f58      	cmp	r7, #88	; 0x58
 8005134:	f000 80a3 	beq.w	800527e <_printf_i+0x16e>
 8005138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800513c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005140:	e03a      	b.n	80051b8 <_printf_i+0xa8>
 8005142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005146:	2b15      	cmp	r3, #21
 8005148:	d8f6      	bhi.n	8005138 <_printf_i+0x28>
 800514a:	a101      	add	r1, pc, #4	; (adr r1, 8005150 <_printf_i+0x40>)
 800514c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005150:	080051a9 	.word	0x080051a9
 8005154:	080051bd 	.word	0x080051bd
 8005158:	08005139 	.word	0x08005139
 800515c:	08005139 	.word	0x08005139
 8005160:	08005139 	.word	0x08005139
 8005164:	08005139 	.word	0x08005139
 8005168:	080051bd 	.word	0x080051bd
 800516c:	08005139 	.word	0x08005139
 8005170:	08005139 	.word	0x08005139
 8005174:	08005139 	.word	0x08005139
 8005178:	08005139 	.word	0x08005139
 800517c:	080052c9 	.word	0x080052c9
 8005180:	080051ed 	.word	0x080051ed
 8005184:	080052ab 	.word	0x080052ab
 8005188:	08005139 	.word	0x08005139
 800518c:	08005139 	.word	0x08005139
 8005190:	080052eb 	.word	0x080052eb
 8005194:	08005139 	.word	0x08005139
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005139 	.word	0x08005139
 80051a0:	08005139 	.word	0x08005139
 80051a4:	080052b3 	.word	0x080052b3
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	1d1a      	adds	r2, r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	602a      	str	r2, [r5, #0]
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0a3      	b.n	8005304 <_printf_i+0x1f4>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	6829      	ldr	r1, [r5, #0]
 80051c0:	0606      	lsls	r6, r0, #24
 80051c2:	f101 0304 	add.w	r3, r1, #4
 80051c6:	d50a      	bpl.n	80051de <_printf_i+0xce>
 80051c8:	680e      	ldr	r6, [r1, #0]
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	2e00      	cmp	r6, #0
 80051ce:	da03      	bge.n	80051d8 <_printf_i+0xc8>
 80051d0:	232d      	movs	r3, #45	; 0x2d
 80051d2:	4276      	negs	r6, r6
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d8:	485e      	ldr	r0, [pc, #376]	; (8005354 <_printf_i+0x244>)
 80051da:	230a      	movs	r3, #10
 80051dc:	e019      	b.n	8005212 <_printf_i+0x102>
 80051de:	680e      	ldr	r6, [r1, #0]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051e6:	bf18      	it	ne
 80051e8:	b236      	sxthne	r6, r6
 80051ea:	e7ef      	b.n	80051cc <_printf_i+0xbc>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	6029      	str	r1, [r5, #0]
 80051f4:	0601      	lsls	r1, r0, #24
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0xec>
 80051f8:	681e      	ldr	r6, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_printf_i+0xf2>
 80051fc:	0646      	lsls	r6, r0, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0xe8>
 8005200:	881e      	ldrh	r6, [r3, #0]
 8005202:	4854      	ldr	r0, [pc, #336]	; (8005354 <_printf_i+0x244>)
 8005204:	2f6f      	cmp	r7, #111	; 0x6f
 8005206:	bf0c      	ite	eq
 8005208:	2308      	moveq	r3, #8
 800520a:	230a      	movne	r3, #10
 800520c:	2100      	movs	r1, #0
 800520e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005212:	6865      	ldr	r5, [r4, #4]
 8005214:	60a5      	str	r5, [r4, #8]
 8005216:	2d00      	cmp	r5, #0
 8005218:	bfa2      	ittt	ge
 800521a:	6821      	ldrge	r1, [r4, #0]
 800521c:	f021 0104 	bicge.w	r1, r1, #4
 8005220:	6021      	strge	r1, [r4, #0]
 8005222:	b90e      	cbnz	r6, 8005228 <_printf_i+0x118>
 8005224:	2d00      	cmp	r5, #0
 8005226:	d04d      	beq.n	80052c4 <_printf_i+0x1b4>
 8005228:	4615      	mov	r5, r2
 800522a:	fbb6 f1f3 	udiv	r1, r6, r3
 800522e:	fb03 6711 	mls	r7, r3, r1, r6
 8005232:	5dc7      	ldrb	r7, [r0, r7]
 8005234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005238:	4637      	mov	r7, r6
 800523a:	42bb      	cmp	r3, r7
 800523c:	460e      	mov	r6, r1
 800523e:	d9f4      	bls.n	800522a <_printf_i+0x11a>
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10b      	bne.n	800525c <_printf_i+0x14c>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07de      	lsls	r6, r3, #31
 8005248:	d508      	bpl.n	800525c <_printf_i+0x14c>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	4299      	cmp	r1, r3
 8005250:	bfde      	ittt	le
 8005252:	2330      	movle	r3, #48	; 0x30
 8005254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800525c:	1b52      	subs	r2, r2, r5
 800525e:	6122      	str	r2, [r4, #16]
 8005260:	f8cd a000 	str.w	sl, [sp]
 8005264:	464b      	mov	r3, r9
 8005266:	aa03      	add	r2, sp, #12
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff fee2 	bl	8005034 <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	d14c      	bne.n	800530e <_printf_i+0x1fe>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	b004      	add	sp, #16
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	4835      	ldr	r0, [pc, #212]	; (8005354 <_printf_i+0x244>)
 8005280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005284:	6829      	ldr	r1, [r5, #0]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	f851 6b04 	ldr.w	r6, [r1], #4
 800528c:	6029      	str	r1, [r5, #0]
 800528e:	061d      	lsls	r5, r3, #24
 8005290:	d514      	bpl.n	80052bc <_printf_i+0x1ac>
 8005292:	07df      	lsls	r7, r3, #31
 8005294:	bf44      	itt	mi
 8005296:	f043 0320 	orrmi.w	r3, r3, #32
 800529a:	6023      	strmi	r3, [r4, #0]
 800529c:	b91e      	cbnz	r6, 80052a6 <_printf_i+0x196>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f023 0320 	bic.w	r3, r3, #32
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	2310      	movs	r3, #16
 80052a8:	e7b0      	b.n	800520c <_printf_i+0xfc>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	2378      	movs	r3, #120	; 0x78
 80052b4:	4828      	ldr	r0, [pc, #160]	; (8005358 <_printf_i+0x248>)
 80052b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ba:	e7e3      	b.n	8005284 <_printf_i+0x174>
 80052bc:	0659      	lsls	r1, r3, #25
 80052be:	bf48      	it	mi
 80052c0:	b2b6      	uxthmi	r6, r6
 80052c2:	e7e6      	b.n	8005292 <_printf_i+0x182>
 80052c4:	4615      	mov	r5, r2
 80052c6:	e7bb      	b.n	8005240 <_printf_i+0x130>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	6826      	ldr	r6, [r4, #0]
 80052cc:	6961      	ldr	r1, [r4, #20]
 80052ce:	1d18      	adds	r0, r3, #4
 80052d0:	6028      	str	r0, [r5, #0]
 80052d2:	0635      	lsls	r5, r6, #24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0x1cc>
 80052d8:	6019      	str	r1, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0x1d2>
 80052dc:	0670      	lsls	r0, r6, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0x1c8>
 80052e0:	8019      	strh	r1, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	4615      	mov	r5, r2
 80052e8:	e7ba      	b.n	8005260 <_printf_i+0x150>
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	602a      	str	r2, [r5, #0]
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7fa ff7a 	bl	80001f0 <memchr>
 80052fc:	b108      	cbz	r0, 8005302 <_printf_i+0x1f2>
 80052fe:	1b40      	subs	r0, r0, r5
 8005300:	6060      	str	r0, [r4, #4]
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	2300      	movs	r3, #0
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530c:	e7a8      	b.n	8005260 <_printf_i+0x150>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	462a      	mov	r2, r5
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d0ab      	beq.n	8005274 <_printf_i+0x164>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	079b      	lsls	r3, r3, #30
 8005320:	d413      	bmi.n	800534a <_printf_i+0x23a>
 8005322:	68e0      	ldr	r0, [r4, #12]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	4298      	cmp	r0, r3
 8005328:	bfb8      	it	lt
 800532a:	4618      	movlt	r0, r3
 800532c:	e7a4      	b.n	8005278 <_printf_i+0x168>
 800532e:	2301      	movs	r3, #1
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d09b      	beq.n	8005274 <_printf_i+0x164>
 800533c:	3501      	adds	r5, #1
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	1a5b      	subs	r3, r3, r1
 8005344:	42ab      	cmp	r3, r5
 8005346:	dcf2      	bgt.n	800532e <_printf_i+0x21e>
 8005348:	e7eb      	b.n	8005322 <_printf_i+0x212>
 800534a:	2500      	movs	r5, #0
 800534c:	f104 0619 	add.w	r6, r4, #25
 8005350:	e7f5      	b.n	800533e <_printf_i+0x22e>
 8005352:	bf00      	nop
 8005354:	08008722 	.word	0x08008722
 8005358:	08008733 	.word	0x08008733

0800535c <sniprintf>:
 800535c:	b40c      	push	{r2, r3}
 800535e:	b530      	push	{r4, r5, lr}
 8005360:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <sniprintf+0x64>)
 8005362:	1e0c      	subs	r4, r1, #0
 8005364:	681d      	ldr	r5, [r3, #0]
 8005366:	b09d      	sub	sp, #116	; 0x74
 8005368:	da08      	bge.n	800537c <sniprintf+0x20>
 800536a:	238b      	movs	r3, #139	; 0x8b
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	b01d      	add	sp, #116	; 0x74
 8005374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005378:	b002      	add	sp, #8
 800537a:	4770      	bx	lr
 800537c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005380:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005384:	bf14      	ite	ne
 8005386:	f104 33ff 	addne.w	r3, r4, #4294967295
 800538a:	4623      	moveq	r3, r4
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005394:	9002      	str	r0, [sp, #8]
 8005396:	9006      	str	r0, [sp, #24]
 8005398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800539c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800539e:	ab21      	add	r3, sp, #132	; 0x84
 80053a0:	a902      	add	r1, sp, #8
 80053a2:	4628      	mov	r0, r5
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	f001 fb79 	bl	8006a9c <_svfiprintf_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	bfbc      	itt	lt
 80053ae:	238b      	movlt	r3, #139	; 0x8b
 80053b0:	602b      	strlt	r3, [r5, #0]
 80053b2:	2c00      	cmp	r4, #0
 80053b4:	d0dd      	beq.n	8005372 <sniprintf+0x16>
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e7d9      	b.n	8005372 <sniprintf+0x16>
 80053be:	bf00      	nop
 80053c0:	2000000c 	.word	0x2000000c

080053c4 <quorem>:
 80053c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	6903      	ldr	r3, [r0, #16]
 80053ca:	690c      	ldr	r4, [r1, #16]
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	4607      	mov	r7, r0
 80053d0:	f2c0 8081 	blt.w	80054d6 <quorem+0x112>
 80053d4:	3c01      	subs	r4, #1
 80053d6:	f101 0814 	add.w	r8, r1, #20
 80053da:	f100 0514 	add.w	r5, r0, #20
 80053de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ec:	3301      	adds	r3, #1
 80053ee:	429a      	cmp	r2, r3
 80053f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80053fc:	d331      	bcc.n	8005462 <quorem+0x9e>
 80053fe:	f04f 0e00 	mov.w	lr, #0
 8005402:	4640      	mov	r0, r8
 8005404:	46ac      	mov	ip, r5
 8005406:	46f2      	mov	sl, lr
 8005408:	f850 2b04 	ldr.w	r2, [r0], #4
 800540c:	b293      	uxth	r3, r2
 800540e:	fb06 e303 	mla	r3, r6, r3, lr
 8005412:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005416:	b29b      	uxth	r3, r3
 8005418:	ebaa 0303 	sub.w	r3, sl, r3
 800541c:	f8dc a000 	ldr.w	sl, [ip]
 8005420:	0c12      	lsrs	r2, r2, #16
 8005422:	fa13 f38a 	uxtah	r3, r3, sl
 8005426:	fb06 e202 	mla	r2, r6, r2, lr
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	9b00      	ldr	r3, [sp, #0]
 800542e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005432:	b292      	uxth	r2, r2
 8005434:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800543c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005440:	4581      	cmp	r9, r0
 8005442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005446:	f84c 3b04 	str.w	r3, [ip], #4
 800544a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800544e:	d2db      	bcs.n	8005408 <quorem+0x44>
 8005450:	f855 300b 	ldr.w	r3, [r5, fp]
 8005454:	b92b      	cbnz	r3, 8005462 <quorem+0x9e>
 8005456:	9b01      	ldr	r3, [sp, #4]
 8005458:	3b04      	subs	r3, #4
 800545a:	429d      	cmp	r5, r3
 800545c:	461a      	mov	r2, r3
 800545e:	d32e      	bcc.n	80054be <quorem+0xfa>
 8005460:	613c      	str	r4, [r7, #16]
 8005462:	4638      	mov	r0, r7
 8005464:	f001 f8c6 	bl	80065f4 <__mcmp>
 8005468:	2800      	cmp	r0, #0
 800546a:	db24      	blt.n	80054b6 <quorem+0xf2>
 800546c:	3601      	adds	r6, #1
 800546e:	4628      	mov	r0, r5
 8005470:	f04f 0c00 	mov.w	ip, #0
 8005474:	f858 2b04 	ldr.w	r2, [r8], #4
 8005478:	f8d0 e000 	ldr.w	lr, [r0]
 800547c:	b293      	uxth	r3, r2
 800547e:	ebac 0303 	sub.w	r3, ip, r3
 8005482:	0c12      	lsrs	r2, r2, #16
 8005484:	fa13 f38e 	uxtah	r3, r3, lr
 8005488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800548c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005496:	45c1      	cmp	r9, r8
 8005498:	f840 3b04 	str.w	r3, [r0], #4
 800549c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054a0:	d2e8      	bcs.n	8005474 <quorem+0xb0>
 80054a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054aa:	b922      	cbnz	r2, 80054b6 <quorem+0xf2>
 80054ac:	3b04      	subs	r3, #4
 80054ae:	429d      	cmp	r5, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	d30a      	bcc.n	80054ca <quorem+0x106>
 80054b4:	613c      	str	r4, [r7, #16]
 80054b6:	4630      	mov	r0, r6
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d1cc      	bne.n	8005460 <quorem+0x9c>
 80054c6:	3c01      	subs	r4, #1
 80054c8:	e7c7      	b.n	800545a <quorem+0x96>
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	3b04      	subs	r3, #4
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d1f0      	bne.n	80054b4 <quorem+0xf0>
 80054d2:	3c01      	subs	r4, #1
 80054d4:	e7eb      	b.n	80054ae <quorem+0xea>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e7ee      	b.n	80054b8 <quorem+0xf4>
 80054da:	0000      	movs	r0, r0
 80054dc:	0000      	movs	r0, r0
	...

080054e0 <_dtoa_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ed2d 8b04 	vpush	{d8-d9}
 80054e8:	ec57 6b10 	vmov	r6, r7, d0
 80054ec:	b093      	sub	sp, #76	; 0x4c
 80054ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054f4:	9106      	str	r1, [sp, #24]
 80054f6:	ee10 aa10 	vmov	sl, s0
 80054fa:	4604      	mov	r4, r0
 80054fc:	9209      	str	r2, [sp, #36]	; 0x24
 80054fe:	930c      	str	r3, [sp, #48]	; 0x30
 8005500:	46bb      	mov	fp, r7
 8005502:	b975      	cbnz	r5, 8005522 <_dtoa_r+0x42>
 8005504:	2010      	movs	r0, #16
 8005506:	f000 fddd 	bl	80060c4 <malloc>
 800550a:	4602      	mov	r2, r0
 800550c:	6260      	str	r0, [r4, #36]	; 0x24
 800550e:	b920      	cbnz	r0, 800551a <_dtoa_r+0x3a>
 8005510:	4ba7      	ldr	r3, [pc, #668]	; (80057b0 <_dtoa_r+0x2d0>)
 8005512:	21ea      	movs	r1, #234	; 0xea
 8005514:	48a7      	ldr	r0, [pc, #668]	; (80057b4 <_dtoa_r+0x2d4>)
 8005516:	f001 fbd1 	bl	8006cbc <__assert_func>
 800551a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800551e:	6005      	str	r5, [r0, #0]
 8005520:	60c5      	str	r5, [r0, #12]
 8005522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	b151      	cbz	r1, 800553e <_dtoa_r+0x5e>
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	604a      	str	r2, [r1, #4]
 800552c:	2301      	movs	r3, #1
 800552e:	4093      	lsls	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
 8005532:	4620      	mov	r0, r4
 8005534:	f000 fe1c 	bl	8006170 <_Bfree>
 8005538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	1e3b      	subs	r3, r7, #0
 8005540:	bfaa      	itet	ge
 8005542:	2300      	movge	r3, #0
 8005544:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005548:	f8c8 3000 	strge.w	r3, [r8]
 800554c:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <_dtoa_r+0x2d8>)
 800554e:	bfbc      	itt	lt
 8005550:	2201      	movlt	r2, #1
 8005552:	f8c8 2000 	strlt.w	r2, [r8]
 8005556:	ea33 030b 	bics.w	r3, r3, fp
 800555a:	d11b      	bne.n	8005594 <_dtoa_r+0xb4>
 800555c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800555e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005568:	4333      	orrs	r3, r6
 800556a:	f000 8592 	beq.w	8006092 <_dtoa_r+0xbb2>
 800556e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005570:	b963      	cbnz	r3, 800558c <_dtoa_r+0xac>
 8005572:	4b92      	ldr	r3, [pc, #584]	; (80057bc <_dtoa_r+0x2dc>)
 8005574:	e022      	b.n	80055bc <_dtoa_r+0xdc>
 8005576:	4b92      	ldr	r3, [pc, #584]	; (80057c0 <_dtoa_r+0x2e0>)
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	3308      	adds	r3, #8
 800557c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	b013      	add	sp, #76	; 0x4c
 8005584:	ecbd 8b04 	vpop	{d8-d9}
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558c:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <_dtoa_r+0x2dc>)
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	3303      	adds	r3, #3
 8005592:	e7f3      	b.n	800557c <_dtoa_r+0x9c>
 8005594:	2200      	movs	r2, #0
 8005596:	2300      	movs	r3, #0
 8005598:	4650      	mov	r0, sl
 800559a:	4659      	mov	r1, fp
 800559c:	f7fb fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80055a0:	ec4b ab19 	vmov	d9, sl, fp
 80055a4:	4680      	mov	r8, r0
 80055a6:	b158      	cbz	r0, 80055c0 <_dtoa_r+0xe0>
 80055a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055aa:	2301      	movs	r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 856b 	beq.w	800608c <_dtoa_r+0xbac>
 80055b6:	4883      	ldr	r0, [pc, #524]	; (80057c4 <_dtoa_r+0x2e4>)
 80055b8:	6018      	str	r0, [r3, #0]
 80055ba:	1e43      	subs	r3, r0, #1
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	e7df      	b.n	8005580 <_dtoa_r+0xa0>
 80055c0:	ec4b ab10 	vmov	d0, sl, fp
 80055c4:	aa10      	add	r2, sp, #64	; 0x40
 80055c6:	a911      	add	r1, sp, #68	; 0x44
 80055c8:	4620      	mov	r0, r4
 80055ca:	f001 f8b9 	bl	8006740 <__d2b>
 80055ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80055d2:	ee08 0a10 	vmov	s16, r0
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	f000 8084 	beq.w	80056e4 <_dtoa_r+0x204>
 80055dc:	ee19 3a90 	vmov	r3, s19
 80055e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055e8:	4656      	mov	r6, sl
 80055ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80055f6:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <_dtoa_r+0x2e8>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	4630      	mov	r0, r6
 80055fc:	4639      	mov	r1, r7
 80055fe:	f7fa fe4b 	bl	8000298 <__aeabi_dsub>
 8005602:	a365      	add	r3, pc, #404	; (adr r3, 8005798 <_dtoa_r+0x2b8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fffe 	bl	8000608 <__aeabi_dmul>
 800560c:	a364      	add	r3, pc, #400	; (adr r3, 80057a0 <_dtoa_r+0x2c0>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f7fa fe43 	bl	800029c <__adddf3>
 8005616:	4606      	mov	r6, r0
 8005618:	4628      	mov	r0, r5
 800561a:	460f      	mov	r7, r1
 800561c:	f7fa ff8a 	bl	8000534 <__aeabi_i2d>
 8005620:	a361      	add	r3, pc, #388	; (adr r3, 80057a8 <_dtoa_r+0x2c8>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa ffef 	bl	8000608 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fa fe33 	bl	800029c <__adddf3>
 8005636:	4606      	mov	r6, r0
 8005638:	460f      	mov	r7, r1
 800563a:	f7fb fa95 	bl	8000b68 <__aeabi_d2iz>
 800563e:	2200      	movs	r2, #0
 8005640:	9000      	str	r0, [sp, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	4630      	mov	r0, r6
 8005646:	4639      	mov	r1, r7
 8005648:	f7fb fa50 	bl	8000aec <__aeabi_dcmplt>
 800564c:	b150      	cbz	r0, 8005664 <_dtoa_r+0x184>
 800564e:	9800      	ldr	r0, [sp, #0]
 8005650:	f7fa ff70 	bl	8000534 <__aeabi_i2d>
 8005654:	4632      	mov	r2, r6
 8005656:	463b      	mov	r3, r7
 8005658:	f7fb fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800565c:	b910      	cbnz	r0, 8005664 <_dtoa_r+0x184>
 800565e:	9b00      	ldr	r3, [sp, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	9b00      	ldr	r3, [sp, #0]
 8005666:	2b16      	cmp	r3, #22
 8005668:	d85a      	bhi.n	8005720 <_dtoa_r+0x240>
 800566a:	9a00      	ldr	r2, [sp, #0]
 800566c:	4b57      	ldr	r3, [pc, #348]	; (80057cc <_dtoa_r+0x2ec>)
 800566e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	ec51 0b19 	vmov	r0, r1, d9
 800567a:	f7fb fa37 	bl	8000aec <__aeabi_dcmplt>
 800567e:	2800      	cmp	r0, #0
 8005680:	d050      	beq.n	8005724 <_dtoa_r+0x244>
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	3b01      	subs	r3, #1
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	930b      	str	r3, [sp, #44]	; 0x2c
 800568c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800568e:	1b5d      	subs	r5, r3, r5
 8005690:	1e6b      	subs	r3, r5, #1
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	bf45      	ittet	mi
 8005696:	f1c5 0301 	rsbmi	r3, r5, #1
 800569a:	9304      	strmi	r3, [sp, #16]
 800569c:	2300      	movpl	r3, #0
 800569e:	2300      	movmi	r3, #0
 80056a0:	bf4c      	ite	mi
 80056a2:	9305      	strmi	r3, [sp, #20]
 80056a4:	9304      	strpl	r3, [sp, #16]
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db3d      	blt.n	8005728 <_dtoa_r+0x248>
 80056ac:	9b05      	ldr	r3, [sp, #20]
 80056ae:	9a00      	ldr	r2, [sp, #0]
 80056b0:	920a      	str	r2, [sp, #40]	; 0x28
 80056b2:	4413      	add	r3, r2
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9307      	str	r3, [sp, #28]
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	2b09      	cmp	r3, #9
 80056be:	f200 8089 	bhi.w	80057d4 <_dtoa_r+0x2f4>
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	bfc4      	itt	gt
 80056c6:	3b04      	subgt	r3, #4
 80056c8:	9306      	strgt	r3, [sp, #24]
 80056ca:	9b06      	ldr	r3, [sp, #24]
 80056cc:	f1a3 0302 	sub.w	r3, r3, #2
 80056d0:	bfcc      	ite	gt
 80056d2:	2500      	movgt	r5, #0
 80056d4:	2501      	movle	r5, #1
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	f200 8087 	bhi.w	80057ea <_dtoa_r+0x30a>
 80056dc:	e8df f003 	tbb	[pc, r3]
 80056e0:	59383a2d 	.word	0x59383a2d
 80056e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80056e8:	441d      	add	r5, r3
 80056ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	bfc1      	itttt	gt
 80056f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80056fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005702:	bfda      	itte	le
 8005704:	f1c3 0320 	rsble	r3, r3, #32
 8005708:	fa06 f003 	lslle.w	r0, r6, r3
 800570c:	4318      	orrgt	r0, r3
 800570e:	f7fa ff01 	bl	8000514 <__aeabi_ui2d>
 8005712:	2301      	movs	r3, #1
 8005714:	4606      	mov	r6, r0
 8005716:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800571a:	3d01      	subs	r5, #1
 800571c:	930e      	str	r3, [sp, #56]	; 0x38
 800571e:	e76a      	b.n	80055f6 <_dtoa_r+0x116>
 8005720:	2301      	movs	r3, #1
 8005722:	e7b2      	b.n	800568a <_dtoa_r+0x1aa>
 8005724:	900b      	str	r0, [sp, #44]	; 0x2c
 8005726:	e7b1      	b.n	800568c <_dtoa_r+0x1ac>
 8005728:	9b04      	ldr	r3, [sp, #16]
 800572a:	9a00      	ldr	r2, [sp, #0]
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	4253      	negs	r3, r2
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	2300      	movs	r3, #0
 8005736:	930a      	str	r3, [sp, #40]	; 0x28
 8005738:	e7bf      	b.n	80056ba <_dtoa_r+0x1da>
 800573a:	2300      	movs	r3, #0
 800573c:	9308      	str	r3, [sp, #32]
 800573e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	dc55      	bgt.n	80057f0 <_dtoa_r+0x310>
 8005744:	2301      	movs	r3, #1
 8005746:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800574a:	461a      	mov	r2, r3
 800574c:	9209      	str	r2, [sp, #36]	; 0x24
 800574e:	e00c      	b.n	800576a <_dtoa_r+0x28a>
 8005750:	2301      	movs	r3, #1
 8005752:	e7f3      	b.n	800573c <_dtoa_r+0x25c>
 8005754:	2300      	movs	r3, #0
 8005756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005758:	9308      	str	r3, [sp, #32]
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	4413      	add	r3, r2
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	3301      	adds	r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	bfb8      	it	lt
 8005768:	2301      	movlt	r3, #1
 800576a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800576c:	2200      	movs	r2, #0
 800576e:	6042      	str	r2, [r0, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	f102 0614 	add.w	r6, r2, #20
 8005776:	429e      	cmp	r6, r3
 8005778:	6841      	ldr	r1, [r0, #4]
 800577a:	d93d      	bls.n	80057f8 <_dtoa_r+0x318>
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fcb7 	bl	80060f0 <_Balloc>
 8005782:	9001      	str	r0, [sp, #4]
 8005784:	2800      	cmp	r0, #0
 8005786:	d13b      	bne.n	8005800 <_dtoa_r+0x320>
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <_dtoa_r+0x2f0>)
 800578a:	4602      	mov	r2, r0
 800578c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005790:	e6c0      	b.n	8005514 <_dtoa_r+0x34>
 8005792:	2301      	movs	r3, #1
 8005794:	e7df      	b.n	8005756 <_dtoa_r+0x276>
 8005796:	bf00      	nop
 8005798:	636f4361 	.word	0x636f4361
 800579c:	3fd287a7 	.word	0x3fd287a7
 80057a0:	8b60c8b3 	.word	0x8b60c8b3
 80057a4:	3fc68a28 	.word	0x3fc68a28
 80057a8:	509f79fb 	.word	0x509f79fb
 80057ac:	3fd34413 	.word	0x3fd34413
 80057b0:	08008751 	.word	0x08008751
 80057b4:	08008768 	.word	0x08008768
 80057b8:	7ff00000 	.word	0x7ff00000
 80057bc:	0800874d 	.word	0x0800874d
 80057c0:	08008744 	.word	0x08008744
 80057c4:	08008721 	.word	0x08008721
 80057c8:	3ff80000 	.word	0x3ff80000
 80057cc:	08008858 	.word	0x08008858
 80057d0:	080087c3 	.word	0x080087c3
 80057d4:	2501      	movs	r5, #1
 80057d6:	2300      	movs	r3, #0
 80057d8:	9306      	str	r3, [sp, #24]
 80057da:	9508      	str	r5, [sp, #32]
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2312      	movs	r3, #18
 80057e8:	e7b0      	b.n	800574c <_dtoa_r+0x26c>
 80057ea:	2301      	movs	r3, #1
 80057ec:	9308      	str	r3, [sp, #32]
 80057ee:	e7f5      	b.n	80057dc <_dtoa_r+0x2fc>
 80057f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057f6:	e7b8      	b.n	800576a <_dtoa_r+0x28a>
 80057f8:	3101      	adds	r1, #1
 80057fa:	6041      	str	r1, [r0, #4]
 80057fc:	0052      	lsls	r2, r2, #1
 80057fe:	e7b8      	b.n	8005772 <_dtoa_r+0x292>
 8005800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005802:	9a01      	ldr	r2, [sp, #4]
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	2b0e      	cmp	r3, #14
 800580a:	f200 809d 	bhi.w	8005948 <_dtoa_r+0x468>
 800580e:	2d00      	cmp	r5, #0
 8005810:	f000 809a 	beq.w	8005948 <_dtoa_r+0x468>
 8005814:	9b00      	ldr	r3, [sp, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd32      	ble.n	8005880 <_dtoa_r+0x3a0>
 800581a:	4ab7      	ldr	r2, [pc, #732]	; (8005af8 <_dtoa_r+0x618>)
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005824:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	05d8      	lsls	r0, r3, #23
 800582c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005830:	d516      	bpl.n	8005860 <_dtoa_r+0x380>
 8005832:	4bb2      	ldr	r3, [pc, #712]	; (8005afc <_dtoa_r+0x61c>)
 8005834:	ec51 0b19 	vmov	r0, r1, d9
 8005838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800583c:	f7fb f80e 	bl	800085c <__aeabi_ddiv>
 8005840:	f007 070f 	and.w	r7, r7, #15
 8005844:	4682      	mov	sl, r0
 8005846:	468b      	mov	fp, r1
 8005848:	2503      	movs	r5, #3
 800584a:	4eac      	ldr	r6, [pc, #688]	; (8005afc <_dtoa_r+0x61c>)
 800584c:	b957      	cbnz	r7, 8005864 <_dtoa_r+0x384>
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	4650      	mov	r0, sl
 8005854:	4659      	mov	r1, fp
 8005856:	f7fb f801 	bl	800085c <__aeabi_ddiv>
 800585a:	4682      	mov	sl, r0
 800585c:	468b      	mov	fp, r1
 800585e:	e028      	b.n	80058b2 <_dtoa_r+0x3d2>
 8005860:	2502      	movs	r5, #2
 8005862:	e7f2      	b.n	800584a <_dtoa_r+0x36a>
 8005864:	07f9      	lsls	r1, r7, #31
 8005866:	d508      	bpl.n	800587a <_dtoa_r+0x39a>
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005870:	f7fa feca 	bl	8000608 <__aeabi_dmul>
 8005874:	3501      	adds	r5, #1
 8005876:	4680      	mov	r8, r0
 8005878:	4689      	mov	r9, r1
 800587a:	107f      	asrs	r7, r7, #1
 800587c:	3608      	adds	r6, #8
 800587e:	e7e5      	b.n	800584c <_dtoa_r+0x36c>
 8005880:	f000 809b 	beq.w	80059ba <_dtoa_r+0x4da>
 8005884:	9b00      	ldr	r3, [sp, #0]
 8005886:	4f9d      	ldr	r7, [pc, #628]	; (8005afc <_dtoa_r+0x61c>)
 8005888:	425e      	negs	r6, r3
 800588a:	4b9b      	ldr	r3, [pc, #620]	; (8005af8 <_dtoa_r+0x618>)
 800588c:	f006 020f 	and.w	r2, r6, #15
 8005890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	ec51 0b19 	vmov	r0, r1, d9
 800589c:	f7fa feb4 	bl	8000608 <__aeabi_dmul>
 80058a0:	1136      	asrs	r6, r6, #4
 80058a2:	4682      	mov	sl, r0
 80058a4:	468b      	mov	fp, r1
 80058a6:	2300      	movs	r3, #0
 80058a8:	2502      	movs	r5, #2
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	d17a      	bne.n	80059a4 <_dtoa_r+0x4c4>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1d3      	bne.n	800585a <_dtoa_r+0x37a>
 80058b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8082 	beq.w	80059be <_dtoa_r+0x4de>
 80058ba:	4b91      	ldr	r3, [pc, #580]	; (8005b00 <_dtoa_r+0x620>)
 80058bc:	2200      	movs	r2, #0
 80058be:	4650      	mov	r0, sl
 80058c0:	4659      	mov	r1, fp
 80058c2:	f7fb f913 	bl	8000aec <__aeabi_dcmplt>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d079      	beq.n	80059be <_dtoa_r+0x4de>
 80058ca:	9b03      	ldr	r3, [sp, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d076      	beq.n	80059be <_dtoa_r+0x4de>
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd36      	ble.n	8005944 <_dtoa_r+0x464>
 80058d6:	9b00      	ldr	r3, [sp, #0]
 80058d8:	4650      	mov	r0, sl
 80058da:	4659      	mov	r1, fp
 80058dc:	1e5f      	subs	r7, r3, #1
 80058de:	2200      	movs	r2, #0
 80058e0:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <_dtoa_r+0x624>)
 80058e2:	f7fa fe91 	bl	8000608 <__aeabi_dmul>
 80058e6:	9e02      	ldr	r6, [sp, #8]
 80058e8:	4682      	mov	sl, r0
 80058ea:	468b      	mov	fp, r1
 80058ec:	3501      	adds	r5, #1
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7fa fe20 	bl	8000534 <__aeabi_i2d>
 80058f4:	4652      	mov	r2, sl
 80058f6:	465b      	mov	r3, fp
 80058f8:	f7fa fe86 	bl	8000608 <__aeabi_dmul>
 80058fc:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <_dtoa_r+0x628>)
 80058fe:	2200      	movs	r2, #0
 8005900:	f7fa fccc 	bl	800029c <__adddf3>
 8005904:	46d0      	mov	r8, sl
 8005906:	46d9      	mov	r9, fp
 8005908:	4682      	mov	sl, r0
 800590a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800590e:	2e00      	cmp	r6, #0
 8005910:	d158      	bne.n	80059c4 <_dtoa_r+0x4e4>
 8005912:	4b7e      	ldr	r3, [pc, #504]	; (8005b0c <_dtoa_r+0x62c>)
 8005914:	2200      	movs	r2, #0
 8005916:	4640      	mov	r0, r8
 8005918:	4649      	mov	r1, r9
 800591a:	f7fa fcbd 	bl	8000298 <__aeabi_dsub>
 800591e:	4652      	mov	r2, sl
 8005920:	465b      	mov	r3, fp
 8005922:	4680      	mov	r8, r0
 8005924:	4689      	mov	r9, r1
 8005926:	f7fb f8ff 	bl	8000b28 <__aeabi_dcmpgt>
 800592a:	2800      	cmp	r0, #0
 800592c:	f040 8295 	bne.w	8005e5a <_dtoa_r+0x97a>
 8005930:	4652      	mov	r2, sl
 8005932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	f7fb f8d7 	bl	8000aec <__aeabi_dcmplt>
 800593e:	2800      	cmp	r0, #0
 8005940:	f040 8289 	bne.w	8005e56 <_dtoa_r+0x976>
 8005944:	ec5b ab19 	vmov	sl, fp, d9
 8005948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800594a:	2b00      	cmp	r3, #0
 800594c:	f2c0 8148 	blt.w	8005be0 <_dtoa_r+0x700>
 8005950:	9a00      	ldr	r2, [sp, #0]
 8005952:	2a0e      	cmp	r2, #14
 8005954:	f300 8144 	bgt.w	8005be0 <_dtoa_r+0x700>
 8005958:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <_dtoa_r+0x618>)
 800595a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800595e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	f280 80d5 	bge.w	8005b14 <_dtoa_r+0x634>
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f300 80d1 	bgt.w	8005b14 <_dtoa_r+0x634>
 8005972:	f040 826f 	bne.w	8005e54 <_dtoa_r+0x974>
 8005976:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <_dtoa_r+0x62c>)
 8005978:	2200      	movs	r2, #0
 800597a:	4640      	mov	r0, r8
 800597c:	4649      	mov	r1, r9
 800597e:	f7fa fe43 	bl	8000608 <__aeabi_dmul>
 8005982:	4652      	mov	r2, sl
 8005984:	465b      	mov	r3, fp
 8005986:	f7fb f8c5 	bl	8000b14 <__aeabi_dcmpge>
 800598a:	9e03      	ldr	r6, [sp, #12]
 800598c:	4637      	mov	r7, r6
 800598e:	2800      	cmp	r0, #0
 8005990:	f040 8245 	bne.w	8005e1e <_dtoa_r+0x93e>
 8005994:	9d01      	ldr	r5, [sp, #4]
 8005996:	2331      	movs	r3, #49	; 0x31
 8005998:	f805 3b01 	strb.w	r3, [r5], #1
 800599c:	9b00      	ldr	r3, [sp, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	e240      	b.n	8005e26 <_dtoa_r+0x946>
 80059a4:	07f2      	lsls	r2, r6, #31
 80059a6:	d505      	bpl.n	80059b4 <_dtoa_r+0x4d4>
 80059a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ac:	f7fa fe2c 	bl	8000608 <__aeabi_dmul>
 80059b0:	3501      	adds	r5, #1
 80059b2:	2301      	movs	r3, #1
 80059b4:	1076      	asrs	r6, r6, #1
 80059b6:	3708      	adds	r7, #8
 80059b8:	e777      	b.n	80058aa <_dtoa_r+0x3ca>
 80059ba:	2502      	movs	r5, #2
 80059bc:	e779      	b.n	80058b2 <_dtoa_r+0x3d2>
 80059be:	9f00      	ldr	r7, [sp, #0]
 80059c0:	9e03      	ldr	r6, [sp, #12]
 80059c2:	e794      	b.n	80058ee <_dtoa_r+0x40e>
 80059c4:	9901      	ldr	r1, [sp, #4]
 80059c6:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <_dtoa_r+0x618>)
 80059c8:	4431      	add	r1, r6
 80059ca:	910d      	str	r1, [sp, #52]	; 0x34
 80059cc:	9908      	ldr	r1, [sp, #32]
 80059ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059d6:	2900      	cmp	r1, #0
 80059d8:	d043      	beq.n	8005a62 <_dtoa_r+0x582>
 80059da:	494d      	ldr	r1, [pc, #308]	; (8005b10 <_dtoa_r+0x630>)
 80059dc:	2000      	movs	r0, #0
 80059de:	f7fa ff3d 	bl	800085c <__aeabi_ddiv>
 80059e2:	4652      	mov	r2, sl
 80059e4:	465b      	mov	r3, fp
 80059e6:	f7fa fc57 	bl	8000298 <__aeabi_dsub>
 80059ea:	9d01      	ldr	r5, [sp, #4]
 80059ec:	4682      	mov	sl, r0
 80059ee:	468b      	mov	fp, r1
 80059f0:	4649      	mov	r1, r9
 80059f2:	4640      	mov	r0, r8
 80059f4:	f7fb f8b8 	bl	8000b68 <__aeabi_d2iz>
 80059f8:	4606      	mov	r6, r0
 80059fa:	f7fa fd9b 	bl	8000534 <__aeabi_i2d>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4640      	mov	r0, r8
 8005a04:	4649      	mov	r1, r9
 8005a06:	f7fa fc47 	bl	8000298 <__aeabi_dsub>
 8005a0a:	3630      	adds	r6, #48	; 0x30
 8005a0c:	f805 6b01 	strb.w	r6, [r5], #1
 8005a10:	4652      	mov	r2, sl
 8005a12:	465b      	mov	r3, fp
 8005a14:	4680      	mov	r8, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	f7fb f868 	bl	8000aec <__aeabi_dcmplt>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d163      	bne.n	8005ae8 <_dtoa_r+0x608>
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	4936      	ldr	r1, [pc, #216]	; (8005b00 <_dtoa_r+0x620>)
 8005a26:	2000      	movs	r0, #0
 8005a28:	f7fa fc36 	bl	8000298 <__aeabi_dsub>
 8005a2c:	4652      	mov	r2, sl
 8005a2e:	465b      	mov	r3, fp
 8005a30:	f7fb f85c 	bl	8000aec <__aeabi_dcmplt>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f040 80b5 	bne.w	8005ba4 <_dtoa_r+0x6c4>
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3c:	429d      	cmp	r5, r3
 8005a3e:	d081      	beq.n	8005944 <_dtoa_r+0x464>
 8005a40:	4b30      	ldr	r3, [pc, #192]	; (8005b04 <_dtoa_r+0x624>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fa fdde 	bl	8000608 <__aeabi_dmul>
 8005a4c:	4b2d      	ldr	r3, [pc, #180]	; (8005b04 <_dtoa_r+0x624>)
 8005a4e:	4682      	mov	sl, r0
 8005a50:	468b      	mov	fp, r1
 8005a52:	4640      	mov	r0, r8
 8005a54:	4649      	mov	r1, r9
 8005a56:	2200      	movs	r2, #0
 8005a58:	f7fa fdd6 	bl	8000608 <__aeabi_dmul>
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4689      	mov	r9, r1
 8005a60:	e7c6      	b.n	80059f0 <_dtoa_r+0x510>
 8005a62:	4650      	mov	r0, sl
 8005a64:	4659      	mov	r1, fp
 8005a66:	f7fa fdcf 	bl	8000608 <__aeabi_dmul>
 8005a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6c:	9d01      	ldr	r5, [sp, #4]
 8005a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a70:	4682      	mov	sl, r0
 8005a72:	468b      	mov	fp, r1
 8005a74:	4649      	mov	r1, r9
 8005a76:	4640      	mov	r0, r8
 8005a78:	f7fb f876 	bl	8000b68 <__aeabi_d2iz>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	f7fa fd59 	bl	8000534 <__aeabi_i2d>
 8005a82:	3630      	adds	r6, #48	; 0x30
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fa fc04 	bl	8000298 <__aeabi_dsub>
 8005a90:	f805 6b01 	strb.w	r6, [r5], #1
 8005a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a96:	429d      	cmp	r5, r3
 8005a98:	4680      	mov	r8, r0
 8005a9a:	4689      	mov	r9, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	d124      	bne.n	8005aec <_dtoa_r+0x60c>
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <_dtoa_r+0x630>)
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	f7fa fbf8 	bl	800029c <__adddf3>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fb f838 	bl	8000b28 <__aeabi_dcmpgt>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d173      	bne.n	8005ba4 <_dtoa_r+0x6c4>
 8005abc:	4652      	mov	r2, sl
 8005abe:	465b      	mov	r3, fp
 8005ac0:	4913      	ldr	r1, [pc, #76]	; (8005b10 <_dtoa_r+0x630>)
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f7fa fbe8 	bl	8000298 <__aeabi_dsub>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4640      	mov	r0, r8
 8005ace:	4649      	mov	r1, r9
 8005ad0:	f7fb f80c 	bl	8000aec <__aeabi_dcmplt>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f43f af35 	beq.w	8005944 <_dtoa_r+0x464>
 8005ada:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005adc:	1e6b      	subs	r3, r5, #1
 8005ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ae0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ae4:	2b30      	cmp	r3, #48	; 0x30
 8005ae6:	d0f8      	beq.n	8005ada <_dtoa_r+0x5fa>
 8005ae8:	9700      	str	r7, [sp, #0]
 8005aea:	e049      	b.n	8005b80 <_dtoa_r+0x6a0>
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <_dtoa_r+0x624>)
 8005aee:	f7fa fd8b 	bl	8000608 <__aeabi_dmul>
 8005af2:	4680      	mov	r8, r0
 8005af4:	4689      	mov	r9, r1
 8005af6:	e7bd      	b.n	8005a74 <_dtoa_r+0x594>
 8005af8:	08008858 	.word	0x08008858
 8005afc:	08008830 	.word	0x08008830
 8005b00:	3ff00000 	.word	0x3ff00000
 8005b04:	40240000 	.word	0x40240000
 8005b08:	401c0000 	.word	0x401c0000
 8005b0c:	40140000 	.word	0x40140000
 8005b10:	3fe00000 	.word	0x3fe00000
 8005b14:	9d01      	ldr	r5, [sp, #4]
 8005b16:	4656      	mov	r6, sl
 8005b18:	465f      	mov	r7, fp
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fe9b 	bl	800085c <__aeabi_ddiv>
 8005b26:	f7fb f81f 	bl	8000b68 <__aeabi_d2iz>
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	f7fa fd02 	bl	8000534 <__aeabi_i2d>
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	f7fa fd68 	bl	8000608 <__aeabi_dmul>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005b44:	f7fa fba8 	bl	8000298 <__aeabi_dsub>
 8005b48:	f805 6b01 	strb.w	r6, [r5], #1
 8005b4c:	9e01      	ldr	r6, [sp, #4]
 8005b4e:	9f03      	ldr	r7, [sp, #12]
 8005b50:	1bae      	subs	r6, r5, r6
 8005b52:	42b7      	cmp	r7, r6
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	d135      	bne.n	8005bc6 <_dtoa_r+0x6e6>
 8005b5a:	f7fa fb9f 	bl	800029c <__adddf3>
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	4606      	mov	r6, r0
 8005b64:	460f      	mov	r7, r1
 8005b66:	f7fa ffdf 	bl	8000b28 <__aeabi_dcmpgt>
 8005b6a:	b9d0      	cbnz	r0, 8005ba2 <_dtoa_r+0x6c2>
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	464b      	mov	r3, r9
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b78:	b110      	cbz	r0, 8005b80 <_dtoa_r+0x6a0>
 8005b7a:	f01a 0f01 	tst.w	sl, #1
 8005b7e:	d110      	bne.n	8005ba2 <_dtoa_r+0x6c2>
 8005b80:	4620      	mov	r0, r4
 8005b82:	ee18 1a10 	vmov	r1, s16
 8005b86:	f000 faf3 	bl	8006170 <_Bfree>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9800      	ldr	r0, [sp, #0]
 8005b8e:	702b      	strb	r3, [r5, #0]
 8005b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b92:	3001      	adds	r0, #1
 8005b94:	6018      	str	r0, [r3, #0]
 8005b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f43f acf1 	beq.w	8005580 <_dtoa_r+0xa0>
 8005b9e:	601d      	str	r5, [r3, #0]
 8005ba0:	e4ee      	b.n	8005580 <_dtoa_r+0xa0>
 8005ba2:	9f00      	ldr	r7, [sp, #0]
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	461d      	mov	r5, r3
 8005ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bac:	2a39      	cmp	r2, #57	; 0x39
 8005bae:	d106      	bne.n	8005bbe <_dtoa_r+0x6de>
 8005bb0:	9a01      	ldr	r2, [sp, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d1f7      	bne.n	8005ba6 <_dtoa_r+0x6c6>
 8005bb6:	9901      	ldr	r1, [sp, #4]
 8005bb8:	2230      	movs	r2, #48	; 0x30
 8005bba:	3701      	adds	r7, #1
 8005bbc:	700a      	strb	r2, [r1, #0]
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	3201      	adds	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e790      	b.n	8005ae8 <_dtoa_r+0x608>
 8005bc6:	4ba6      	ldr	r3, [pc, #664]	; (8005e60 <_dtoa_r+0x980>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f7fa fd1d 	bl	8000608 <__aeabi_dmul>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	f7fa ff7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d09d      	beq.n	8005b1a <_dtoa_r+0x63a>
 8005bde:	e7cf      	b.n	8005b80 <_dtoa_r+0x6a0>
 8005be0:	9a08      	ldr	r2, [sp, #32]
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	f000 80d7 	beq.w	8005d96 <_dtoa_r+0x8b6>
 8005be8:	9a06      	ldr	r2, [sp, #24]
 8005bea:	2a01      	cmp	r2, #1
 8005bec:	f300 80ba 	bgt.w	8005d64 <_dtoa_r+0x884>
 8005bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	f000 80b2 	beq.w	8005d5c <_dtoa_r+0x87c>
 8005bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bfc:	9e07      	ldr	r6, [sp, #28]
 8005bfe:	9d04      	ldr	r5, [sp, #16]
 8005c00:	9a04      	ldr	r2, [sp, #16]
 8005c02:	441a      	add	r2, r3
 8005c04:	9204      	str	r2, [sp, #16]
 8005c06:	9a05      	ldr	r2, [sp, #20]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	441a      	add	r2, r3
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	9205      	str	r2, [sp, #20]
 8005c10:	f000 fb66 	bl	80062e0 <__i2b>
 8005c14:	4607      	mov	r7, r0
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	dd0c      	ble.n	8005c34 <_dtoa_r+0x754>
 8005c1a:	9b05      	ldr	r3, [sp, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	dd09      	ble.n	8005c34 <_dtoa_r+0x754>
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	9a04      	ldr	r2, [sp, #16]
 8005c24:	bfa8      	it	ge
 8005c26:	462b      	movge	r3, r5
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	9204      	str	r2, [sp, #16]
 8005c2c:	9a05      	ldr	r2, [sp, #20]
 8005c2e:	1aed      	subs	r5, r5, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	b31b      	cbz	r3, 8005c80 <_dtoa_r+0x7a0>
 8005c38:	9b08      	ldr	r3, [sp, #32]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80af 	beq.w	8005d9e <_dtoa_r+0x8be>
 8005c40:	2e00      	cmp	r6, #0
 8005c42:	dd13      	ble.n	8005c6c <_dtoa_r+0x78c>
 8005c44:	4639      	mov	r1, r7
 8005c46:	4632      	mov	r2, r6
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fc09 	bl	8006460 <__pow5mult>
 8005c4e:	ee18 2a10 	vmov	r2, s16
 8005c52:	4601      	mov	r1, r0
 8005c54:	4607      	mov	r7, r0
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 fb58 	bl	800630c <__multiply>
 8005c5c:	ee18 1a10 	vmov	r1, s16
 8005c60:	4680      	mov	r8, r0
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fa84 	bl	8006170 <_Bfree>
 8005c68:	ee08 8a10 	vmov	s16, r8
 8005c6c:	9b07      	ldr	r3, [sp, #28]
 8005c6e:	1b9a      	subs	r2, r3, r6
 8005c70:	d006      	beq.n	8005c80 <_dtoa_r+0x7a0>
 8005c72:	ee18 1a10 	vmov	r1, s16
 8005c76:	4620      	mov	r0, r4
 8005c78:	f000 fbf2 	bl	8006460 <__pow5mult>
 8005c7c:	ee08 0a10 	vmov	s16, r0
 8005c80:	2101      	movs	r1, #1
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fb2c 	bl	80062e0 <__i2b>
 8005c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	f340 8088 	ble.w	8005da2 <_dtoa_r+0x8c2>
 8005c92:	461a      	mov	r2, r3
 8005c94:	4601      	mov	r1, r0
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fbe2 	bl	8006460 <__pow5mult>
 8005c9c:	9b06      	ldr	r3, [sp, #24]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	f340 8081 	ble.w	8005da8 <_dtoa_r+0x8c8>
 8005ca6:	f04f 0800 	mov.w	r8, #0
 8005caa:	6933      	ldr	r3, [r6, #16]
 8005cac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cb0:	6918      	ldr	r0, [r3, #16]
 8005cb2:	f000 fac5 	bl	8006240 <__hi0bits>
 8005cb6:	f1c0 0020 	rsb	r0, r0, #32
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	4418      	add	r0, r3
 8005cbe:	f010 001f 	ands.w	r0, r0, #31
 8005cc2:	f000 8092 	beq.w	8005dea <_dtoa_r+0x90a>
 8005cc6:	f1c0 0320 	rsb	r3, r0, #32
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	f340 808a 	ble.w	8005de4 <_dtoa_r+0x904>
 8005cd0:	f1c0 001c 	rsb	r0, r0, #28
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	4403      	add	r3, r0
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	9b05      	ldr	r3, [sp, #20]
 8005cdc:	4403      	add	r3, r0
 8005cde:	4405      	add	r5, r0
 8005ce0:	9305      	str	r3, [sp, #20]
 8005ce2:	9b04      	ldr	r3, [sp, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd07      	ble.n	8005cf8 <_dtoa_r+0x818>
 8005ce8:	ee18 1a10 	vmov	r1, s16
 8005cec:	461a      	mov	r2, r3
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fc10 	bl	8006514 <__lshift>
 8005cf4:	ee08 0a10 	vmov	s16, r0
 8005cf8:	9b05      	ldr	r3, [sp, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd05      	ble.n	8005d0a <_dtoa_r+0x82a>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	461a      	mov	r2, r3
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fc06 	bl	8006514 <__lshift>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d06e      	beq.n	8005dee <_dtoa_r+0x90e>
 8005d10:	ee18 0a10 	vmov	r0, s16
 8005d14:	4631      	mov	r1, r6
 8005d16:	f000 fc6d 	bl	80065f4 <__mcmp>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	da67      	bge.n	8005dee <_dtoa_r+0x90e>
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	ee18 1a10 	vmov	r1, s16
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	220a      	movs	r2, #10
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fa41 	bl	80061b4 <__multadd>
 8005d32:	9b08      	ldr	r3, [sp, #32]
 8005d34:	ee08 0a10 	vmov	s16, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 81b1 	beq.w	80060a0 <_dtoa_r+0xbc0>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4639      	mov	r1, r7
 8005d42:	220a      	movs	r2, #10
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fa35 	bl	80061b4 <__multadd>
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	4607      	mov	r7, r0
 8005d50:	f300 808e 	bgt.w	8005e70 <_dtoa_r+0x990>
 8005d54:	9b06      	ldr	r3, [sp, #24]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	dc51      	bgt.n	8005dfe <_dtoa_r+0x91e>
 8005d5a:	e089      	b.n	8005e70 <_dtoa_r+0x990>
 8005d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d62:	e74b      	b.n	8005bfc <_dtoa_r+0x71c>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	1e5e      	subs	r6, r3, #1
 8005d68:	9b07      	ldr	r3, [sp, #28]
 8005d6a:	42b3      	cmp	r3, r6
 8005d6c:	bfbf      	itttt	lt
 8005d6e:	9b07      	ldrlt	r3, [sp, #28]
 8005d70:	9607      	strlt	r6, [sp, #28]
 8005d72:	1af2      	sublt	r2, r6, r3
 8005d74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d76:	bfb6      	itet	lt
 8005d78:	189b      	addlt	r3, r3, r2
 8005d7a:	1b9e      	subge	r6, r3, r6
 8005d7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	bfb8      	it	lt
 8005d82:	2600      	movlt	r6, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfb7      	itett	lt
 8005d88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d90:	1a9d      	sublt	r5, r3, r2
 8005d92:	2300      	movlt	r3, #0
 8005d94:	e734      	b.n	8005c00 <_dtoa_r+0x720>
 8005d96:	9e07      	ldr	r6, [sp, #28]
 8005d98:	9d04      	ldr	r5, [sp, #16]
 8005d9a:	9f08      	ldr	r7, [sp, #32]
 8005d9c:	e73b      	b.n	8005c16 <_dtoa_r+0x736>
 8005d9e:	9a07      	ldr	r2, [sp, #28]
 8005da0:	e767      	b.n	8005c72 <_dtoa_r+0x792>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	dc18      	bgt.n	8005dda <_dtoa_r+0x8fa>
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	d115      	bne.n	8005dda <_dtoa_r+0x8fa>
 8005dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005db2:	b993      	cbnz	r3, 8005dda <_dtoa_r+0x8fa>
 8005db4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005db8:	0d1b      	lsrs	r3, r3, #20
 8005dba:	051b      	lsls	r3, r3, #20
 8005dbc:	b183      	cbz	r3, 8005de0 <_dtoa_r+0x900>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	9b05      	ldr	r3, [sp, #20]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	f04f 0801 	mov.w	r8, #1
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af6a 	bne.w	8005caa <_dtoa_r+0x7ca>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e76f      	b.n	8005cba <_dtoa_r+0x7da>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	e7f6      	b.n	8005dce <_dtoa_r+0x8ee>
 8005de0:	4698      	mov	r8, r3
 8005de2:	e7f4      	b.n	8005dce <_dtoa_r+0x8ee>
 8005de4:	f43f af7d 	beq.w	8005ce2 <_dtoa_r+0x802>
 8005de8:	4618      	mov	r0, r3
 8005dea:	301c      	adds	r0, #28
 8005dec:	e772      	b.n	8005cd4 <_dtoa_r+0x7f4>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc37      	bgt.n	8005e64 <_dtoa_r+0x984>
 8005df4:	9b06      	ldr	r3, [sp, #24]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	dd34      	ble.n	8005e64 <_dtoa_r+0x984>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	9b02      	ldr	r3, [sp, #8]
 8005e00:	b96b      	cbnz	r3, 8005e1e <_dtoa_r+0x93e>
 8005e02:	4631      	mov	r1, r6
 8005e04:	2205      	movs	r2, #5
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f9d4 	bl	80061b4 <__multadd>
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	4606      	mov	r6, r0
 8005e10:	ee18 0a10 	vmov	r0, s16
 8005e14:	f000 fbee 	bl	80065f4 <__mcmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f73f adbb 	bgt.w	8005994 <_dtoa_r+0x4b4>
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	9d01      	ldr	r5, [sp, #4]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 f99f 	bl	8006170 <_Bfree>
 8005e32:	2f00      	cmp	r7, #0
 8005e34:	f43f aea4 	beq.w	8005b80 <_dtoa_r+0x6a0>
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	d005      	beq.n	8005e4a <_dtoa_r+0x96a>
 8005e3e:	45b8      	cmp	r8, r7
 8005e40:	d003      	beq.n	8005e4a <_dtoa_r+0x96a>
 8005e42:	4641      	mov	r1, r8
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 f993 	bl	8006170 <_Bfree>
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f98f 	bl	8006170 <_Bfree>
 8005e52:	e695      	b.n	8005b80 <_dtoa_r+0x6a0>
 8005e54:	2600      	movs	r6, #0
 8005e56:	4637      	mov	r7, r6
 8005e58:	e7e1      	b.n	8005e1e <_dtoa_r+0x93e>
 8005e5a:	9700      	str	r7, [sp, #0]
 8005e5c:	4637      	mov	r7, r6
 8005e5e:	e599      	b.n	8005994 <_dtoa_r+0x4b4>
 8005e60:	40240000 	.word	0x40240000
 8005e64:	9b08      	ldr	r3, [sp, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ca 	beq.w	8006000 <_dtoa_r+0xb20>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	9302      	str	r3, [sp, #8]
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	dd05      	ble.n	8005e80 <_dtoa_r+0x9a0>
 8005e74:	4639      	mov	r1, r7
 8005e76:	462a      	mov	r2, r5
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fb4b 	bl	8006514 <__lshift>
 8005e7e:	4607      	mov	r7, r0
 8005e80:	f1b8 0f00 	cmp.w	r8, #0
 8005e84:	d05b      	beq.n	8005f3e <_dtoa_r+0xa5e>
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 f931 	bl	80060f0 <_Balloc>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	b928      	cbnz	r0, 8005e9e <_dtoa_r+0x9be>
 8005e92:	4b87      	ldr	r3, [pc, #540]	; (80060b0 <_dtoa_r+0xbd0>)
 8005e94:	4602      	mov	r2, r0
 8005e96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e9a:	f7ff bb3b 	b.w	8005514 <_dtoa_r+0x34>
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	3202      	adds	r2, #2
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	f107 010c 	add.w	r1, r7, #12
 8005ea8:	300c      	adds	r0, #12
 8005eaa:	f000 f913 	bl	80060d4 <memcpy>
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fb2e 	bl	8006514 <__lshift>
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	f103 0901 	add.w	r9, r3, #1
 8005ebe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	f00a 0301 	and.w	r3, sl, #1
 8005eca:	46b8      	mov	r8, r7
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	4607      	mov	r7, r0
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	ee18 0a10 	vmov	r0, s16
 8005ed6:	f7ff fa75 	bl	80053c4 <quorem>
 8005eda:	4641      	mov	r1, r8
 8005edc:	9002      	str	r0, [sp, #8]
 8005ede:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ee2:	ee18 0a10 	vmov	r0, s16
 8005ee6:	f000 fb85 	bl	80065f4 <__mcmp>
 8005eea:	463a      	mov	r2, r7
 8005eec:	9003      	str	r0, [sp, #12]
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 fb9b 	bl	800662c <__mdiff>
 8005ef6:	68c2      	ldr	r2, [r0, #12]
 8005ef8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005efc:	4605      	mov	r5, r0
 8005efe:	bb02      	cbnz	r2, 8005f42 <_dtoa_r+0xa62>
 8005f00:	4601      	mov	r1, r0
 8005f02:	ee18 0a10 	vmov	r0, s16
 8005f06:	f000 fb75 	bl	80065f4 <__mcmp>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4620      	mov	r0, r4
 8005f10:	9207      	str	r2, [sp, #28]
 8005f12:	f000 f92d 	bl	8006170 <_Bfree>
 8005f16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005f1a:	ea43 0102 	orr.w	r1, r3, r2
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	464d      	mov	r5, r9
 8005f24:	d10f      	bne.n	8005f46 <_dtoa_r+0xa66>
 8005f26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f2a:	d02a      	beq.n	8005f82 <_dtoa_r+0xaa2>
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dd02      	ble.n	8005f38 <_dtoa_r+0xa58>
 8005f32:	9b02      	ldr	r3, [sp, #8]
 8005f34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005f38:	f88b a000 	strb.w	sl, [fp]
 8005f3c:	e775      	b.n	8005e2a <_dtoa_r+0x94a>
 8005f3e:	4638      	mov	r0, r7
 8005f40:	e7ba      	b.n	8005eb8 <_dtoa_r+0x9d8>
 8005f42:	2201      	movs	r2, #1
 8005f44:	e7e2      	b.n	8005f0c <_dtoa_r+0xa2c>
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db04      	blt.n	8005f56 <_dtoa_r+0xa76>
 8005f4c:	9906      	ldr	r1, [sp, #24]
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	9904      	ldr	r1, [sp, #16]
 8005f52:	430b      	orrs	r3, r1
 8005f54:	d122      	bne.n	8005f9c <_dtoa_r+0xabc>
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	ddee      	ble.n	8005f38 <_dtoa_r+0xa58>
 8005f5a:	ee18 1a10 	vmov	r1, s16
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fad7 	bl	8006514 <__lshift>
 8005f66:	4631      	mov	r1, r6
 8005f68:	ee08 0a10 	vmov	s16, r0
 8005f6c:	f000 fb42 	bl	80065f4 <__mcmp>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	dc03      	bgt.n	8005f7c <_dtoa_r+0xa9c>
 8005f74:	d1e0      	bne.n	8005f38 <_dtoa_r+0xa58>
 8005f76:	f01a 0f01 	tst.w	sl, #1
 8005f7a:	d0dd      	beq.n	8005f38 <_dtoa_r+0xa58>
 8005f7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f80:	d1d7      	bne.n	8005f32 <_dtoa_r+0xa52>
 8005f82:	2339      	movs	r3, #57	; 0x39
 8005f84:	f88b 3000 	strb.w	r3, [fp]
 8005f88:	462b      	mov	r3, r5
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f92:	2a39      	cmp	r2, #57	; 0x39
 8005f94:	d071      	beq.n	800607a <_dtoa_r+0xb9a>
 8005f96:	3201      	adds	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e746      	b.n	8005e2a <_dtoa_r+0x94a>
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	dd07      	ble.n	8005fb0 <_dtoa_r+0xad0>
 8005fa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005fa4:	d0ed      	beq.n	8005f82 <_dtoa_r+0xaa2>
 8005fa6:	f10a 0301 	add.w	r3, sl, #1
 8005faa:	f88b 3000 	strb.w	r3, [fp]
 8005fae:	e73c      	b.n	8005e2a <_dtoa_r+0x94a>
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005fb6:	4599      	cmp	r9, r3
 8005fb8:	d047      	beq.n	800604a <_dtoa_r+0xb6a>
 8005fba:	ee18 1a10 	vmov	r1, s16
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	220a      	movs	r2, #10
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f8f6 	bl	80061b4 <__multadd>
 8005fc8:	45b8      	cmp	r8, r7
 8005fca:	ee08 0a10 	vmov	s16, r0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	f04f 020a 	mov.w	r2, #10
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	4620      	mov	r0, r4
 8005fda:	d106      	bne.n	8005fea <_dtoa_r+0xb0a>
 8005fdc:	f000 f8ea 	bl	80061b4 <__multadd>
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	f109 0901 	add.w	r9, r9, #1
 8005fe8:	e772      	b.n	8005ed0 <_dtoa_r+0x9f0>
 8005fea:	f000 f8e3 	bl	80061b4 <__multadd>
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 f8dc 	bl	80061b4 <__multadd>
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	e7f1      	b.n	8005fe4 <_dtoa_r+0xb04>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	9302      	str	r3, [sp, #8]
 8006004:	9d01      	ldr	r5, [sp, #4]
 8006006:	ee18 0a10 	vmov	r0, s16
 800600a:	4631      	mov	r1, r6
 800600c:	f7ff f9da 	bl	80053c4 <quorem>
 8006010:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	f805 ab01 	strb.w	sl, [r5], #1
 800601a:	1aea      	subs	r2, r5, r3
 800601c:	9b02      	ldr	r3, [sp, #8]
 800601e:	4293      	cmp	r3, r2
 8006020:	dd09      	ble.n	8006036 <_dtoa_r+0xb56>
 8006022:	ee18 1a10 	vmov	r1, s16
 8006026:	2300      	movs	r3, #0
 8006028:	220a      	movs	r2, #10
 800602a:	4620      	mov	r0, r4
 800602c:	f000 f8c2 	bl	80061b4 <__multadd>
 8006030:	ee08 0a10 	vmov	s16, r0
 8006034:	e7e7      	b.n	8006006 <_dtoa_r+0xb26>
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	bfc8      	it	gt
 800603c:	461d      	movgt	r5, r3
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	bfd8      	it	le
 8006042:	2501      	movle	r5, #1
 8006044:	441d      	add	r5, r3
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	ee18 1a10 	vmov	r1, s16
 800604e:	2201      	movs	r2, #1
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fa5f 	bl	8006514 <__lshift>
 8006056:	4631      	mov	r1, r6
 8006058:	ee08 0a10 	vmov	s16, r0
 800605c:	f000 faca 	bl	80065f4 <__mcmp>
 8006060:	2800      	cmp	r0, #0
 8006062:	dc91      	bgt.n	8005f88 <_dtoa_r+0xaa8>
 8006064:	d102      	bne.n	800606c <_dtoa_r+0xb8c>
 8006066:	f01a 0f01 	tst.w	sl, #1
 800606a:	d18d      	bne.n	8005f88 <_dtoa_r+0xaa8>
 800606c:	462b      	mov	r3, r5
 800606e:	461d      	mov	r5, r3
 8006070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006074:	2a30      	cmp	r2, #48	; 0x30
 8006076:	d0fa      	beq.n	800606e <_dtoa_r+0xb8e>
 8006078:	e6d7      	b.n	8005e2a <_dtoa_r+0x94a>
 800607a:	9a01      	ldr	r2, [sp, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d184      	bne.n	8005f8a <_dtoa_r+0xaaa>
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2331      	movs	r3, #49	; 0x31
 8006088:	7013      	strb	r3, [r2, #0]
 800608a:	e6ce      	b.n	8005e2a <_dtoa_r+0x94a>
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <_dtoa_r+0xbd4>)
 800608e:	f7ff ba95 	b.w	80055bc <_dtoa_r+0xdc>
 8006092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006094:	2b00      	cmp	r3, #0
 8006096:	f47f aa6e 	bne.w	8005576 <_dtoa_r+0x96>
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <_dtoa_r+0xbd8>)
 800609c:	f7ff ba8e 	b.w	80055bc <_dtoa_r+0xdc>
 80060a0:	9b02      	ldr	r3, [sp, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dcae      	bgt.n	8006004 <_dtoa_r+0xb24>
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	f73f aea8 	bgt.w	8005dfe <_dtoa_r+0x91e>
 80060ae:	e7a9      	b.n	8006004 <_dtoa_r+0xb24>
 80060b0:	080087c3 	.word	0x080087c3
 80060b4:	08008720 	.word	0x08008720
 80060b8:	08008744 	.word	0x08008744

080060bc <_localeconv_r>:
 80060bc:	4800      	ldr	r0, [pc, #0]	; (80060c0 <_localeconv_r+0x4>)
 80060be:	4770      	bx	lr
 80060c0:	20000160 	.word	0x20000160

080060c4 <malloc>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <malloc+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f000 bc17 	b.w	80068fc <_malloc_r>
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <memcpy>:
 80060d4:	440a      	add	r2, r1
 80060d6:	4291      	cmp	r1, r2
 80060d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	4770      	bx	lr
 80060e0:	b510      	push	{r4, lr}
 80060e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ea:	4291      	cmp	r1, r2
 80060ec:	d1f9      	bne.n	80060e2 <memcpy+0xe>
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <_Balloc>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	b976      	cbnz	r6, 8006118 <_Balloc+0x28>
 80060fa:	2010      	movs	r0, #16
 80060fc:	f7ff ffe2 	bl	80060c4 <malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	6260      	str	r0, [r4, #36]	; 0x24
 8006104:	b920      	cbnz	r0, 8006110 <_Balloc+0x20>
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <_Balloc+0x78>)
 8006108:	4818      	ldr	r0, [pc, #96]	; (800616c <_Balloc+0x7c>)
 800610a:	2166      	movs	r1, #102	; 0x66
 800610c:	f000 fdd6 	bl	8006cbc <__assert_func>
 8006110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006114:	6006      	str	r6, [r0, #0]
 8006116:	60c6      	str	r6, [r0, #12]
 8006118:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800611a:	68f3      	ldr	r3, [r6, #12]
 800611c:	b183      	cbz	r3, 8006140 <_Balloc+0x50>
 800611e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006126:	b9b8      	cbnz	r0, 8006158 <_Balloc+0x68>
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f605 	lsl.w	r6, r1, r5
 800612e:	1d72      	adds	r2, r6, #5
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	4620      	mov	r0, r4
 8006134:	f000 fb60 	bl	80067f8 <_calloc_r>
 8006138:	b160      	cbz	r0, 8006154 <_Balloc+0x64>
 800613a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800613e:	e00e      	b.n	800615e <_Balloc+0x6e>
 8006140:	2221      	movs	r2, #33	; 0x21
 8006142:	2104      	movs	r1, #4
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fb57 	bl	80067f8 <_calloc_r>
 800614a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614c:	60f0      	str	r0, [r6, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e4      	bne.n	800611e <_Balloc+0x2e>
 8006154:	2000      	movs	r0, #0
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	6802      	ldr	r2, [r0, #0]
 800615a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800615e:	2300      	movs	r3, #0
 8006160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006164:	e7f7      	b.n	8006156 <_Balloc+0x66>
 8006166:	bf00      	nop
 8006168:	08008751 	.word	0x08008751
 800616c:	080087d4 	.word	0x080087d4

08006170 <_Bfree>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Bfree+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7ff ffa2 	bl	80060c4 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	6268      	str	r0, [r5, #36]	; 0x24
 8006184:	b920      	cbnz	r0, 8006190 <_Bfree+0x20>
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <_Bfree+0x3c>)
 8006188:	4809      	ldr	r0, [pc, #36]	; (80061b0 <_Bfree+0x40>)
 800618a:	218a      	movs	r1, #138	; 0x8a
 800618c:	f000 fd96 	bl	8006cbc <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	b13c      	cbz	r4, 80061aa <_Bfree+0x3a>
 800619a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a4:	6021      	str	r1, [r4, #0]
 80061a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	08008751 	.word	0x08008751
 80061b0:	080087d4 	.word	0x080087d4

080061b4 <__multadd>:
 80061b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	690d      	ldr	r5, [r1, #16]
 80061ba:	4607      	mov	r7, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	461e      	mov	r6, r3
 80061c0:	f101 0c14 	add.w	ip, r1, #20
 80061c4:	2000      	movs	r0, #0
 80061c6:	f8dc 3000 	ldr.w	r3, [ip]
 80061ca:	b299      	uxth	r1, r3
 80061cc:	fb02 6101 	mla	r1, r2, r1, r6
 80061d0:	0c1e      	lsrs	r6, r3, #16
 80061d2:	0c0b      	lsrs	r3, r1, #16
 80061d4:	fb02 3306 	mla	r3, r2, r6, r3
 80061d8:	b289      	uxth	r1, r1
 80061da:	3001      	adds	r0, #1
 80061dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e0:	4285      	cmp	r5, r0
 80061e2:	f84c 1b04 	str.w	r1, [ip], #4
 80061e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ea:	dcec      	bgt.n	80061c6 <__multadd+0x12>
 80061ec:	b30e      	cbz	r6, 8006232 <__multadd+0x7e>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dc19      	bgt.n	8006228 <__multadd+0x74>
 80061f4:	6861      	ldr	r1, [r4, #4]
 80061f6:	4638      	mov	r0, r7
 80061f8:	3101      	adds	r1, #1
 80061fa:	f7ff ff79 	bl	80060f0 <_Balloc>
 80061fe:	4680      	mov	r8, r0
 8006200:	b928      	cbnz	r0, 800620e <__multadd+0x5a>
 8006202:	4602      	mov	r2, r0
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <__multadd+0x84>)
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <__multadd+0x88>)
 8006208:	21b5      	movs	r1, #181	; 0xb5
 800620a:	f000 fd57 	bl	8006cbc <__assert_func>
 800620e:	6922      	ldr	r2, [r4, #16]
 8006210:	3202      	adds	r2, #2
 8006212:	f104 010c 	add.w	r1, r4, #12
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	300c      	adds	r0, #12
 800621a:	f7ff ff5b 	bl	80060d4 <memcpy>
 800621e:	4621      	mov	r1, r4
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff ffa5 	bl	8006170 <_Bfree>
 8006226:	4644      	mov	r4, r8
 8006228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800622c:	3501      	adds	r5, #1
 800622e:	615e      	str	r6, [r3, #20]
 8006230:	6125      	str	r5, [r4, #16]
 8006232:	4620      	mov	r0, r4
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006238:	080087c3 	.word	0x080087c3
 800623c:	080087d4 	.word	0x080087d4

08006240 <__hi0bits>:
 8006240:	0c03      	lsrs	r3, r0, #16
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	b9d3      	cbnz	r3, 800627c <__hi0bits+0x3c>
 8006246:	0400      	lsls	r0, r0, #16
 8006248:	2310      	movs	r3, #16
 800624a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800624e:	bf04      	itt	eq
 8006250:	0200      	lsleq	r0, r0, #8
 8006252:	3308      	addeq	r3, #8
 8006254:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006258:	bf04      	itt	eq
 800625a:	0100      	lsleq	r0, r0, #4
 800625c:	3304      	addeq	r3, #4
 800625e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006262:	bf04      	itt	eq
 8006264:	0080      	lsleq	r0, r0, #2
 8006266:	3302      	addeq	r3, #2
 8006268:	2800      	cmp	r0, #0
 800626a:	db05      	blt.n	8006278 <__hi0bits+0x38>
 800626c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006270:	f103 0301 	add.w	r3, r3, #1
 8006274:	bf08      	it	eq
 8006276:	2320      	moveq	r3, #32
 8006278:	4618      	mov	r0, r3
 800627a:	4770      	bx	lr
 800627c:	2300      	movs	r3, #0
 800627e:	e7e4      	b.n	800624a <__hi0bits+0xa>

08006280 <__lo0bits>:
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	f013 0207 	ands.w	r2, r3, #7
 8006286:	4601      	mov	r1, r0
 8006288:	d00b      	beq.n	80062a2 <__lo0bits+0x22>
 800628a:	07da      	lsls	r2, r3, #31
 800628c:	d423      	bmi.n	80062d6 <__lo0bits+0x56>
 800628e:	0798      	lsls	r0, r3, #30
 8006290:	bf49      	itett	mi
 8006292:	085b      	lsrmi	r3, r3, #1
 8006294:	089b      	lsrpl	r3, r3, #2
 8006296:	2001      	movmi	r0, #1
 8006298:	600b      	strmi	r3, [r1, #0]
 800629a:	bf5c      	itt	pl
 800629c:	600b      	strpl	r3, [r1, #0]
 800629e:	2002      	movpl	r0, #2
 80062a0:	4770      	bx	lr
 80062a2:	b298      	uxth	r0, r3
 80062a4:	b9a8      	cbnz	r0, 80062d2 <__lo0bits+0x52>
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	2010      	movs	r0, #16
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	b90a      	cbnz	r2, 80062b2 <__lo0bits+0x32>
 80062ae:	3008      	adds	r0, #8
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	071a      	lsls	r2, r3, #28
 80062b4:	bf04      	itt	eq
 80062b6:	091b      	lsreq	r3, r3, #4
 80062b8:	3004      	addeq	r0, #4
 80062ba:	079a      	lsls	r2, r3, #30
 80062bc:	bf04      	itt	eq
 80062be:	089b      	lsreq	r3, r3, #2
 80062c0:	3002      	addeq	r0, #2
 80062c2:	07da      	lsls	r2, r3, #31
 80062c4:	d403      	bmi.n	80062ce <__lo0bits+0x4e>
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	f100 0001 	add.w	r0, r0, #1
 80062cc:	d005      	beq.n	80062da <__lo0bits+0x5a>
 80062ce:	600b      	str	r3, [r1, #0]
 80062d0:	4770      	bx	lr
 80062d2:	4610      	mov	r0, r2
 80062d4:	e7e9      	b.n	80062aa <__lo0bits+0x2a>
 80062d6:	2000      	movs	r0, #0
 80062d8:	4770      	bx	lr
 80062da:	2020      	movs	r0, #32
 80062dc:	4770      	bx	lr
	...

080062e0 <__i2b>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	2101      	movs	r1, #1
 80062e6:	f7ff ff03 	bl	80060f0 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__i2b+0x1a>
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <__i2b+0x24>)
 80062f0:	4805      	ldr	r0, [pc, #20]	; (8006308 <__i2b+0x28>)
 80062f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062f6:	f000 fce1 	bl	8006cbc <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	6144      	str	r4, [r0, #20]
 80062fe:	6103      	str	r3, [r0, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	080087c3 	.word	0x080087c3
 8006308:	080087d4 	.word	0x080087d4

0800630c <__multiply>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4691      	mov	r9, r2
 8006312:	690a      	ldr	r2, [r1, #16]
 8006314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	bfb8      	it	lt
 800631c:	460b      	movlt	r3, r1
 800631e:	460c      	mov	r4, r1
 8006320:	bfbc      	itt	lt
 8006322:	464c      	movlt	r4, r9
 8006324:	4699      	movlt	r9, r3
 8006326:	6927      	ldr	r7, [r4, #16]
 8006328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	6861      	ldr	r1, [r4, #4]
 8006330:	eb07 060a 	add.w	r6, r7, sl
 8006334:	42b3      	cmp	r3, r6
 8006336:	b085      	sub	sp, #20
 8006338:	bfb8      	it	lt
 800633a:	3101      	addlt	r1, #1
 800633c:	f7ff fed8 	bl	80060f0 <_Balloc>
 8006340:	b930      	cbnz	r0, 8006350 <__multiply+0x44>
 8006342:	4602      	mov	r2, r0
 8006344:	4b44      	ldr	r3, [pc, #272]	; (8006458 <__multiply+0x14c>)
 8006346:	4845      	ldr	r0, [pc, #276]	; (800645c <__multiply+0x150>)
 8006348:	f240 115d 	movw	r1, #349	; 0x15d
 800634c:	f000 fcb6 	bl	8006cbc <__assert_func>
 8006350:	f100 0514 	add.w	r5, r0, #20
 8006354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006358:	462b      	mov	r3, r5
 800635a:	2200      	movs	r2, #0
 800635c:	4543      	cmp	r3, r8
 800635e:	d321      	bcc.n	80063a4 <__multiply+0x98>
 8006360:	f104 0314 	add.w	r3, r4, #20
 8006364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006368:	f109 0314 	add.w	r3, r9, #20
 800636c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006370:	9202      	str	r2, [sp, #8]
 8006372:	1b3a      	subs	r2, r7, r4
 8006374:	3a15      	subs	r2, #21
 8006376:	f022 0203 	bic.w	r2, r2, #3
 800637a:	3204      	adds	r2, #4
 800637c:	f104 0115 	add.w	r1, r4, #21
 8006380:	428f      	cmp	r7, r1
 8006382:	bf38      	it	cc
 8006384:	2204      	movcc	r2, #4
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	9a02      	ldr	r2, [sp, #8]
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d80c      	bhi.n	80063aa <__multiply+0x9e>
 8006390:	2e00      	cmp	r6, #0
 8006392:	dd03      	ble.n	800639c <__multiply+0x90>
 8006394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05a      	beq.n	8006452 <__multiply+0x146>
 800639c:	6106      	str	r6, [r0, #16]
 800639e:	b005      	add	sp, #20
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	e7d8      	b.n	800635c <__multiply+0x50>
 80063aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	d024      	beq.n	80063fe <__multiply+0xf2>
 80063b4:	f104 0e14 	add.w	lr, r4, #20
 80063b8:	46a9      	mov	r9, r5
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063c2:	f8d9 1000 	ldr.w	r1, [r9]
 80063c6:	fa1f fb82 	uxth.w	fp, r2
 80063ca:	b289      	uxth	r1, r1
 80063cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80063d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063d4:	f8d9 2000 	ldr.w	r2, [r9]
 80063d8:	4461      	add	r1, ip
 80063da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063de:	fb0a c20b 	mla	r2, sl, fp, ip
 80063e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063e6:	b289      	uxth	r1, r1
 80063e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063ec:	4577      	cmp	r7, lr
 80063ee:	f849 1b04 	str.w	r1, [r9], #4
 80063f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063f6:	d8e2      	bhi.n	80063be <__multiply+0xb2>
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	f845 c002 	str.w	ip, [r5, r2]
 80063fe:	9a03      	ldr	r2, [sp, #12]
 8006400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006404:	3304      	adds	r3, #4
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d020      	beq.n	800644e <__multiply+0x142>
 800640c:	6829      	ldr	r1, [r5, #0]
 800640e:	f104 0c14 	add.w	ip, r4, #20
 8006412:	46ae      	mov	lr, r5
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	f8bc b000 	ldrh.w	fp, [ip]
 800641c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006420:	fb09 220b 	mla	r2, r9, fp, r2
 8006424:	4492      	add	sl, r2
 8006426:	b289      	uxth	r1, r1
 8006428:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800642c:	f84e 1b04 	str.w	r1, [lr], #4
 8006430:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006434:	f8be 1000 	ldrh.w	r1, [lr]
 8006438:	0c12      	lsrs	r2, r2, #16
 800643a:	fb09 1102 	mla	r1, r9, r2, r1
 800643e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006442:	4567      	cmp	r7, ip
 8006444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006448:	d8e6      	bhi.n	8006418 <__multiply+0x10c>
 800644a:	9a01      	ldr	r2, [sp, #4]
 800644c:	50a9      	str	r1, [r5, r2]
 800644e:	3504      	adds	r5, #4
 8006450:	e79a      	b.n	8006388 <__multiply+0x7c>
 8006452:	3e01      	subs	r6, #1
 8006454:	e79c      	b.n	8006390 <__multiply+0x84>
 8006456:	bf00      	nop
 8006458:	080087c3 	.word	0x080087c3
 800645c:	080087d4 	.word	0x080087d4

08006460 <__pow5mult>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4615      	mov	r5, r2
 8006466:	f012 0203 	ands.w	r2, r2, #3
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	d007      	beq.n	8006480 <__pow5mult+0x20>
 8006470:	4c25      	ldr	r4, [pc, #148]	; (8006508 <__pow5mult+0xa8>)
 8006472:	3a01      	subs	r2, #1
 8006474:	2300      	movs	r3, #0
 8006476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647a:	f7ff fe9b 	bl	80061b4 <__multadd>
 800647e:	4607      	mov	r7, r0
 8006480:	10ad      	asrs	r5, r5, #2
 8006482:	d03d      	beq.n	8006500 <__pow5mult+0xa0>
 8006484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006486:	b97c      	cbnz	r4, 80064a8 <__pow5mult+0x48>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff fe1b 	bl	80060c4 <malloc>
 800648e:	4602      	mov	r2, r0
 8006490:	6270      	str	r0, [r6, #36]	; 0x24
 8006492:	b928      	cbnz	r0, 80064a0 <__pow5mult+0x40>
 8006494:	4b1d      	ldr	r3, [pc, #116]	; (800650c <__pow5mult+0xac>)
 8006496:	481e      	ldr	r0, [pc, #120]	; (8006510 <__pow5mult+0xb0>)
 8006498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800649c:	f000 fc0e 	bl	8006cbc <__assert_func>
 80064a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a4:	6004      	str	r4, [r0, #0]
 80064a6:	60c4      	str	r4, [r0, #12]
 80064a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b0:	b94c      	cbnz	r4, 80064c6 <__pow5mult+0x66>
 80064b2:	f240 2171 	movw	r1, #625	; 0x271
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff ff12 	bl	80062e0 <__i2b>
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c2:	4604      	mov	r4, r0
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	07eb      	lsls	r3, r5, #31
 80064cc:	d50a      	bpl.n	80064e4 <__pow5mult+0x84>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4622      	mov	r2, r4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ff1a 	bl	800630c <__multiply>
 80064d8:	4639      	mov	r1, r7
 80064da:	4680      	mov	r8, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fe47 	bl	8006170 <_Bfree>
 80064e2:	4647      	mov	r7, r8
 80064e4:	106d      	asrs	r5, r5, #1
 80064e6:	d00b      	beq.n	8006500 <__pow5mult+0xa0>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	b938      	cbnz	r0, 80064fc <__pow5mult+0x9c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4621      	mov	r1, r4
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff ff0b 	bl	800630c <__multiply>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	f8c0 9000 	str.w	r9, [r0]
 80064fc:	4604      	mov	r4, r0
 80064fe:	e7e4      	b.n	80064ca <__pow5mult+0x6a>
 8006500:	4638      	mov	r0, r7
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	08008920 	.word	0x08008920
 800650c:	08008751 	.word	0x08008751
 8006510:	080087d4 	.word	0x080087d4

08006514 <__lshift>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	460c      	mov	r4, r1
 800651a:	6849      	ldr	r1, [r1, #4]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	4607      	mov	r7, r0
 8006526:	4691      	mov	r9, r2
 8006528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800652c:	f108 0601 	add.w	r6, r8, #1
 8006530:	42b3      	cmp	r3, r6
 8006532:	db0b      	blt.n	800654c <__lshift+0x38>
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fddb 	bl	80060f0 <_Balloc>
 800653a:	4605      	mov	r5, r0
 800653c:	b948      	cbnz	r0, 8006552 <__lshift+0x3e>
 800653e:	4602      	mov	r2, r0
 8006540:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <__lshift+0xd8>)
 8006542:	482b      	ldr	r0, [pc, #172]	; (80065f0 <__lshift+0xdc>)
 8006544:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006548:	f000 fbb8 	bl	8006cbc <__assert_func>
 800654c:	3101      	adds	r1, #1
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	e7ee      	b.n	8006530 <__lshift+0x1c>
 8006552:	2300      	movs	r3, #0
 8006554:	f100 0114 	add.w	r1, r0, #20
 8006558:	f100 0210 	add.w	r2, r0, #16
 800655c:	4618      	mov	r0, r3
 800655e:	4553      	cmp	r3, sl
 8006560:	db37      	blt.n	80065d2 <__lshift+0xbe>
 8006562:	6920      	ldr	r0, [r4, #16]
 8006564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	f019 091f 	ands.w	r9, r9, #31
 8006570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006574:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006578:	d02f      	beq.n	80065da <__lshift+0xc6>
 800657a:	f1c9 0e20 	rsb	lr, r9, #32
 800657e:	468a      	mov	sl, r1
 8006580:	f04f 0c00 	mov.w	ip, #0
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	fa02 f209 	lsl.w	r2, r2, r9
 800658a:	ea42 020c 	orr.w	r2, r2, ip
 800658e:	f84a 2b04 	str.w	r2, [sl], #4
 8006592:	f853 2b04 	ldr.w	r2, [r3], #4
 8006596:	4298      	cmp	r0, r3
 8006598:	fa22 fc0e 	lsr.w	ip, r2, lr
 800659c:	d8f2      	bhi.n	8006584 <__lshift+0x70>
 800659e:	1b03      	subs	r3, r0, r4
 80065a0:	3b15      	subs	r3, #21
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	3304      	adds	r3, #4
 80065a8:	f104 0215 	add.w	r2, r4, #21
 80065ac:	4290      	cmp	r0, r2
 80065ae:	bf38      	it	cc
 80065b0:	2304      	movcc	r3, #4
 80065b2:	f841 c003 	str.w	ip, [r1, r3]
 80065b6:	f1bc 0f00 	cmp.w	ip, #0
 80065ba:	d001      	beq.n	80065c0 <__lshift+0xac>
 80065bc:	f108 0602 	add.w	r6, r8, #2
 80065c0:	3e01      	subs	r6, #1
 80065c2:	4638      	mov	r0, r7
 80065c4:	612e      	str	r6, [r5, #16]
 80065c6:	4621      	mov	r1, r4
 80065c8:	f7ff fdd2 	bl	8006170 <_Bfree>
 80065cc:	4628      	mov	r0, r5
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80065d6:	3301      	adds	r3, #1
 80065d8:	e7c1      	b.n	800655e <__lshift+0x4a>
 80065da:	3904      	subs	r1, #4
 80065dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80065e4:	4298      	cmp	r0, r3
 80065e6:	d8f9      	bhi.n	80065dc <__lshift+0xc8>
 80065e8:	e7ea      	b.n	80065c0 <__lshift+0xac>
 80065ea:	bf00      	nop
 80065ec:	080087c3 	.word	0x080087c3
 80065f0:	080087d4 	.word	0x080087d4

080065f4 <__mcmp>:
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	6902      	ldr	r2, [r0, #16]
 80065f8:	690c      	ldr	r4, [r1, #16]
 80065fa:	1b12      	subs	r2, r2, r4
 80065fc:	d10e      	bne.n	800661c <__mcmp+0x28>
 80065fe:	f100 0314 	add.w	r3, r0, #20
 8006602:	3114      	adds	r1, #20
 8006604:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800660c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006610:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006614:	42a5      	cmp	r5, r4
 8006616:	d003      	beq.n	8006620 <__mcmp+0x2c>
 8006618:	d305      	bcc.n	8006626 <__mcmp+0x32>
 800661a:	2201      	movs	r2, #1
 800661c:	4610      	mov	r0, r2
 800661e:	bd30      	pop	{r4, r5, pc}
 8006620:	4283      	cmp	r3, r0
 8006622:	d3f3      	bcc.n	800660c <__mcmp+0x18>
 8006624:	e7fa      	b.n	800661c <__mcmp+0x28>
 8006626:	f04f 32ff 	mov.w	r2, #4294967295
 800662a:	e7f7      	b.n	800661c <__mcmp+0x28>

0800662c <__mdiff>:
 800662c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	4606      	mov	r6, r0
 8006634:	4611      	mov	r1, r2
 8006636:	4620      	mov	r0, r4
 8006638:	4690      	mov	r8, r2
 800663a:	f7ff ffdb 	bl	80065f4 <__mcmp>
 800663e:	1e05      	subs	r5, r0, #0
 8006640:	d110      	bne.n	8006664 <__mdiff+0x38>
 8006642:	4629      	mov	r1, r5
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff fd53 	bl	80060f0 <_Balloc>
 800664a:	b930      	cbnz	r0, 800665a <__mdiff+0x2e>
 800664c:	4b3a      	ldr	r3, [pc, #232]	; (8006738 <__mdiff+0x10c>)
 800664e:	4602      	mov	r2, r0
 8006650:	f240 2132 	movw	r1, #562	; 0x232
 8006654:	4839      	ldr	r0, [pc, #228]	; (800673c <__mdiff+0x110>)
 8006656:	f000 fb31 	bl	8006cbc <__assert_func>
 800665a:	2301      	movs	r3, #1
 800665c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	bfa4      	itt	ge
 8006666:	4643      	movge	r3, r8
 8006668:	46a0      	movge	r8, r4
 800666a:	4630      	mov	r0, r6
 800666c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006670:	bfa6      	itte	ge
 8006672:	461c      	movge	r4, r3
 8006674:	2500      	movge	r5, #0
 8006676:	2501      	movlt	r5, #1
 8006678:	f7ff fd3a 	bl	80060f0 <_Balloc>
 800667c:	b920      	cbnz	r0, 8006688 <__mdiff+0x5c>
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <__mdiff+0x10c>)
 8006680:	4602      	mov	r2, r0
 8006682:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006686:	e7e5      	b.n	8006654 <__mdiff+0x28>
 8006688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800668c:	6926      	ldr	r6, [r4, #16]
 800668e:	60c5      	str	r5, [r0, #12]
 8006690:	f104 0914 	add.w	r9, r4, #20
 8006694:	f108 0514 	add.w	r5, r8, #20
 8006698:	f100 0e14 	add.w	lr, r0, #20
 800669c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066a4:	f108 0210 	add.w	r2, r8, #16
 80066a8:	46f2      	mov	sl, lr
 80066aa:	2100      	movs	r1, #0
 80066ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80066b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066b4:	fa1f f883 	uxth.w	r8, r3
 80066b8:	fa11 f18b 	uxtah	r1, r1, fp
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	eba1 0808 	sub.w	r8, r1, r8
 80066c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066ca:	fa1f f888 	uxth.w	r8, r8
 80066ce:	1419      	asrs	r1, r3, #16
 80066d0:	454e      	cmp	r6, r9
 80066d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066d6:	f84a 3b04 	str.w	r3, [sl], #4
 80066da:	d8e7      	bhi.n	80066ac <__mdiff+0x80>
 80066dc:	1b33      	subs	r3, r6, r4
 80066de:	3b15      	subs	r3, #21
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	3304      	adds	r3, #4
 80066e6:	3415      	adds	r4, #21
 80066e8:	42a6      	cmp	r6, r4
 80066ea:	bf38      	it	cc
 80066ec:	2304      	movcc	r3, #4
 80066ee:	441d      	add	r5, r3
 80066f0:	4473      	add	r3, lr
 80066f2:	469e      	mov	lr, r3
 80066f4:	462e      	mov	r6, r5
 80066f6:	4566      	cmp	r6, ip
 80066f8:	d30e      	bcc.n	8006718 <__mdiff+0xec>
 80066fa:	f10c 0203 	add.w	r2, ip, #3
 80066fe:	1b52      	subs	r2, r2, r5
 8006700:	f022 0203 	bic.w	r2, r2, #3
 8006704:	3d03      	subs	r5, #3
 8006706:	45ac      	cmp	ip, r5
 8006708:	bf38      	it	cc
 800670a:	2200      	movcc	r2, #0
 800670c:	441a      	add	r2, r3
 800670e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006712:	b17b      	cbz	r3, 8006734 <__mdiff+0x108>
 8006714:	6107      	str	r7, [r0, #16]
 8006716:	e7a3      	b.n	8006660 <__mdiff+0x34>
 8006718:	f856 8b04 	ldr.w	r8, [r6], #4
 800671c:	fa11 f288 	uxtah	r2, r1, r8
 8006720:	1414      	asrs	r4, r2, #16
 8006722:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006726:	b292      	uxth	r2, r2
 8006728:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800672c:	f84e 2b04 	str.w	r2, [lr], #4
 8006730:	1421      	asrs	r1, r4, #16
 8006732:	e7e0      	b.n	80066f6 <__mdiff+0xca>
 8006734:	3f01      	subs	r7, #1
 8006736:	e7ea      	b.n	800670e <__mdiff+0xe2>
 8006738:	080087c3 	.word	0x080087c3
 800673c:	080087d4 	.word	0x080087d4

08006740 <__d2b>:
 8006740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006744:	4689      	mov	r9, r1
 8006746:	2101      	movs	r1, #1
 8006748:	ec57 6b10 	vmov	r6, r7, d0
 800674c:	4690      	mov	r8, r2
 800674e:	f7ff fccf 	bl	80060f0 <_Balloc>
 8006752:	4604      	mov	r4, r0
 8006754:	b930      	cbnz	r0, 8006764 <__d2b+0x24>
 8006756:	4602      	mov	r2, r0
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <__d2b+0xb0>)
 800675a:	4826      	ldr	r0, [pc, #152]	; (80067f4 <__d2b+0xb4>)
 800675c:	f240 310a 	movw	r1, #778	; 0x30a
 8006760:	f000 faac 	bl	8006cbc <__assert_func>
 8006764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800676c:	bb35      	cbnz	r5, 80067bc <__d2b+0x7c>
 800676e:	2e00      	cmp	r6, #0
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	d028      	beq.n	80067c6 <__d2b+0x86>
 8006774:	4668      	mov	r0, sp
 8006776:	9600      	str	r6, [sp, #0]
 8006778:	f7ff fd82 	bl	8006280 <__lo0bits>
 800677c:	9900      	ldr	r1, [sp, #0]
 800677e:	b300      	cbz	r0, 80067c2 <__d2b+0x82>
 8006780:	9a01      	ldr	r2, [sp, #4]
 8006782:	f1c0 0320 	rsb	r3, r0, #32
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	430b      	orrs	r3, r1
 800678c:	40c2      	lsrs	r2, r0
 800678e:	6163      	str	r3, [r4, #20]
 8006790:	9201      	str	r2, [sp, #4]
 8006792:	9b01      	ldr	r3, [sp, #4]
 8006794:	61a3      	str	r3, [r4, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bf14      	ite	ne
 800679a:	2202      	movne	r2, #2
 800679c:	2201      	moveq	r2, #1
 800679e:	6122      	str	r2, [r4, #16]
 80067a0:	b1d5      	cbz	r5, 80067d8 <__d2b+0x98>
 80067a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067a6:	4405      	add	r5, r0
 80067a8:	f8c9 5000 	str.w	r5, [r9]
 80067ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067b0:	f8c8 0000 	str.w	r0, [r8]
 80067b4:	4620      	mov	r0, r4
 80067b6:	b003      	add	sp, #12
 80067b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c0:	e7d5      	b.n	800676e <__d2b+0x2e>
 80067c2:	6161      	str	r1, [r4, #20]
 80067c4:	e7e5      	b.n	8006792 <__d2b+0x52>
 80067c6:	a801      	add	r0, sp, #4
 80067c8:	f7ff fd5a 	bl	8006280 <__lo0bits>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	2201      	movs	r2, #1
 80067d2:	6122      	str	r2, [r4, #16]
 80067d4:	3020      	adds	r0, #32
 80067d6:	e7e3      	b.n	80067a0 <__d2b+0x60>
 80067d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067e0:	f8c9 0000 	str.w	r0, [r9]
 80067e4:	6918      	ldr	r0, [r3, #16]
 80067e6:	f7ff fd2b 	bl	8006240 <__hi0bits>
 80067ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067ee:	e7df      	b.n	80067b0 <__d2b+0x70>
 80067f0:	080087c3 	.word	0x080087c3
 80067f4:	080087d4 	.word	0x080087d4

080067f8 <_calloc_r>:
 80067f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fa:	fba1 2402 	umull	r2, r4, r1, r2
 80067fe:	b94c      	cbnz	r4, 8006814 <_calloc_r+0x1c>
 8006800:	4611      	mov	r1, r2
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	f000 f87a 	bl	80068fc <_malloc_r>
 8006808:	9a01      	ldr	r2, [sp, #4]
 800680a:	4605      	mov	r5, r0
 800680c:	b930      	cbnz	r0, 800681c <_calloc_r+0x24>
 800680e:	4628      	mov	r0, r5
 8006810:	b003      	add	sp, #12
 8006812:	bd30      	pop	{r4, r5, pc}
 8006814:	220c      	movs	r2, #12
 8006816:	6002      	str	r2, [r0, #0]
 8006818:	2500      	movs	r5, #0
 800681a:	e7f8      	b.n	800680e <_calloc_r+0x16>
 800681c:	4621      	mov	r1, r4
 800681e:	f7fe f92b 	bl	8004a78 <memset>
 8006822:	e7f4      	b.n	800680e <_calloc_r+0x16>

08006824 <_free_r>:
 8006824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006826:	2900      	cmp	r1, #0
 8006828:	d044      	beq.n	80068b4 <_free_r+0x90>
 800682a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682e:	9001      	str	r0, [sp, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f1a1 0404 	sub.w	r4, r1, #4
 8006836:	bfb8      	it	lt
 8006838:	18e4      	addlt	r4, r4, r3
 800683a:	f000 fa9b 	bl	8006d74 <__malloc_lock>
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <_free_r+0x94>)
 8006840:	9801      	ldr	r0, [sp, #4]
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	b933      	cbnz	r3, 8006854 <_free_r+0x30>
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6014      	str	r4, [r2, #0]
 800684a:	b003      	add	sp, #12
 800684c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006850:	f000 ba96 	b.w	8006d80 <__malloc_unlock>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d908      	bls.n	800686a <_free_r+0x46>
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1961      	adds	r1, r4, r5
 800685c:	428b      	cmp	r3, r1
 800685e:	bf01      	itttt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	1949      	addeq	r1, r1, r5
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	e7ed      	b.n	8006846 <_free_r+0x22>
 800686a:	461a      	mov	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b10b      	cbz	r3, 8006874 <_free_r+0x50>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x46>
 8006874:	6811      	ldr	r1, [r2, #0]
 8006876:	1855      	adds	r5, r2, r1
 8006878:	42a5      	cmp	r5, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x70>
 800687c:	6824      	ldr	r4, [r4, #0]
 800687e:	4421      	add	r1, r4
 8006880:	1854      	adds	r4, r2, r1
 8006882:	42a3      	cmp	r3, r4
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	d1e0      	bne.n	800684a <_free_r+0x26>
 8006888:	681c      	ldr	r4, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	4421      	add	r1, r4
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	e7da      	b.n	800684a <_free_r+0x26>
 8006894:	d902      	bls.n	800689c <_free_r+0x78>
 8006896:	230c      	movs	r3, #12
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	e7d6      	b.n	800684a <_free_r+0x26>
 800689c:	6825      	ldr	r5, [r4, #0]
 800689e:	1961      	adds	r1, r4, r5
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf04      	itt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	bf04      	itt	eq
 80068ac:	1949      	addeq	r1, r1, r5
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	6054      	str	r4, [r2, #4]
 80068b2:	e7ca      	b.n	800684a <_free_r+0x26>
 80068b4:	b003      	add	sp, #12
 80068b6:	bd30      	pop	{r4, r5, pc}
 80068b8:	20000340 	.word	0x20000340

080068bc <sbrk_aligned>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4e0e      	ldr	r6, [pc, #56]	; (80068f8 <sbrk_aligned+0x3c>)
 80068c0:	460c      	mov	r4, r1
 80068c2:	6831      	ldr	r1, [r6, #0]
 80068c4:	4605      	mov	r5, r0
 80068c6:	b911      	cbnz	r1, 80068ce <sbrk_aligned+0x12>
 80068c8:	f000 f9e8 	bl	8006c9c <_sbrk_r>
 80068cc:	6030      	str	r0, [r6, #0]
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f9e3 	bl	8006c9c <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d00a      	beq.n	80068f0 <sbrk_aligned+0x34>
 80068da:	1cc4      	adds	r4, r0, #3
 80068dc:	f024 0403 	bic.w	r4, r4, #3
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d007      	beq.n	80068f4 <sbrk_aligned+0x38>
 80068e4:	1a21      	subs	r1, r4, r0
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 f9d8 	bl	8006c9c <_sbrk_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d101      	bne.n	80068f4 <sbrk_aligned+0x38>
 80068f0:	f04f 34ff 	mov.w	r4, #4294967295
 80068f4:	4620      	mov	r0, r4
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	20000344 	.word	0x20000344

080068fc <_malloc_r>:
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	1ccd      	adds	r5, r1, #3
 8006902:	f025 0503 	bic.w	r5, r5, #3
 8006906:	3508      	adds	r5, #8
 8006908:	2d0c      	cmp	r5, #12
 800690a:	bf38      	it	cc
 800690c:	250c      	movcc	r5, #12
 800690e:	2d00      	cmp	r5, #0
 8006910:	4607      	mov	r7, r0
 8006912:	db01      	blt.n	8006918 <_malloc_r+0x1c>
 8006914:	42a9      	cmp	r1, r5
 8006916:	d905      	bls.n	8006924 <_malloc_r+0x28>
 8006918:	230c      	movs	r3, #12
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	2600      	movs	r6, #0
 800691e:	4630      	mov	r0, r6
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	4e2e      	ldr	r6, [pc, #184]	; (80069e0 <_malloc_r+0xe4>)
 8006926:	f000 fa25 	bl	8006d74 <__malloc_lock>
 800692a:	6833      	ldr	r3, [r6, #0]
 800692c:	461c      	mov	r4, r3
 800692e:	bb34      	cbnz	r4, 800697e <_malloc_r+0x82>
 8006930:	4629      	mov	r1, r5
 8006932:	4638      	mov	r0, r7
 8006934:	f7ff ffc2 	bl	80068bc <sbrk_aligned>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	4604      	mov	r4, r0
 800693c:	d14d      	bne.n	80069da <_malloc_r+0xde>
 800693e:	6834      	ldr	r4, [r6, #0]
 8006940:	4626      	mov	r6, r4
 8006942:	2e00      	cmp	r6, #0
 8006944:	d140      	bne.n	80069c8 <_malloc_r+0xcc>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	4631      	mov	r1, r6
 800694a:	4638      	mov	r0, r7
 800694c:	eb04 0803 	add.w	r8, r4, r3
 8006950:	f000 f9a4 	bl	8006c9c <_sbrk_r>
 8006954:	4580      	cmp	r8, r0
 8006956:	d13a      	bne.n	80069ce <_malloc_r+0xd2>
 8006958:	6821      	ldr	r1, [r4, #0]
 800695a:	3503      	adds	r5, #3
 800695c:	1a6d      	subs	r5, r5, r1
 800695e:	f025 0503 	bic.w	r5, r5, #3
 8006962:	3508      	adds	r5, #8
 8006964:	2d0c      	cmp	r5, #12
 8006966:	bf38      	it	cc
 8006968:	250c      	movcc	r5, #12
 800696a:	4629      	mov	r1, r5
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ffa5 	bl	80068bc <sbrk_aligned>
 8006972:	3001      	adds	r0, #1
 8006974:	d02b      	beq.n	80069ce <_malloc_r+0xd2>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	442b      	add	r3, r5
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	e00e      	b.n	800699c <_malloc_r+0xa0>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	1b52      	subs	r2, r2, r5
 8006982:	d41e      	bmi.n	80069c2 <_malloc_r+0xc6>
 8006984:	2a0b      	cmp	r2, #11
 8006986:	d916      	bls.n	80069b6 <_malloc_r+0xba>
 8006988:	1961      	adds	r1, r4, r5
 800698a:	42a3      	cmp	r3, r4
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	bf18      	it	ne
 8006990:	6059      	strne	r1, [r3, #4]
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	bf08      	it	eq
 8006996:	6031      	streq	r1, [r6, #0]
 8006998:	5162      	str	r2, [r4, r5]
 800699a:	604b      	str	r3, [r1, #4]
 800699c:	4638      	mov	r0, r7
 800699e:	f104 060b 	add.w	r6, r4, #11
 80069a2:	f000 f9ed 	bl	8006d80 <__malloc_unlock>
 80069a6:	f026 0607 	bic.w	r6, r6, #7
 80069aa:	1d23      	adds	r3, r4, #4
 80069ac:	1af2      	subs	r2, r6, r3
 80069ae:	d0b6      	beq.n	800691e <_malloc_r+0x22>
 80069b0:	1b9b      	subs	r3, r3, r6
 80069b2:	50a3      	str	r3, [r4, r2]
 80069b4:	e7b3      	b.n	800691e <_malloc_r+0x22>
 80069b6:	6862      	ldr	r2, [r4, #4]
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	bf0c      	ite	eq
 80069bc:	6032      	streq	r2, [r6, #0]
 80069be:	605a      	strne	r2, [r3, #4]
 80069c0:	e7ec      	b.n	800699c <_malloc_r+0xa0>
 80069c2:	4623      	mov	r3, r4
 80069c4:	6864      	ldr	r4, [r4, #4]
 80069c6:	e7b2      	b.n	800692e <_malloc_r+0x32>
 80069c8:	4634      	mov	r4, r6
 80069ca:	6876      	ldr	r6, [r6, #4]
 80069cc:	e7b9      	b.n	8006942 <_malloc_r+0x46>
 80069ce:	230c      	movs	r3, #12
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4638      	mov	r0, r7
 80069d4:	f000 f9d4 	bl	8006d80 <__malloc_unlock>
 80069d8:	e7a1      	b.n	800691e <_malloc_r+0x22>
 80069da:	6025      	str	r5, [r4, #0]
 80069dc:	e7de      	b.n	800699c <_malloc_r+0xa0>
 80069de:	bf00      	nop
 80069e0:	20000340 	.word	0x20000340

080069e4 <__ssputs_r>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	688e      	ldr	r6, [r1, #8]
 80069ea:	429e      	cmp	r6, r3
 80069ec:	4682      	mov	sl, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4690      	mov	r8, r2
 80069f2:	461f      	mov	r7, r3
 80069f4:	d838      	bhi.n	8006a68 <__ssputs_r+0x84>
 80069f6:	898a      	ldrh	r2, [r1, #12]
 80069f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069fc:	d032      	beq.n	8006a64 <__ssputs_r+0x80>
 80069fe:	6825      	ldr	r5, [r4, #0]
 8006a00:	6909      	ldr	r1, [r1, #16]
 8006a02:	eba5 0901 	sub.w	r9, r5, r1
 8006a06:	6965      	ldr	r5, [r4, #20]
 8006a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a10:	3301      	adds	r3, #1
 8006a12:	444b      	add	r3, r9
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	429d      	cmp	r5, r3
 8006a18:	bf38      	it	cc
 8006a1a:	461d      	movcc	r5, r3
 8006a1c:	0553      	lsls	r3, r2, #21
 8006a1e:	d531      	bpl.n	8006a84 <__ssputs_r+0xa0>
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7ff ff6b 	bl	80068fc <_malloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	b950      	cbnz	r0, 8006a40 <__ssputs_r+0x5c>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	f8ca 3000 	str.w	r3, [sl]
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	6921      	ldr	r1, [r4, #16]
 8006a42:	464a      	mov	r2, r9
 8006a44:	f7ff fb46 	bl	80060d4 <memcpy>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	6126      	str	r6, [r4, #16]
 8006a56:	6165      	str	r5, [r4, #20]
 8006a58:	444e      	add	r6, r9
 8006a5a:	eba5 0509 	sub.w	r5, r5, r9
 8006a5e:	6026      	str	r6, [r4, #0]
 8006a60:	60a5      	str	r5, [r4, #8]
 8006a62:	463e      	mov	r6, r7
 8006a64:	42be      	cmp	r6, r7
 8006a66:	d900      	bls.n	8006a6a <__ssputs_r+0x86>
 8006a68:	463e      	mov	r6, r7
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4641      	mov	r1, r8
 8006a70:	f000 f966 	bl	8006d40 <memmove>
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	1b9b      	subs	r3, r3, r6
 8006a78:	60a3      	str	r3, [r4, #8]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	4433      	add	r3, r6
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7db      	b.n	8006a3c <__ssputs_r+0x58>
 8006a84:	462a      	mov	r2, r5
 8006a86:	f000 f981 	bl	8006d8c <_realloc_r>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1e1      	bne.n	8006a54 <__ssputs_r+0x70>
 8006a90:	6921      	ldr	r1, [r4, #16]
 8006a92:	4650      	mov	r0, sl
 8006a94:	f7ff fec6 	bl	8006824 <_free_r>
 8006a98:	e7c7      	b.n	8006a2a <__ssputs_r+0x46>
	...

08006a9c <_svfiprintf_r>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4698      	mov	r8, r3
 8006aa2:	898b      	ldrh	r3, [r1, #12]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	b09d      	sub	sp, #116	; 0x74
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	d50e      	bpl.n	8006ace <_svfiprintf_r+0x32>
 8006ab0:	690b      	ldr	r3, [r1, #16]
 8006ab2:	b963      	cbnz	r3, 8006ace <_svfiprintf_r+0x32>
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	f7ff ff21 	bl	80068fc <_malloc_r>
 8006aba:	6028      	str	r0, [r5, #0]
 8006abc:	6128      	str	r0, [r5, #16]
 8006abe:	b920      	cbnz	r0, 8006aca <_svfiprintf_r+0x2e>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	e0d1      	b.n	8006c6e <_svfiprintf_r+0x1d2>
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	616b      	str	r3, [r5, #20]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006adc:	2330      	movs	r3, #48	; 0x30
 8006ade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c88 <_svfiprintf_r+0x1ec>
 8006ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ae6:	f04f 0901 	mov.w	r9, #1
 8006aea:	4623      	mov	r3, r4
 8006aec:	469a      	mov	sl, r3
 8006aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af2:	b10a      	cbz	r2, 8006af8 <_svfiprintf_r+0x5c>
 8006af4:	2a25      	cmp	r2, #37	; 0x25
 8006af6:	d1f9      	bne.n	8006aec <_svfiprintf_r+0x50>
 8006af8:	ebba 0b04 	subs.w	fp, sl, r4
 8006afc:	d00b      	beq.n	8006b16 <_svfiprintf_r+0x7a>
 8006afe:	465b      	mov	r3, fp
 8006b00:	4622      	mov	r2, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff ff6d 	bl	80069e4 <__ssputs_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f000 80aa 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b12:	445a      	add	r2, fp
 8006b14:	9209      	str	r2, [sp, #36]	; 0x24
 8006b16:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80a2 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	9307      	str	r3, [sp, #28]
 8006b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b36:	931a      	str	r3, [sp, #104]	; 0x68
 8006b38:	4654      	mov	r4, sl
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	4851      	ldr	r0, [pc, #324]	; (8006c88 <_svfiprintf_r+0x1ec>)
 8006b42:	f7f9 fb55 	bl	80001f0 <memchr>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	b9d8      	cbnz	r0, 8006b82 <_svfiprintf_r+0xe6>
 8006b4a:	06d0      	lsls	r0, r2, #27
 8006b4c:	bf44      	itt	mi
 8006b4e:	2320      	movmi	r3, #32
 8006b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b54:	0711      	lsls	r1, r2, #28
 8006b56:	bf44      	itt	mi
 8006b58:	232b      	movmi	r3, #43	; 0x2b
 8006b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b2a      	cmp	r3, #42	; 0x2a
 8006b64:	d015      	beq.n	8006b92 <_svfiprintf_r+0xf6>
 8006b66:	9a07      	ldr	r2, [sp, #28]
 8006b68:	4654      	mov	r4, sl
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4621      	mov	r1, r4
 8006b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b76:	3b30      	subs	r3, #48	; 0x30
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d94e      	bls.n	8006c1a <_svfiprintf_r+0x17e>
 8006b7c:	b1b0      	cbz	r0, 8006bac <_svfiprintf_r+0x110>
 8006b7e:	9207      	str	r2, [sp, #28]
 8006b80:	e014      	b.n	8006bac <_svfiprintf_r+0x110>
 8006b82:	eba0 0308 	sub.w	r3, r0, r8
 8006b86:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	46a2      	mov	sl, r4
 8006b90:	e7d2      	b.n	8006b38 <_svfiprintf_r+0x9c>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9103      	str	r1, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	425b      	neglt	r3, r3
 8006ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba4:	9307      	strge	r3, [sp, #28]
 8006ba6:	9307      	strlt	r3, [sp, #28]
 8006ba8:	bfb8      	it	lt
 8006baa:	9204      	strlt	r2, [sp, #16]
 8006bac:	7823      	ldrb	r3, [r4, #0]
 8006bae:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb0:	d10c      	bne.n	8006bcc <_svfiprintf_r+0x130>
 8006bb2:	7863      	ldrb	r3, [r4, #1]
 8006bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb6:	d135      	bne.n	8006c24 <_svfiprintf_r+0x188>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	9203      	str	r2, [sp, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bfb8      	it	lt
 8006bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bc8:	3402      	adds	r4, #2
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c98 <_svfiprintf_r+0x1fc>
 8006bd0:	7821      	ldrb	r1, [r4, #0]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	f7f9 fb0b 	bl	80001f0 <memchr>
 8006bda:	b140      	cbz	r0, 8006bee <_svfiprintf_r+0x152>
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	eba0 000a 	sub.w	r0, r0, sl
 8006be2:	fa03 f000 	lsl.w	r0, r3, r0
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	4303      	orrs	r3, r0
 8006bea:	3401      	adds	r4, #1
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	4826      	ldr	r0, [pc, #152]	; (8006c8c <_svfiprintf_r+0x1f0>)
 8006bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf8:	2206      	movs	r2, #6
 8006bfa:	f7f9 faf9 	bl	80001f0 <memchr>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d038      	beq.n	8006c74 <_svfiprintf_r+0x1d8>
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <_svfiprintf_r+0x1f4>)
 8006c04:	bb1b      	cbnz	r3, 8006c4e <_svfiprintf_r+0x1b2>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	f023 0307 	bic.w	r3, r3, #7
 8006c0e:	3308      	adds	r3, #8
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	4433      	add	r3, r6
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	e767      	b.n	8006aea <_svfiprintf_r+0x4e>
 8006c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c1e:	460c      	mov	r4, r1
 8006c20:	2001      	movs	r0, #1
 8006c22:	e7a5      	b.n	8006b70 <_svfiprintf_r+0xd4>
 8006c24:	2300      	movs	r3, #0
 8006c26:	3401      	adds	r4, #1
 8006c28:	9305      	str	r3, [sp, #20]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0c0a 	mov.w	ip, #10
 8006c30:	4620      	mov	r0, r4
 8006c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c36:	3a30      	subs	r2, #48	; 0x30
 8006c38:	2a09      	cmp	r2, #9
 8006c3a:	d903      	bls.n	8006c44 <_svfiprintf_r+0x1a8>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0c5      	beq.n	8006bcc <_svfiprintf_r+0x130>
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	e7c3      	b.n	8006bcc <_svfiprintf_r+0x130>
 8006c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c48:	4604      	mov	r4, r0
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e7f0      	b.n	8006c30 <_svfiprintf_r+0x194>
 8006c4e:	ab03      	add	r3, sp, #12
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	462a      	mov	r2, r5
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <_svfiprintf_r+0x1f8>)
 8006c56:	a904      	add	r1, sp, #16
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f7fd ffb5 	bl	8004bc8 <_printf_float>
 8006c5e:	1c42      	adds	r2, r0, #1
 8006c60:	4606      	mov	r6, r0
 8006c62:	d1d6      	bne.n	8006c12 <_svfiprintf_r+0x176>
 8006c64:	89ab      	ldrh	r3, [r5, #12]
 8006c66:	065b      	lsls	r3, r3, #25
 8006c68:	f53f af2c 	bmi.w	8006ac4 <_svfiprintf_r+0x28>
 8006c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c6e:	b01d      	add	sp, #116	; 0x74
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <_svfiprintf_r+0x1f8>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7fe fa46 	bl	8005110 <_printf_i>
 8006c84:	e7eb      	b.n	8006c5e <_svfiprintf_r+0x1c2>
 8006c86:	bf00      	nop
 8006c88:	0800892c 	.word	0x0800892c
 8006c8c:	08008936 	.word	0x08008936
 8006c90:	08004bc9 	.word	0x08004bc9
 8006c94:	080069e5 	.word	0x080069e5
 8006c98:	08008932 	.word	0x08008932

08006c9c <_sbrk_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	; (8006cb8 <_sbrk_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa fe02 	bl	80018b0 <_sbrk>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_sbrk_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_sbrk_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000348 	.word	0x20000348

08006cbc <__assert_func>:
 8006cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <__assert_func+0x2c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	68d8      	ldr	r0, [r3, #12]
 8006cca:	b14c      	cbz	r4, 8006ce0 <__assert_func+0x24>
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <__assert_func+0x30>)
 8006cce:	9100      	str	r1, [sp, #0]
 8006cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cd4:	4906      	ldr	r1, [pc, #24]	; (8006cf0 <__assert_func+0x34>)
 8006cd6:	462b      	mov	r3, r5
 8006cd8:	f000 f80e 	bl	8006cf8 <fiprintf>
 8006cdc:	f000 faac 	bl	8007238 <abort>
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <__assert_func+0x38>)
 8006ce2:	461c      	mov	r4, r3
 8006ce4:	e7f3      	b.n	8006cce <__assert_func+0x12>
 8006ce6:	bf00      	nop
 8006ce8:	2000000c 	.word	0x2000000c
 8006cec:	0800893d 	.word	0x0800893d
 8006cf0:	0800894a 	.word	0x0800894a
 8006cf4:	08008978 	.word	0x08008978

08006cf8 <fiprintf>:
 8006cf8:	b40e      	push	{r1, r2, r3}
 8006cfa:	b503      	push	{r0, r1, lr}
 8006cfc:	4601      	mov	r1, r0
 8006cfe:	ab03      	add	r3, sp, #12
 8006d00:	4805      	ldr	r0, [pc, #20]	; (8006d18 <fiprintf+0x20>)
 8006d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d06:	6800      	ldr	r0, [r0, #0]
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	f000 f897 	bl	8006e3c <_vfiprintf_r>
 8006d0e:	b002      	add	sp, #8
 8006d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d14:	b003      	add	sp, #12
 8006d16:	4770      	bx	lr
 8006d18:	2000000c 	.word	0x2000000c

08006d1c <__ascii_mbtowc>:
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	b901      	cbnz	r1, 8006d22 <__ascii_mbtowc+0x6>
 8006d20:	a901      	add	r1, sp, #4
 8006d22:	b142      	cbz	r2, 8006d36 <__ascii_mbtowc+0x1a>
 8006d24:	b14b      	cbz	r3, 8006d3a <__ascii_mbtowc+0x1e>
 8006d26:	7813      	ldrb	r3, [r2, #0]
 8006d28:	600b      	str	r3, [r1, #0]
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	1e10      	subs	r0, r2, #0
 8006d2e:	bf18      	it	ne
 8006d30:	2001      	movne	r0, #1
 8006d32:	b002      	add	sp, #8
 8006d34:	4770      	bx	lr
 8006d36:	4610      	mov	r0, r2
 8006d38:	e7fb      	b.n	8006d32 <__ascii_mbtowc+0x16>
 8006d3a:	f06f 0001 	mvn.w	r0, #1
 8006d3e:	e7f8      	b.n	8006d32 <__ascii_mbtowc+0x16>

08006d40 <memmove>:
 8006d40:	4288      	cmp	r0, r1
 8006d42:	b510      	push	{r4, lr}
 8006d44:	eb01 0402 	add.w	r4, r1, r2
 8006d48:	d902      	bls.n	8006d50 <memmove+0x10>
 8006d4a:	4284      	cmp	r4, r0
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	d807      	bhi.n	8006d60 <memmove+0x20>
 8006d50:	1e43      	subs	r3, r0, #1
 8006d52:	42a1      	cmp	r1, r4
 8006d54:	d008      	beq.n	8006d68 <memmove+0x28>
 8006d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d5e:	e7f8      	b.n	8006d52 <memmove+0x12>
 8006d60:	4402      	add	r2, r0
 8006d62:	4601      	mov	r1, r0
 8006d64:	428a      	cmp	r2, r1
 8006d66:	d100      	bne.n	8006d6a <memmove+0x2a>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d72:	e7f7      	b.n	8006d64 <memmove+0x24>

08006d74 <__malloc_lock>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__malloc_lock+0x8>)
 8006d76:	f000 bc1f 	b.w	80075b8 <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	2000034c 	.word	0x2000034c

08006d80 <__malloc_unlock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__malloc_unlock+0x8>)
 8006d82:	f000 bc1a 	b.w	80075ba <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	2000034c 	.word	0x2000034c

08006d8c <_realloc_r>:
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	4680      	mov	r8, r0
 8006d92:	4614      	mov	r4, r2
 8006d94:	460e      	mov	r6, r1
 8006d96:	b921      	cbnz	r1, 8006da2 <_realloc_r+0x16>
 8006d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f7ff bdad 	b.w	80068fc <_malloc_r>
 8006da2:	b92a      	cbnz	r2, 8006db0 <_realloc_r+0x24>
 8006da4:	f7ff fd3e 	bl	8006824 <_free_r>
 8006da8:	4625      	mov	r5, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	f000 fc6a 	bl	8007688 <_malloc_usable_size_r>
 8006db4:	4284      	cmp	r4, r0
 8006db6:	4607      	mov	r7, r0
 8006db8:	d802      	bhi.n	8006dc0 <_realloc_r+0x34>
 8006dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dbe:	d812      	bhi.n	8006de6 <_realloc_r+0x5a>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7ff fd9a 	bl	80068fc <_malloc_r>
 8006dc8:	4605      	mov	r5, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0ed      	beq.n	8006daa <_realloc_r+0x1e>
 8006dce:	42bc      	cmp	r4, r7
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	bf28      	it	cs
 8006dd6:	463a      	movcs	r2, r7
 8006dd8:	f7ff f97c 	bl	80060d4 <memcpy>
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff fd20 	bl	8006824 <_free_r>
 8006de4:	e7e1      	b.n	8006daa <_realloc_r+0x1e>
 8006de6:	4635      	mov	r5, r6
 8006de8:	e7df      	b.n	8006daa <_realloc_r+0x1e>

08006dea <__sfputc_r>:
 8006dea:	6893      	ldr	r3, [r2, #8]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	b410      	push	{r4}
 8006df2:	6093      	str	r3, [r2, #8]
 8006df4:	da08      	bge.n	8006e08 <__sfputc_r+0x1e>
 8006df6:	6994      	ldr	r4, [r2, #24]
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	db01      	blt.n	8006e00 <__sfputc_r+0x16>
 8006dfc:	290a      	cmp	r1, #10
 8006dfe:	d103      	bne.n	8006e08 <__sfputc_r+0x1e>
 8006e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e04:	f000 b94a 	b.w	800709c <__swbuf_r>
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	1c58      	adds	r0, r3, #1
 8006e0c:	6010      	str	r0, [r2, #0]
 8006e0e:	7019      	strb	r1, [r3, #0]
 8006e10:	4608      	mov	r0, r1
 8006e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <__sfputs_r>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	4614      	mov	r4, r2
 8006e20:	18d5      	adds	r5, r2, r3
 8006e22:	42ac      	cmp	r4, r5
 8006e24:	d101      	bne.n	8006e2a <__sfputs_r+0x12>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e007      	b.n	8006e3a <__sfputs_r+0x22>
 8006e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2e:	463a      	mov	r2, r7
 8006e30:	4630      	mov	r0, r6
 8006e32:	f7ff ffda 	bl	8006dea <__sfputc_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d1f3      	bne.n	8006e22 <__sfputs_r+0xa>
 8006e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e3c <_vfiprintf_r>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	460d      	mov	r5, r1
 8006e42:	b09d      	sub	sp, #116	; 0x74
 8006e44:	4614      	mov	r4, r2
 8006e46:	4698      	mov	r8, r3
 8006e48:	4606      	mov	r6, r0
 8006e4a:	b118      	cbz	r0, 8006e54 <_vfiprintf_r+0x18>
 8006e4c:	6983      	ldr	r3, [r0, #24]
 8006e4e:	b90b      	cbnz	r3, 8006e54 <_vfiprintf_r+0x18>
 8006e50:	f000 fb14 	bl	800747c <__sinit>
 8006e54:	4b89      	ldr	r3, [pc, #548]	; (800707c <_vfiprintf_r+0x240>)
 8006e56:	429d      	cmp	r5, r3
 8006e58:	d11b      	bne.n	8006e92 <_vfiprintf_r+0x56>
 8006e5a:	6875      	ldr	r5, [r6, #4]
 8006e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e5e:	07d9      	lsls	r1, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_vfiprintf_r+0x32>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	059a      	lsls	r2, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_vfiprintf_r+0x32>
 8006e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e6a:	f000 fba5 	bl	80075b8 <__retarget_lock_acquire_recursive>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	071b      	lsls	r3, r3, #28
 8006e72:	d501      	bpl.n	8006e78 <_vfiprintf_r+0x3c>
 8006e74:	692b      	ldr	r3, [r5, #16]
 8006e76:	b9eb      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x78>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f000 f96e 	bl	800715c <__swsetup_r>
 8006e80:	b1c0      	cbz	r0, 8006eb4 <_vfiprintf_r+0x78>
 8006e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e84:	07dc      	lsls	r4, r3, #31
 8006e86:	d50e      	bpl.n	8006ea6 <_vfiprintf_r+0x6a>
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	b01d      	add	sp, #116	; 0x74
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	4b7b      	ldr	r3, [pc, #492]	; (8007080 <_vfiprintf_r+0x244>)
 8006e94:	429d      	cmp	r5, r3
 8006e96:	d101      	bne.n	8006e9c <_vfiprintf_r+0x60>
 8006e98:	68b5      	ldr	r5, [r6, #8]
 8006e9a:	e7df      	b.n	8006e5c <_vfiprintf_r+0x20>
 8006e9c:	4b79      	ldr	r3, [pc, #484]	; (8007084 <_vfiprintf_r+0x248>)
 8006e9e:	429d      	cmp	r5, r3
 8006ea0:	bf08      	it	eq
 8006ea2:	68f5      	ldreq	r5, [r6, #12]
 8006ea4:	e7da      	b.n	8006e5c <_vfiprintf_r+0x20>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	0598      	lsls	r0, r3, #22
 8006eaa:	d4ed      	bmi.n	8006e88 <_vfiprintf_r+0x4c>
 8006eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eae:	f000 fb84 	bl	80075ba <__retarget_lock_release_recursive>
 8006eb2:	e7e9      	b.n	8006e88 <_vfiprintf_r+0x4c>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec2:	2330      	movs	r3, #48	; 0x30
 8006ec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007088 <_vfiprintf_r+0x24c>
 8006ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ecc:	f04f 0901 	mov.w	r9, #1
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	469a      	mov	sl, r3
 8006ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed8:	b10a      	cbz	r2, 8006ede <_vfiprintf_r+0xa2>
 8006eda:	2a25      	cmp	r2, #37	; 0x25
 8006edc:	d1f9      	bne.n	8006ed2 <_vfiprintf_r+0x96>
 8006ede:	ebba 0b04 	subs.w	fp, sl, r4
 8006ee2:	d00b      	beq.n	8006efc <_vfiprintf_r+0xc0>
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ff94 	bl	8006e18 <__sfputs_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f000 80aa 	beq.w	800704a <_vfiprintf_r+0x20e>
 8006ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef8:	445a      	add	r2, fp
 8006efa:	9209      	str	r2, [sp, #36]	; 0x24
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80a2 	beq.w	800704a <_vfiprintf_r+0x20e>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f10:	f10a 0a01 	add.w	sl, sl, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f1e:	4654      	mov	r4, sl
 8006f20:	2205      	movs	r2, #5
 8006f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f26:	4858      	ldr	r0, [pc, #352]	; (8007088 <_vfiprintf_r+0x24c>)
 8006f28:	f7f9 f962 	bl	80001f0 <memchr>
 8006f2c:	9a04      	ldr	r2, [sp, #16]
 8006f2e:	b9d8      	cbnz	r0, 8006f68 <_vfiprintf_r+0x12c>
 8006f30:	06d1      	lsls	r1, r2, #27
 8006f32:	bf44      	itt	mi
 8006f34:	2320      	movmi	r3, #32
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	0713      	lsls	r3, r2, #28
 8006f3c:	bf44      	itt	mi
 8006f3e:	232b      	movmi	r3, #43	; 0x2b
 8006f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f44:	f89a 3000 	ldrb.w	r3, [sl]
 8006f48:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4a:	d015      	beq.n	8006f78 <_vfiprintf_r+0x13c>
 8006f4c:	9a07      	ldr	r2, [sp, #28]
 8006f4e:	4654      	mov	r4, sl
 8006f50:	2000      	movs	r0, #0
 8006f52:	f04f 0c0a 	mov.w	ip, #10
 8006f56:	4621      	mov	r1, r4
 8006f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f5c:	3b30      	subs	r3, #48	; 0x30
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d94e      	bls.n	8007000 <_vfiprintf_r+0x1c4>
 8006f62:	b1b0      	cbz	r0, 8006f92 <_vfiprintf_r+0x156>
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	e014      	b.n	8006f92 <_vfiprintf_r+0x156>
 8006f68:	eba0 0308 	sub.w	r3, r0, r8
 8006f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	46a2      	mov	sl, r4
 8006f76:	e7d2      	b.n	8006f1e <_vfiprintf_r+0xe2>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d19      	adds	r1, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9103      	str	r1, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfbb      	ittet	lt
 8006f84:	425b      	neglt	r3, r3
 8006f86:	f042 0202 	orrlt.w	r2, r2, #2
 8006f8a:	9307      	strge	r3, [sp, #28]
 8006f8c:	9307      	strlt	r3, [sp, #28]
 8006f8e:	bfb8      	it	lt
 8006f90:	9204      	strlt	r2, [sp, #16]
 8006f92:	7823      	ldrb	r3, [r4, #0]
 8006f94:	2b2e      	cmp	r3, #46	; 0x2e
 8006f96:	d10c      	bne.n	8006fb2 <_vfiprintf_r+0x176>
 8006f98:	7863      	ldrb	r3, [r4, #1]
 8006f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9c:	d135      	bne.n	800700a <_vfiprintf_r+0x1ce>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	1d1a      	adds	r2, r3, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	9203      	str	r2, [sp, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfb8      	it	lt
 8006faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fae:	3402      	adds	r4, #2
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007098 <_vfiprintf_r+0x25c>
 8006fb6:	7821      	ldrb	r1, [r4, #0]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	4650      	mov	r0, sl
 8006fbc:	f7f9 f918 	bl	80001f0 <memchr>
 8006fc0:	b140      	cbz	r0, 8006fd4 <_vfiprintf_r+0x198>
 8006fc2:	2340      	movs	r3, #64	; 0x40
 8006fc4:	eba0 000a 	sub.w	r0, r0, sl
 8006fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	4303      	orrs	r3, r0
 8006fd0:	3401      	adds	r4, #1
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd8:	482c      	ldr	r0, [pc, #176]	; (800708c <_vfiprintf_r+0x250>)
 8006fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fde:	2206      	movs	r2, #6
 8006fe0:	f7f9 f906 	bl	80001f0 <memchr>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d03f      	beq.n	8007068 <_vfiprintf_r+0x22c>
 8006fe8:	4b29      	ldr	r3, [pc, #164]	; (8007090 <_vfiprintf_r+0x254>)
 8006fea:	bb1b      	cbnz	r3, 8007034 <_vfiprintf_r+0x1f8>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	3307      	adds	r3, #7
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffa:	443b      	add	r3, r7
 8006ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffe:	e767      	b.n	8006ed0 <_vfiprintf_r+0x94>
 8007000:	fb0c 3202 	mla	r2, ip, r2, r3
 8007004:	460c      	mov	r4, r1
 8007006:	2001      	movs	r0, #1
 8007008:	e7a5      	b.n	8006f56 <_vfiprintf_r+0x11a>
 800700a:	2300      	movs	r3, #0
 800700c:	3401      	adds	r4, #1
 800700e:	9305      	str	r3, [sp, #20]
 8007010:	4619      	mov	r1, r3
 8007012:	f04f 0c0a 	mov.w	ip, #10
 8007016:	4620      	mov	r0, r4
 8007018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800701c:	3a30      	subs	r2, #48	; 0x30
 800701e:	2a09      	cmp	r2, #9
 8007020:	d903      	bls.n	800702a <_vfiprintf_r+0x1ee>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0c5      	beq.n	8006fb2 <_vfiprintf_r+0x176>
 8007026:	9105      	str	r1, [sp, #20]
 8007028:	e7c3      	b.n	8006fb2 <_vfiprintf_r+0x176>
 800702a:	fb0c 2101 	mla	r1, ip, r1, r2
 800702e:	4604      	mov	r4, r0
 8007030:	2301      	movs	r3, #1
 8007032:	e7f0      	b.n	8007016 <_vfiprintf_r+0x1da>
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <_vfiprintf_r+0x258>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	4630      	mov	r0, r6
 8007040:	f7fd fdc2 	bl	8004bc8 <_printf_float>
 8007044:	4607      	mov	r7, r0
 8007046:	1c78      	adds	r0, r7, #1
 8007048:	d1d6      	bne.n	8006ff8 <_vfiprintf_r+0x1bc>
 800704a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800704c:	07d9      	lsls	r1, r3, #31
 800704e:	d405      	bmi.n	800705c <_vfiprintf_r+0x220>
 8007050:	89ab      	ldrh	r3, [r5, #12]
 8007052:	059a      	lsls	r2, r3, #22
 8007054:	d402      	bmi.n	800705c <_vfiprintf_r+0x220>
 8007056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007058:	f000 faaf 	bl	80075ba <__retarget_lock_release_recursive>
 800705c:	89ab      	ldrh	r3, [r5, #12]
 800705e:	065b      	lsls	r3, r3, #25
 8007060:	f53f af12 	bmi.w	8006e88 <_vfiprintf_r+0x4c>
 8007064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007066:	e711      	b.n	8006e8c <_vfiprintf_r+0x50>
 8007068:	ab03      	add	r3, sp, #12
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	462a      	mov	r2, r5
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <_vfiprintf_r+0x258>)
 8007070:	a904      	add	r1, sp, #16
 8007072:	4630      	mov	r0, r6
 8007074:	f7fe f84c 	bl	8005110 <_printf_i>
 8007078:	e7e4      	b.n	8007044 <_vfiprintf_r+0x208>
 800707a:	bf00      	nop
 800707c:	08008aa4 	.word	0x08008aa4
 8007080:	08008ac4 	.word	0x08008ac4
 8007084:	08008a84 	.word	0x08008a84
 8007088:	0800892c 	.word	0x0800892c
 800708c:	08008936 	.word	0x08008936
 8007090:	08004bc9 	.word	0x08004bc9
 8007094:	08006e19 	.word	0x08006e19
 8007098:	08008932 	.word	0x08008932

0800709c <__swbuf_r>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	460e      	mov	r6, r1
 80070a0:	4614      	mov	r4, r2
 80070a2:	4605      	mov	r5, r0
 80070a4:	b118      	cbz	r0, 80070ae <__swbuf_r+0x12>
 80070a6:	6983      	ldr	r3, [r0, #24]
 80070a8:	b90b      	cbnz	r3, 80070ae <__swbuf_r+0x12>
 80070aa:	f000 f9e7 	bl	800747c <__sinit>
 80070ae:	4b21      	ldr	r3, [pc, #132]	; (8007134 <__swbuf_r+0x98>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d12b      	bne.n	800710c <__swbuf_r+0x70>
 80070b4:	686c      	ldr	r4, [r5, #4]
 80070b6:	69a3      	ldr	r3, [r4, #24]
 80070b8:	60a3      	str	r3, [r4, #8]
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	071a      	lsls	r2, r3, #28
 80070be:	d52f      	bpl.n	8007120 <__swbuf_r+0x84>
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	b36b      	cbz	r3, 8007120 <__swbuf_r+0x84>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	1ac0      	subs	r0, r0, r3
 80070ca:	6963      	ldr	r3, [r4, #20]
 80070cc:	b2f6      	uxtb	r6, r6
 80070ce:	4283      	cmp	r3, r0
 80070d0:	4637      	mov	r7, r6
 80070d2:	dc04      	bgt.n	80070de <__swbuf_r+0x42>
 80070d4:	4621      	mov	r1, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f93c 	bl	8007354 <_fflush_r>
 80070dc:	bb30      	cbnz	r0, 800712c <__swbuf_r+0x90>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	60a3      	str	r3, [r4, #8]
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	6022      	str	r2, [r4, #0]
 80070ea:	701e      	strb	r6, [r3, #0]
 80070ec:	6963      	ldr	r3, [r4, #20]
 80070ee:	3001      	adds	r0, #1
 80070f0:	4283      	cmp	r3, r0
 80070f2:	d004      	beq.n	80070fe <__swbuf_r+0x62>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	07db      	lsls	r3, r3, #31
 80070f8:	d506      	bpl.n	8007108 <__swbuf_r+0x6c>
 80070fa:	2e0a      	cmp	r6, #10
 80070fc:	d104      	bne.n	8007108 <__swbuf_r+0x6c>
 80070fe:	4621      	mov	r1, r4
 8007100:	4628      	mov	r0, r5
 8007102:	f000 f927 	bl	8007354 <_fflush_r>
 8007106:	b988      	cbnz	r0, 800712c <__swbuf_r+0x90>
 8007108:	4638      	mov	r0, r7
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <__swbuf_r+0x9c>)
 800710e:	429c      	cmp	r4, r3
 8007110:	d101      	bne.n	8007116 <__swbuf_r+0x7a>
 8007112:	68ac      	ldr	r4, [r5, #8]
 8007114:	e7cf      	b.n	80070b6 <__swbuf_r+0x1a>
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <__swbuf_r+0xa0>)
 8007118:	429c      	cmp	r4, r3
 800711a:	bf08      	it	eq
 800711c:	68ec      	ldreq	r4, [r5, #12]
 800711e:	e7ca      	b.n	80070b6 <__swbuf_r+0x1a>
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f81a 	bl	800715c <__swsetup_r>
 8007128:	2800      	cmp	r0, #0
 800712a:	d0cb      	beq.n	80070c4 <__swbuf_r+0x28>
 800712c:	f04f 37ff 	mov.w	r7, #4294967295
 8007130:	e7ea      	b.n	8007108 <__swbuf_r+0x6c>
 8007132:	bf00      	nop
 8007134:	08008aa4 	.word	0x08008aa4
 8007138:	08008ac4 	.word	0x08008ac4
 800713c:	08008a84 	.word	0x08008a84

08007140 <__ascii_wctomb>:
 8007140:	b149      	cbz	r1, 8007156 <__ascii_wctomb+0x16>
 8007142:	2aff      	cmp	r2, #255	; 0xff
 8007144:	bf85      	ittet	hi
 8007146:	238a      	movhi	r3, #138	; 0x8a
 8007148:	6003      	strhi	r3, [r0, #0]
 800714a:	700a      	strbls	r2, [r1, #0]
 800714c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007150:	bf98      	it	ls
 8007152:	2001      	movls	r0, #1
 8007154:	4770      	bx	lr
 8007156:	4608      	mov	r0, r1
 8007158:	4770      	bx	lr
	...

0800715c <__swsetup_r>:
 800715c:	4b32      	ldr	r3, [pc, #200]	; (8007228 <__swsetup_r+0xcc>)
 800715e:	b570      	push	{r4, r5, r6, lr}
 8007160:	681d      	ldr	r5, [r3, #0]
 8007162:	4606      	mov	r6, r0
 8007164:	460c      	mov	r4, r1
 8007166:	b125      	cbz	r5, 8007172 <__swsetup_r+0x16>
 8007168:	69ab      	ldr	r3, [r5, #24]
 800716a:	b913      	cbnz	r3, 8007172 <__swsetup_r+0x16>
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f985 	bl	800747c <__sinit>
 8007172:	4b2e      	ldr	r3, [pc, #184]	; (800722c <__swsetup_r+0xd0>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d10f      	bne.n	8007198 <__swsetup_r+0x3c>
 8007178:	686c      	ldr	r4, [r5, #4]
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007180:	0719      	lsls	r1, r3, #28
 8007182:	d42c      	bmi.n	80071de <__swsetup_r+0x82>
 8007184:	06dd      	lsls	r5, r3, #27
 8007186:	d411      	bmi.n	80071ac <__swsetup_r+0x50>
 8007188:	2309      	movs	r3, #9
 800718a:	6033      	str	r3, [r6, #0]
 800718c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	e03e      	b.n	8007216 <__swsetup_r+0xba>
 8007198:	4b25      	ldr	r3, [pc, #148]	; (8007230 <__swsetup_r+0xd4>)
 800719a:	429c      	cmp	r4, r3
 800719c:	d101      	bne.n	80071a2 <__swsetup_r+0x46>
 800719e:	68ac      	ldr	r4, [r5, #8]
 80071a0:	e7eb      	b.n	800717a <__swsetup_r+0x1e>
 80071a2:	4b24      	ldr	r3, [pc, #144]	; (8007234 <__swsetup_r+0xd8>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	bf08      	it	eq
 80071a8:	68ec      	ldreq	r4, [r5, #12]
 80071aa:	e7e6      	b.n	800717a <__swsetup_r+0x1e>
 80071ac:	0758      	lsls	r0, r3, #29
 80071ae:	d512      	bpl.n	80071d6 <__swsetup_r+0x7a>
 80071b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071b2:	b141      	cbz	r1, 80071c6 <__swsetup_r+0x6a>
 80071b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b8:	4299      	cmp	r1, r3
 80071ba:	d002      	beq.n	80071c2 <__swsetup_r+0x66>
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff fb31 	bl	8006824 <_free_r>
 80071c2:	2300      	movs	r3, #0
 80071c4:	6363      	str	r3, [r4, #52]	; 0x34
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	2300      	movs	r3, #0
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f043 0308 	orr.w	r3, r3, #8
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	b94b      	cbnz	r3, 80071f6 <__swsetup_r+0x9a>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ec:	d003      	beq.n	80071f6 <__swsetup_r+0x9a>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 fa09 	bl	8007608 <__smakebuf_r>
 80071f6:	89a0      	ldrh	r0, [r4, #12]
 80071f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fc:	f010 0301 	ands.w	r3, r0, #1
 8007200:	d00a      	beq.n	8007218 <__swsetup_r+0xbc>
 8007202:	2300      	movs	r3, #0
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	6963      	ldr	r3, [r4, #20]
 8007208:	425b      	negs	r3, r3
 800720a:	61a3      	str	r3, [r4, #24]
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	b943      	cbnz	r3, 8007222 <__swsetup_r+0xc6>
 8007210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007214:	d1ba      	bne.n	800718c <__swsetup_r+0x30>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	0781      	lsls	r1, r0, #30
 800721a:	bf58      	it	pl
 800721c:	6963      	ldrpl	r3, [r4, #20]
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	e7f4      	b.n	800720c <__swsetup_r+0xb0>
 8007222:	2000      	movs	r0, #0
 8007224:	e7f7      	b.n	8007216 <__swsetup_r+0xba>
 8007226:	bf00      	nop
 8007228:	2000000c 	.word	0x2000000c
 800722c:	08008aa4 	.word	0x08008aa4
 8007230:	08008ac4 	.word	0x08008ac4
 8007234:	08008a84 	.word	0x08008a84

08007238 <abort>:
 8007238:	b508      	push	{r3, lr}
 800723a:	2006      	movs	r0, #6
 800723c:	f000 fa54 	bl	80076e8 <raise>
 8007240:	2001      	movs	r0, #1
 8007242:	f7fa fabd 	bl	80017c0 <_exit>
	...

08007248 <__sflush_r>:
 8007248:	898a      	ldrh	r2, [r1, #12]
 800724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	4605      	mov	r5, r0
 8007250:	0710      	lsls	r0, r2, #28
 8007252:	460c      	mov	r4, r1
 8007254:	d458      	bmi.n	8007308 <__sflush_r+0xc0>
 8007256:	684b      	ldr	r3, [r1, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc05      	bgt.n	8007268 <__sflush_r+0x20>
 800725c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	dc02      	bgt.n	8007268 <__sflush_r+0x20>
 8007262:	2000      	movs	r0, #0
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800726a:	2e00      	cmp	r6, #0
 800726c:	d0f9      	beq.n	8007262 <__sflush_r+0x1a>
 800726e:	2300      	movs	r3, #0
 8007270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007274:	682f      	ldr	r7, [r5, #0]
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	d032      	beq.n	80072e0 <__sflush_r+0x98>
 800727a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	075a      	lsls	r2, r3, #29
 8007280:	d505      	bpl.n	800728e <__sflush_r+0x46>
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	1ac0      	subs	r0, r0, r3
 8007286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007288:	b10b      	cbz	r3, 800728e <__sflush_r+0x46>
 800728a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	2300      	movs	r3, #0
 8007290:	4602      	mov	r2, r0
 8007292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007294:	6a21      	ldr	r1, [r4, #32]
 8007296:	4628      	mov	r0, r5
 8007298:	47b0      	blx	r6
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	d106      	bne.n	80072ae <__sflush_r+0x66>
 80072a0:	6829      	ldr	r1, [r5, #0]
 80072a2:	291d      	cmp	r1, #29
 80072a4:	d82c      	bhi.n	8007300 <__sflush_r+0xb8>
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <__sflush_r+0x108>)
 80072a8:	40ca      	lsrs	r2, r1
 80072aa:	07d6      	lsls	r6, r2, #31
 80072ac:	d528      	bpl.n	8007300 <__sflush_r+0xb8>
 80072ae:	2200      	movs	r2, #0
 80072b0:	6062      	str	r2, [r4, #4]
 80072b2:	04d9      	lsls	r1, r3, #19
 80072b4:	6922      	ldr	r2, [r4, #16]
 80072b6:	6022      	str	r2, [r4, #0]
 80072b8:	d504      	bpl.n	80072c4 <__sflush_r+0x7c>
 80072ba:	1c42      	adds	r2, r0, #1
 80072bc:	d101      	bne.n	80072c2 <__sflush_r+0x7a>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b903      	cbnz	r3, 80072c4 <__sflush_r+0x7c>
 80072c2:	6560      	str	r0, [r4, #84]	; 0x54
 80072c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072c6:	602f      	str	r7, [r5, #0]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d0ca      	beq.n	8007262 <__sflush_r+0x1a>
 80072cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072d0:	4299      	cmp	r1, r3
 80072d2:	d002      	beq.n	80072da <__sflush_r+0x92>
 80072d4:	4628      	mov	r0, r5
 80072d6:	f7ff faa5 	bl	8006824 <_free_r>
 80072da:	2000      	movs	r0, #0
 80072dc:	6360      	str	r0, [r4, #52]	; 0x34
 80072de:	e7c1      	b.n	8007264 <__sflush_r+0x1c>
 80072e0:	6a21      	ldr	r1, [r4, #32]
 80072e2:	2301      	movs	r3, #1
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	1c41      	adds	r1, r0, #1
 80072ea:	d1c7      	bne.n	800727c <__sflush_r+0x34>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c4      	beq.n	800727c <__sflush_r+0x34>
 80072f2:	2b1d      	cmp	r3, #29
 80072f4:	d001      	beq.n	80072fa <__sflush_r+0xb2>
 80072f6:	2b16      	cmp	r3, #22
 80072f8:	d101      	bne.n	80072fe <__sflush_r+0xb6>
 80072fa:	602f      	str	r7, [r5, #0]
 80072fc:	e7b1      	b.n	8007262 <__sflush_r+0x1a>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	e7ad      	b.n	8007264 <__sflush_r+0x1c>
 8007308:	690f      	ldr	r7, [r1, #16]
 800730a:	2f00      	cmp	r7, #0
 800730c:	d0a9      	beq.n	8007262 <__sflush_r+0x1a>
 800730e:	0793      	lsls	r3, r2, #30
 8007310:	680e      	ldr	r6, [r1, #0]
 8007312:	bf08      	it	eq
 8007314:	694b      	ldreq	r3, [r1, #20]
 8007316:	600f      	str	r7, [r1, #0]
 8007318:	bf18      	it	ne
 800731a:	2300      	movne	r3, #0
 800731c:	eba6 0807 	sub.w	r8, r6, r7
 8007320:	608b      	str	r3, [r1, #8]
 8007322:	f1b8 0f00 	cmp.w	r8, #0
 8007326:	dd9c      	ble.n	8007262 <__sflush_r+0x1a>
 8007328:	6a21      	ldr	r1, [r4, #32]
 800732a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800732c:	4643      	mov	r3, r8
 800732e:	463a      	mov	r2, r7
 8007330:	4628      	mov	r0, r5
 8007332:	47b0      	blx	r6
 8007334:	2800      	cmp	r0, #0
 8007336:	dc06      	bgt.n	8007346 <__sflush_r+0xfe>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e78e      	b.n	8007264 <__sflush_r+0x1c>
 8007346:	4407      	add	r7, r0
 8007348:	eba8 0800 	sub.w	r8, r8, r0
 800734c:	e7e9      	b.n	8007322 <__sflush_r+0xda>
 800734e:	bf00      	nop
 8007350:	20400001 	.word	0x20400001

08007354 <_fflush_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	690b      	ldr	r3, [r1, #16]
 8007358:	4605      	mov	r5, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b913      	cbnz	r3, 8007364 <_fflush_r+0x10>
 800735e:	2500      	movs	r5, #0
 8007360:	4628      	mov	r0, r5
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	b118      	cbz	r0, 800736e <_fflush_r+0x1a>
 8007366:	6983      	ldr	r3, [r0, #24]
 8007368:	b90b      	cbnz	r3, 800736e <_fflush_r+0x1a>
 800736a:	f000 f887 	bl	800747c <__sinit>
 800736e:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <_fflush_r+0x6c>)
 8007370:	429c      	cmp	r4, r3
 8007372:	d11b      	bne.n	80073ac <_fflush_r+0x58>
 8007374:	686c      	ldr	r4, [r5, #4]
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0ef      	beq.n	800735e <_fflush_r+0xa>
 800737e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007380:	07d0      	lsls	r0, r2, #31
 8007382:	d404      	bmi.n	800738e <_fflush_r+0x3a>
 8007384:	0599      	lsls	r1, r3, #22
 8007386:	d402      	bmi.n	800738e <_fflush_r+0x3a>
 8007388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738a:	f000 f915 	bl	80075b8 <__retarget_lock_acquire_recursive>
 800738e:	4628      	mov	r0, r5
 8007390:	4621      	mov	r1, r4
 8007392:	f7ff ff59 	bl	8007248 <__sflush_r>
 8007396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007398:	07da      	lsls	r2, r3, #31
 800739a:	4605      	mov	r5, r0
 800739c:	d4e0      	bmi.n	8007360 <_fflush_r+0xc>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	d4dd      	bmi.n	8007360 <_fflush_r+0xc>
 80073a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a6:	f000 f908 	bl	80075ba <__retarget_lock_release_recursive>
 80073aa:	e7d9      	b.n	8007360 <_fflush_r+0xc>
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <_fflush_r+0x70>)
 80073ae:	429c      	cmp	r4, r3
 80073b0:	d101      	bne.n	80073b6 <_fflush_r+0x62>
 80073b2:	68ac      	ldr	r4, [r5, #8]
 80073b4:	e7df      	b.n	8007376 <_fflush_r+0x22>
 80073b6:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <_fflush_r+0x74>)
 80073b8:	429c      	cmp	r4, r3
 80073ba:	bf08      	it	eq
 80073bc:	68ec      	ldreq	r4, [r5, #12]
 80073be:	e7da      	b.n	8007376 <_fflush_r+0x22>
 80073c0:	08008aa4 	.word	0x08008aa4
 80073c4:	08008ac4 	.word	0x08008ac4
 80073c8:	08008a84 	.word	0x08008a84

080073cc <std>:
 80073cc:	2300      	movs	r3, #0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	4604      	mov	r4, r0
 80073d2:	e9c0 3300 	strd	r3, r3, [r0]
 80073d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073da:	6083      	str	r3, [r0, #8]
 80073dc:	8181      	strh	r1, [r0, #12]
 80073de:	6643      	str	r3, [r0, #100]	; 0x64
 80073e0:	81c2      	strh	r2, [r0, #14]
 80073e2:	6183      	str	r3, [r0, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2208      	movs	r2, #8
 80073e8:	305c      	adds	r0, #92	; 0x5c
 80073ea:	f7fd fb45 	bl	8004a78 <memset>
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x38>)
 80073f0:	6263      	str	r3, [r4, #36]	; 0x24
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <std+0x3c>)
 80073f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <std+0x40>)
 80073f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <std+0x44>)
 80073fc:	6224      	str	r4, [r4, #32]
 80073fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	08007721 	.word	0x08007721
 8007408:	08007743 	.word	0x08007743
 800740c:	0800777b 	.word	0x0800777b
 8007410:	0800779f 	.word	0x0800779f

08007414 <_cleanup_r>:
 8007414:	4901      	ldr	r1, [pc, #4]	; (800741c <_cleanup_r+0x8>)
 8007416:	f000 b8af 	b.w	8007578 <_fwalk_reent>
 800741a:	bf00      	nop
 800741c:	08007355 	.word	0x08007355

08007420 <__sfmoreglue>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	2268      	movs	r2, #104	; 0x68
 8007424:	1e4d      	subs	r5, r1, #1
 8007426:	4355      	muls	r5, r2
 8007428:	460e      	mov	r6, r1
 800742a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800742e:	f7ff fa65 	bl	80068fc <_malloc_r>
 8007432:	4604      	mov	r4, r0
 8007434:	b140      	cbz	r0, 8007448 <__sfmoreglue+0x28>
 8007436:	2100      	movs	r1, #0
 8007438:	e9c0 1600 	strd	r1, r6, [r0]
 800743c:	300c      	adds	r0, #12
 800743e:	60a0      	str	r0, [r4, #8]
 8007440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007444:	f7fd fb18 	bl	8004a78 <memset>
 8007448:	4620      	mov	r0, r4
 800744a:	bd70      	pop	{r4, r5, r6, pc}

0800744c <__sfp_lock_acquire>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__sfp_lock_acquire+0x8>)
 800744e:	f000 b8b3 	b.w	80075b8 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	2000034d 	.word	0x2000034d

08007458 <__sfp_lock_release>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__sfp_lock_release+0x8>)
 800745a:	f000 b8ae 	b.w	80075ba <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	2000034d 	.word	0x2000034d

08007464 <__sinit_lock_acquire>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__sinit_lock_acquire+0x8>)
 8007466:	f000 b8a7 	b.w	80075b8 <__retarget_lock_acquire_recursive>
 800746a:	bf00      	nop
 800746c:	2000034e 	.word	0x2000034e

08007470 <__sinit_lock_release>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__sinit_lock_release+0x8>)
 8007472:	f000 b8a2 	b.w	80075ba <__retarget_lock_release_recursive>
 8007476:	bf00      	nop
 8007478:	2000034e 	.word	0x2000034e

0800747c <__sinit>:
 800747c:	b510      	push	{r4, lr}
 800747e:	4604      	mov	r4, r0
 8007480:	f7ff fff0 	bl	8007464 <__sinit_lock_acquire>
 8007484:	69a3      	ldr	r3, [r4, #24]
 8007486:	b11b      	cbz	r3, 8007490 <__sinit+0x14>
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	f7ff bff0 	b.w	8007470 <__sinit_lock_release>
 8007490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007494:	6523      	str	r3, [r4, #80]	; 0x50
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <__sinit+0x68>)
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <__sinit+0x6c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	62a2      	str	r2, [r4, #40]	; 0x28
 800749e:	42a3      	cmp	r3, r4
 80074a0:	bf04      	itt	eq
 80074a2:	2301      	moveq	r3, #1
 80074a4:	61a3      	streq	r3, [r4, #24]
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f820 	bl	80074ec <__sfp>
 80074ac:	6060      	str	r0, [r4, #4]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f81c 	bl	80074ec <__sfp>
 80074b4:	60a0      	str	r0, [r4, #8]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 f818 	bl	80074ec <__sfp>
 80074bc:	2200      	movs	r2, #0
 80074be:	60e0      	str	r0, [r4, #12]
 80074c0:	2104      	movs	r1, #4
 80074c2:	6860      	ldr	r0, [r4, #4]
 80074c4:	f7ff ff82 	bl	80073cc <std>
 80074c8:	68a0      	ldr	r0, [r4, #8]
 80074ca:	2201      	movs	r2, #1
 80074cc:	2109      	movs	r1, #9
 80074ce:	f7ff ff7d 	bl	80073cc <std>
 80074d2:	68e0      	ldr	r0, [r4, #12]
 80074d4:	2202      	movs	r2, #2
 80074d6:	2112      	movs	r1, #18
 80074d8:	f7ff ff78 	bl	80073cc <std>
 80074dc:	2301      	movs	r3, #1
 80074de:	61a3      	str	r3, [r4, #24]
 80074e0:	e7d2      	b.n	8007488 <__sinit+0xc>
 80074e2:	bf00      	nop
 80074e4:	0800870c 	.word	0x0800870c
 80074e8:	08007415 	.word	0x08007415

080074ec <__sfp>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	4607      	mov	r7, r0
 80074f0:	f7ff ffac 	bl	800744c <__sfp_lock_acquire>
 80074f4:	4b1e      	ldr	r3, [pc, #120]	; (8007570 <__sfp+0x84>)
 80074f6:	681e      	ldr	r6, [r3, #0]
 80074f8:	69b3      	ldr	r3, [r6, #24]
 80074fa:	b913      	cbnz	r3, 8007502 <__sfp+0x16>
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff ffbd 	bl	800747c <__sinit>
 8007502:	3648      	adds	r6, #72	; 0x48
 8007504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007508:	3b01      	subs	r3, #1
 800750a:	d503      	bpl.n	8007514 <__sfp+0x28>
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	b30b      	cbz	r3, 8007554 <__sfp+0x68>
 8007510:	6836      	ldr	r6, [r6, #0]
 8007512:	e7f7      	b.n	8007504 <__sfp+0x18>
 8007514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007518:	b9d5      	cbnz	r5, 8007550 <__sfp+0x64>
 800751a:	4b16      	ldr	r3, [pc, #88]	; (8007574 <__sfp+0x88>)
 800751c:	60e3      	str	r3, [r4, #12]
 800751e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007522:	6665      	str	r5, [r4, #100]	; 0x64
 8007524:	f000 f847 	bl	80075b6 <__retarget_lock_init_recursive>
 8007528:	f7ff ff96 	bl	8007458 <__sfp_lock_release>
 800752c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007534:	6025      	str	r5, [r4, #0]
 8007536:	61a5      	str	r5, [r4, #24]
 8007538:	2208      	movs	r2, #8
 800753a:	4629      	mov	r1, r5
 800753c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007540:	f7fd fa9a 	bl	8004a78 <memset>
 8007544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800754c:	4620      	mov	r0, r4
 800754e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007550:	3468      	adds	r4, #104	; 0x68
 8007552:	e7d9      	b.n	8007508 <__sfp+0x1c>
 8007554:	2104      	movs	r1, #4
 8007556:	4638      	mov	r0, r7
 8007558:	f7ff ff62 	bl	8007420 <__sfmoreglue>
 800755c:	4604      	mov	r4, r0
 800755e:	6030      	str	r0, [r6, #0]
 8007560:	2800      	cmp	r0, #0
 8007562:	d1d5      	bne.n	8007510 <__sfp+0x24>
 8007564:	f7ff ff78 	bl	8007458 <__sfp_lock_release>
 8007568:	230c      	movs	r3, #12
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	e7ee      	b.n	800754c <__sfp+0x60>
 800756e:	bf00      	nop
 8007570:	0800870c 	.word	0x0800870c
 8007574:	ffff0001 	.word	0xffff0001

08007578 <_fwalk_reent>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4606      	mov	r6, r0
 800757e:	4688      	mov	r8, r1
 8007580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007584:	2700      	movs	r7, #0
 8007586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800758a:	f1b9 0901 	subs.w	r9, r9, #1
 800758e:	d505      	bpl.n	800759c <_fwalk_reent+0x24>
 8007590:	6824      	ldr	r4, [r4, #0]
 8007592:	2c00      	cmp	r4, #0
 8007594:	d1f7      	bne.n	8007586 <_fwalk_reent+0xe>
 8007596:	4638      	mov	r0, r7
 8007598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759c:	89ab      	ldrh	r3, [r5, #12]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d907      	bls.n	80075b2 <_fwalk_reent+0x3a>
 80075a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a6:	3301      	adds	r3, #1
 80075a8:	d003      	beq.n	80075b2 <_fwalk_reent+0x3a>
 80075aa:	4629      	mov	r1, r5
 80075ac:	4630      	mov	r0, r6
 80075ae:	47c0      	blx	r8
 80075b0:	4307      	orrs	r7, r0
 80075b2:	3568      	adds	r5, #104	; 0x68
 80075b4:	e7e9      	b.n	800758a <_fwalk_reent+0x12>

080075b6 <__retarget_lock_init_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__retarget_lock_acquire_recursive>:
 80075b8:	4770      	bx	lr

080075ba <__retarget_lock_release_recursive>:
 80075ba:	4770      	bx	lr

080075bc <__swhatbuf_r>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c4:	2900      	cmp	r1, #0
 80075c6:	b096      	sub	sp, #88	; 0x58
 80075c8:	4614      	mov	r4, r2
 80075ca:	461d      	mov	r5, r3
 80075cc:	da08      	bge.n	80075e0 <__swhatbuf_r+0x24>
 80075ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	061a      	lsls	r2, r3, #24
 80075d8:	d410      	bmi.n	80075fc <__swhatbuf_r+0x40>
 80075da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075de:	e00e      	b.n	80075fe <__swhatbuf_r+0x42>
 80075e0:	466a      	mov	r2, sp
 80075e2:	f000 f903 	bl	80077ec <_fstat_r>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	dbf1      	blt.n	80075ce <__swhatbuf_r+0x12>
 80075ea:	9a01      	ldr	r2, [sp, #4]
 80075ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075f4:	425a      	negs	r2, r3
 80075f6:	415a      	adcs	r2, r3
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	e7ee      	b.n	80075da <__swhatbuf_r+0x1e>
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	2000      	movs	r0, #0
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	b016      	add	sp, #88	; 0x58
 8007604:	bd70      	pop	{r4, r5, r6, pc}
	...

08007608 <__smakebuf_r>:
 8007608:	898b      	ldrh	r3, [r1, #12]
 800760a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800760c:	079d      	lsls	r5, r3, #30
 800760e:	4606      	mov	r6, r0
 8007610:	460c      	mov	r4, r1
 8007612:	d507      	bpl.n	8007624 <__smakebuf_r+0x1c>
 8007614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	2301      	movs	r3, #1
 800761e:	6163      	str	r3, [r4, #20]
 8007620:	b002      	add	sp, #8
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	ab01      	add	r3, sp, #4
 8007626:	466a      	mov	r2, sp
 8007628:	f7ff ffc8 	bl	80075bc <__swhatbuf_r>
 800762c:	9900      	ldr	r1, [sp, #0]
 800762e:	4605      	mov	r5, r0
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff f963 	bl	80068fc <_malloc_r>
 8007636:	b948      	cbnz	r0, 800764c <__smakebuf_r+0x44>
 8007638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763c:	059a      	lsls	r2, r3, #22
 800763e:	d4ef      	bmi.n	8007620 <__smakebuf_r+0x18>
 8007640:	f023 0303 	bic.w	r3, r3, #3
 8007644:	f043 0302 	orr.w	r3, r3, #2
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	e7e3      	b.n	8007614 <__smakebuf_r+0xc>
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <__smakebuf_r+0x7c>)
 800764e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	6020      	str	r0, [r4, #0]
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	9b00      	ldr	r3, [sp, #0]
 800765c:	6163      	str	r3, [r4, #20]
 800765e:	9b01      	ldr	r3, [sp, #4]
 8007660:	6120      	str	r0, [r4, #16]
 8007662:	b15b      	cbz	r3, 800767c <__smakebuf_r+0x74>
 8007664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f8d1 	bl	8007810 <_isatty_r>
 800766e:	b128      	cbz	r0, 800767c <__smakebuf_r+0x74>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	89a0      	ldrh	r0, [r4, #12]
 800767e:	4305      	orrs	r5, r0
 8007680:	81a5      	strh	r5, [r4, #12]
 8007682:	e7cd      	b.n	8007620 <__smakebuf_r+0x18>
 8007684:	08007415 	.word	0x08007415

08007688 <_malloc_usable_size_r>:
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f18      	subs	r0, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbc      	itt	lt
 8007692:	580b      	ldrlt	r3, [r1, r0]
 8007694:	18c0      	addlt	r0, r0, r3
 8007696:	4770      	bx	lr

08007698 <_raise_r>:
 8007698:	291f      	cmp	r1, #31
 800769a:	b538      	push	{r3, r4, r5, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	460d      	mov	r5, r1
 80076a0:	d904      	bls.n	80076ac <_raise_r+0x14>
 80076a2:	2316      	movs	r3, #22
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076ae:	b112      	cbz	r2, 80076b6 <_raise_r+0x1e>
 80076b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b4:	b94b      	cbnz	r3, 80076ca <_raise_r+0x32>
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f830 	bl	800771c <_getpid_r>
 80076bc:	462a      	mov	r2, r5
 80076be:	4601      	mov	r1, r0
 80076c0:	4620      	mov	r0, r4
 80076c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c6:	f000 b817 	b.w	80076f8 <_kill_r>
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d00a      	beq.n	80076e4 <_raise_r+0x4c>
 80076ce:	1c59      	adds	r1, r3, #1
 80076d0:	d103      	bne.n	80076da <_raise_r+0x42>
 80076d2:	2316      	movs	r3, #22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	2001      	movs	r0, #1
 80076d8:	e7e7      	b.n	80076aa <_raise_r+0x12>
 80076da:	2400      	movs	r4, #0
 80076dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076e0:	4628      	mov	r0, r5
 80076e2:	4798      	blx	r3
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7e0      	b.n	80076aa <_raise_r+0x12>

080076e8 <raise>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <raise+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7ff bfd3 	b.w	8007698 <_raise_r>
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c

080076f8 <_kill_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	; (8007718 <_kill_r+0x20>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	f7fa f84b 	bl	80017a0 <_kill>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d102      	bne.n	8007714 <_kill_r+0x1c>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b103      	cbz	r3, 8007714 <_kill_r+0x1c>
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	bf00      	nop
 8007718:	20000348 	.word	0x20000348

0800771c <_getpid_r>:
 800771c:	f7fa b838 	b.w	8001790 <_getpid>

08007720 <__sread>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	f000 f894 	bl	8007854 <_read_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	bfab      	itete	ge
 8007730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007732:	89a3      	ldrhlt	r3, [r4, #12]
 8007734:	181b      	addge	r3, r3, r0
 8007736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800773a:	bfac      	ite	ge
 800773c:	6563      	strge	r3, [r4, #84]	; 0x54
 800773e:	81a3      	strhlt	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__swrite>:
 8007742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	461f      	mov	r7, r3
 8007748:	898b      	ldrh	r3, [r1, #12]
 800774a:	05db      	lsls	r3, r3, #23
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	4616      	mov	r6, r2
 8007752:	d505      	bpl.n	8007760 <__swrite+0x1e>
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2302      	movs	r3, #2
 800775a:	2200      	movs	r2, #0
 800775c:	f000 f868 	bl	8007830 <_lseek_r>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	f000 b817 	b.w	80077a8 <_write_r>

0800777a <__sseek>:
 800777a:	b510      	push	{r4, lr}
 800777c:	460c      	mov	r4, r1
 800777e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007782:	f000 f855 	bl	8007830 <_lseek_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	bf15      	itete	ne
 800778c:	6560      	strne	r0, [r4, #84]	; 0x54
 800778e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007796:	81a3      	strheq	r3, [r4, #12]
 8007798:	bf18      	it	ne
 800779a:	81a3      	strhne	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__sclose>:
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 b813 	b.w	80077cc <_close_r>
	...

080077a8 <_write_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	; (80077c8 <_write_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fa f829 	bl	800180e <_write>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_write_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_write_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000348 	.word	0x20000348

080077cc <_close_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_close_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fa f835 	bl	8001846 <_close>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_close_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_close_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000348 	.word	0x20000348

080077ec <_fstat_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_fstat_r+0x20>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	f7fa f830 	bl	800185e <_fstat>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d102      	bne.n	8007808 <_fstat_r+0x1c>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	b103      	cbz	r3, 8007808 <_fstat_r+0x1c>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	bf00      	nop
 800780c:	20000348 	.word	0x20000348

08007810 <_isatty_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	; (800782c <_isatty_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7fa f82f 	bl	800187e <_isatty>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_isatty_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_isatty_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000348 	.word	0x20000348

08007830 <_lseek_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	; (8007850 <_lseek_r+0x20>)
 8007834:	4604      	mov	r4, r0
 8007836:	4608      	mov	r0, r1
 8007838:	4611      	mov	r1, r2
 800783a:	2200      	movs	r2, #0
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f7fa f828 	bl	8001894 <_lseek>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_lseek_r+0x1e>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_lseek_r+0x1e>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000348 	.word	0x20000348

08007854 <_read_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d07      	ldr	r5, [pc, #28]	; (8007874 <_read_r+0x20>)
 8007858:	4604      	mov	r4, r0
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	2200      	movs	r2, #0
 8007860:	602a      	str	r2, [r5, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	f7f9 ffb6 	bl	80017d4 <_read>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_read_r+0x1e>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_read_r+0x1e>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000348 	.word	0x20000348

08007878 <pow>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	ed2d 8b02 	vpush	{d8}
 800787e:	eeb0 8a40 	vmov.f32	s16, s0
 8007882:	eef0 8a60 	vmov.f32	s17, s1
 8007886:	ec55 4b11 	vmov	r4, r5, d1
 800788a:	f000 f865 	bl	8007958 <__ieee754_pow>
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	ec57 6b10 	vmov	r6, r7, d0
 800789a:	f7f9 f94f 	bl	8000b3c <__aeabi_dcmpun>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d13b      	bne.n	800791a <pow+0xa2>
 80078a2:	ec51 0b18 	vmov	r0, r1, d8
 80078a6:	2200      	movs	r2, #0
 80078a8:	2300      	movs	r3, #0
 80078aa:	f7f9 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ae:	b1b8      	cbz	r0, 80078e0 <pow+0x68>
 80078b0:	2200      	movs	r2, #0
 80078b2:	2300      	movs	r3, #0
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f7f9 f90e 	bl	8000ad8 <__aeabi_dcmpeq>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d146      	bne.n	800794e <pow+0xd6>
 80078c0:	ec45 4b10 	vmov	d0, r4, r5
 80078c4:	f000 fe61 	bl	800858a <finite>
 80078c8:	b338      	cbz	r0, 800791a <pow+0xa2>
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f9 f90b 	bl	8000aec <__aeabi_dcmplt>
 80078d6:	b300      	cbz	r0, 800791a <pow+0xa2>
 80078d8:	f7fd f8a4 	bl	8004a24 <__errno>
 80078dc:	2322      	movs	r3, #34	; 0x22
 80078de:	e01b      	b.n	8007918 <pow+0xa0>
 80078e0:	ec47 6b10 	vmov	d0, r6, r7
 80078e4:	f000 fe51 	bl	800858a <finite>
 80078e8:	b9e0      	cbnz	r0, 8007924 <pow+0xac>
 80078ea:	eeb0 0a48 	vmov.f32	s0, s16
 80078ee:	eef0 0a68 	vmov.f32	s1, s17
 80078f2:	f000 fe4a 	bl	800858a <finite>
 80078f6:	b1a8      	cbz	r0, 8007924 <pow+0xac>
 80078f8:	ec45 4b10 	vmov	d0, r4, r5
 80078fc:	f000 fe45 	bl	800858a <finite>
 8007900:	b180      	cbz	r0, 8007924 <pow+0xac>
 8007902:	4632      	mov	r2, r6
 8007904:	463b      	mov	r3, r7
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f9 f917 	bl	8000b3c <__aeabi_dcmpun>
 800790e:	2800      	cmp	r0, #0
 8007910:	d0e2      	beq.n	80078d8 <pow+0x60>
 8007912:	f7fd f887 	bl	8004a24 <__errno>
 8007916:	2321      	movs	r3, #33	; 0x21
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	ecbd 8b02 	vpop	{d8}
 800791e:	ec47 6b10 	vmov	d0, r6, r7
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	4630      	mov	r0, r6
 800792a:	4639      	mov	r1, r7
 800792c:	f7f9 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0f2      	beq.n	800791a <pow+0xa2>
 8007934:	eeb0 0a48 	vmov.f32	s0, s16
 8007938:	eef0 0a68 	vmov.f32	s1, s17
 800793c:	f000 fe25 	bl	800858a <finite>
 8007940:	2800      	cmp	r0, #0
 8007942:	d0ea      	beq.n	800791a <pow+0xa2>
 8007944:	ec45 4b10 	vmov	d0, r4, r5
 8007948:	f000 fe1f 	bl	800858a <finite>
 800794c:	e7c3      	b.n	80078d6 <pow+0x5e>
 800794e:	4f01      	ldr	r7, [pc, #4]	; (8007954 <pow+0xdc>)
 8007950:	2600      	movs	r6, #0
 8007952:	e7e2      	b.n	800791a <pow+0xa2>
 8007954:	3ff00000 	.word	0x3ff00000

08007958 <__ieee754_pow>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	ed2d 8b06 	vpush	{d8-d10}
 8007960:	b089      	sub	sp, #36	; 0x24
 8007962:	ed8d 1b00 	vstr	d1, [sp]
 8007966:	e9dd 2900 	ldrd	r2, r9, [sp]
 800796a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800796e:	ea58 0102 	orrs.w	r1, r8, r2
 8007972:	ec57 6b10 	vmov	r6, r7, d0
 8007976:	d115      	bne.n	80079a4 <__ieee754_pow+0x4c>
 8007978:	19b3      	adds	r3, r6, r6
 800797a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800797e:	4152      	adcs	r2, r2
 8007980:	4299      	cmp	r1, r3
 8007982:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <__ieee754_pow+0x250>)
 8007984:	4193      	sbcs	r3, r2
 8007986:	f080 84d2 	bcs.w	800832e <__ieee754_pow+0x9d6>
 800798a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fc83 	bl	800029c <__adddf3>
 8007996:	ec41 0b10 	vmov	d0, r0, r1
 800799a:	b009      	add	sp, #36	; 0x24
 800799c:	ecbd 8b06 	vpop	{d8-d10}
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	4b81      	ldr	r3, [pc, #516]	; (8007bac <__ieee754_pow+0x254>)
 80079a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80079aa:	429c      	cmp	r4, r3
 80079ac:	ee10 aa10 	vmov	sl, s0
 80079b0:	463d      	mov	r5, r7
 80079b2:	dc06      	bgt.n	80079c2 <__ieee754_pow+0x6a>
 80079b4:	d101      	bne.n	80079ba <__ieee754_pow+0x62>
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	d1e7      	bne.n	800798a <__ieee754_pow+0x32>
 80079ba:	4598      	cmp	r8, r3
 80079bc:	dc01      	bgt.n	80079c2 <__ieee754_pow+0x6a>
 80079be:	d10f      	bne.n	80079e0 <__ieee754_pow+0x88>
 80079c0:	b172      	cbz	r2, 80079e0 <__ieee754_pow+0x88>
 80079c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80079c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80079ca:	ea55 050a 	orrs.w	r5, r5, sl
 80079ce:	d1dc      	bne.n	800798a <__ieee754_pow+0x32>
 80079d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079d4:	18db      	adds	r3, r3, r3
 80079d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80079da:	4152      	adcs	r2, r2
 80079dc:	429d      	cmp	r5, r3
 80079de:	e7d0      	b.n	8007982 <__ieee754_pow+0x2a>
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	da3b      	bge.n	8007a5c <__ieee754_pow+0x104>
 80079e4:	4b72      	ldr	r3, [pc, #456]	; (8007bb0 <__ieee754_pow+0x258>)
 80079e6:	4598      	cmp	r8, r3
 80079e8:	dc51      	bgt.n	8007a8e <__ieee754_pow+0x136>
 80079ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80079ee:	4598      	cmp	r8, r3
 80079f0:	f340 84ac 	ble.w	800834c <__ieee754_pow+0x9f4>
 80079f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079fc:	2b14      	cmp	r3, #20
 80079fe:	dd0f      	ble.n	8007a20 <__ieee754_pow+0xc8>
 8007a00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a04:	fa22 f103 	lsr.w	r1, r2, r3
 8007a08:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	f040 849d 	bne.w	800834c <__ieee754_pow+0x9f4>
 8007a12:	f001 0101 	and.w	r1, r1, #1
 8007a16:	f1c1 0302 	rsb	r3, r1, #2
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	b182      	cbz	r2, 8007a40 <__ieee754_pow+0xe8>
 8007a1e:	e05f      	b.n	8007ae0 <__ieee754_pow+0x188>
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d15b      	bne.n	8007adc <__ieee754_pow+0x184>
 8007a24:	f1c3 0314 	rsb	r3, r3, #20
 8007a28:	fa48 f103 	asr.w	r1, r8, r3
 8007a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a30:	4543      	cmp	r3, r8
 8007a32:	f040 8488 	bne.w	8008346 <__ieee754_pow+0x9ee>
 8007a36:	f001 0101 	and.w	r1, r1, #1
 8007a3a:	f1c1 0302 	rsb	r3, r1, #2
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	4b5c      	ldr	r3, [pc, #368]	; (8007bb4 <__ieee754_pow+0x25c>)
 8007a42:	4598      	cmp	r8, r3
 8007a44:	d132      	bne.n	8007aac <__ieee754_pow+0x154>
 8007a46:	f1b9 0f00 	cmp.w	r9, #0
 8007a4a:	f280 8478 	bge.w	800833e <__ieee754_pow+0x9e6>
 8007a4e:	4959      	ldr	r1, [pc, #356]	; (8007bb4 <__ieee754_pow+0x25c>)
 8007a50:	4632      	mov	r2, r6
 8007a52:	463b      	mov	r3, r7
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7f8 ff01 	bl	800085c <__aeabi_ddiv>
 8007a5a:	e79c      	b.n	8007996 <__ieee754_pow+0x3e>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d13d      	bne.n	8007ae0 <__ieee754_pow+0x188>
 8007a64:	4b51      	ldr	r3, [pc, #324]	; (8007bac <__ieee754_pow+0x254>)
 8007a66:	4598      	cmp	r8, r3
 8007a68:	d1ea      	bne.n	8007a40 <__ieee754_pow+0xe8>
 8007a6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007a6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007a72:	ea53 030a 	orrs.w	r3, r3, sl
 8007a76:	f000 845a 	beq.w	800832e <__ieee754_pow+0x9d6>
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <__ieee754_pow+0x260>)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	dd08      	ble.n	8007a92 <__ieee754_pow+0x13a>
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	f2c0 8457 	blt.w	8008336 <__ieee754_pow+0x9de>
 8007a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a8c:	e783      	b.n	8007996 <__ieee754_pow+0x3e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e7e5      	b.n	8007a5e <__ieee754_pow+0x106>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	f04f 0000 	mov.w	r0, #0
 8007a9a:	f04f 0100 	mov.w	r1, #0
 8007a9e:	f6bf af7a 	bge.w	8007996 <__ieee754_pow+0x3e>
 8007aa2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007aa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007aaa:	e774      	b.n	8007996 <__ieee754_pow+0x3e>
 8007aac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007ab0:	d106      	bne.n	8007ac0 <__ieee754_pow+0x168>
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f8 fda5 	bl	8000608 <__aeabi_dmul>
 8007abe:	e76a      	b.n	8007996 <__ieee754_pow+0x3e>
 8007ac0:	4b3e      	ldr	r3, [pc, #248]	; (8007bbc <__ieee754_pow+0x264>)
 8007ac2:	4599      	cmp	r9, r3
 8007ac4:	d10c      	bne.n	8007ae0 <__ieee754_pow+0x188>
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	db0a      	blt.n	8007ae0 <__ieee754_pow+0x188>
 8007aca:	ec47 6b10 	vmov	d0, r6, r7
 8007ace:	b009      	add	sp, #36	; 0x24
 8007ad0:	ecbd 8b06 	vpop	{d8-d10}
 8007ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	f000 bc6c 	b.w	80083b4 <__ieee754_sqrt>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	ec47 6b10 	vmov	d0, r6, r7
 8007ae4:	f000 fd48 	bl	8008578 <fabs>
 8007ae8:	ec51 0b10 	vmov	r0, r1, d0
 8007aec:	f1ba 0f00 	cmp.w	sl, #0
 8007af0:	d129      	bne.n	8007b46 <__ieee754_pow+0x1ee>
 8007af2:	b124      	cbz	r4, 8007afe <__ieee754_pow+0x1a6>
 8007af4:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <__ieee754_pow+0x25c>)
 8007af6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d123      	bne.n	8007b46 <__ieee754_pow+0x1ee>
 8007afe:	f1b9 0f00 	cmp.w	r9, #0
 8007b02:	da05      	bge.n	8007b10 <__ieee754_pow+0x1b8>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	2000      	movs	r0, #0
 8007b0a:	492a      	ldr	r1, [pc, #168]	; (8007bb4 <__ieee754_pow+0x25c>)
 8007b0c:	f7f8 fea6 	bl	800085c <__aeabi_ddiv>
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	f6bf af40 	bge.w	8007996 <__ieee754_pow+0x3e>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b20:	4323      	orrs	r3, r4
 8007b22:	d108      	bne.n	8007b36 <__ieee754_pow+0x1de>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7f8 fbb4 	bl	8000298 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e78f      	b.n	8007a56 <__ieee754_pow+0xfe>
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f47f af2c 	bne.w	8007996 <__ieee754_pow+0x3e>
 8007b3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b42:	4619      	mov	r1, r3
 8007b44:	e727      	b.n	8007996 <__ieee754_pow+0x3e>
 8007b46:	0feb      	lsrs	r3, r5, #31
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	9306      	str	r3, [sp, #24]
 8007b4c:	9a06      	ldr	r2, [sp, #24]
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	d102      	bne.n	8007b5a <__ieee754_pow+0x202>
 8007b54:	4632      	mov	r2, r6
 8007b56:	463b      	mov	r3, r7
 8007b58:	e7e6      	b.n	8007b28 <__ieee754_pow+0x1d0>
 8007b5a:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <__ieee754_pow+0x268>)
 8007b5c:	4598      	cmp	r8, r3
 8007b5e:	f340 80fb 	ble.w	8007d58 <__ieee754_pow+0x400>
 8007b62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007b66:	4598      	cmp	r8, r3
 8007b68:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <__ieee754_pow+0x260>)
 8007b6a:	dd0c      	ble.n	8007b86 <__ieee754_pow+0x22e>
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	dc0f      	bgt.n	8007b90 <__ieee754_pow+0x238>
 8007b70:	f1b9 0f00 	cmp.w	r9, #0
 8007b74:	da0f      	bge.n	8007b96 <__ieee754_pow+0x23e>
 8007b76:	2000      	movs	r0, #0
 8007b78:	b009      	add	sp, #36	; 0x24
 8007b7a:	ecbd 8b06 	vpop	{d8-d10}
 8007b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b82:	f000 bcf0 	b.w	8008566 <__math_oflow>
 8007b86:	429c      	cmp	r4, r3
 8007b88:	dbf2      	blt.n	8007b70 <__ieee754_pow+0x218>
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <__ieee754_pow+0x25c>)
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	dd19      	ble.n	8007bc4 <__ieee754_pow+0x26c>
 8007b90:	f1b9 0f00 	cmp.w	r9, #0
 8007b94:	dcef      	bgt.n	8007b76 <__ieee754_pow+0x21e>
 8007b96:	2000      	movs	r0, #0
 8007b98:	b009      	add	sp, #36	; 0x24
 8007b9a:	ecbd 8b06 	vpop	{d8-d10}
 8007b9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba2:	f000 bcd7 	b.w	8008554 <__math_uflow>
 8007ba6:	bf00      	nop
 8007ba8:	fff00000 	.word	0xfff00000
 8007bac:	7ff00000 	.word	0x7ff00000
 8007bb0:	433fffff 	.word	0x433fffff
 8007bb4:	3ff00000 	.word	0x3ff00000
 8007bb8:	3fefffff 	.word	0x3fefffff
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	41e00000 	.word	0x41e00000
 8007bc4:	4b60      	ldr	r3, [pc, #384]	; (8007d48 <__ieee754_pow+0x3f0>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f7f8 fb66 	bl	8000298 <__aeabi_dsub>
 8007bcc:	a354      	add	r3, pc, #336	; (adr r3, 8007d20 <__ieee754_pow+0x3c8>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	f7f8 fd17 	bl	8000608 <__aeabi_dmul>
 8007bda:	a353      	add	r3, pc, #332	; (adr r3, 8007d28 <__ieee754_pow+0x3d0>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	4606      	mov	r6, r0
 8007be2:	460f      	mov	r7, r1
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	4b57      	ldr	r3, [pc, #348]	; (8007d4c <__ieee754_pow+0x3f4>)
 8007bee:	4682      	mov	sl, r0
 8007bf0:	468b      	mov	fp, r1
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	a14b      	add	r1, pc, #300	; (adr r1, 8007d30 <__ieee754_pow+0x3d8>)
 8007c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c06:	f7f8 fb47 	bl	8000298 <__aeabi_dsub>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	2000      	movs	r0, #0
 8007c18:	494d      	ldr	r1, [pc, #308]	; (8007d50 <__ieee754_pow+0x3f8>)
 8007c1a:	f7f8 fb3d 	bl	8000298 <__aeabi_dsub>
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4680      	mov	r8, r0
 8007c22:	4689      	mov	r9, r1
 8007c24:	462b      	mov	r3, r5
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fced 	bl	8000608 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fce7 	bl	8000608 <__aeabi_dmul>
 8007c3a:	a33f      	add	r3, pc, #252	; (adr r3, 8007d38 <__ieee754_pow+0x3e0>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4650      	mov	r0, sl
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	f7f8 fb24 	bl	8000298 <__aeabi_dsub>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 fb1e 	bl	800029c <__adddf3>
 8007c60:	2000      	movs	r0, #0
 8007c62:	4632      	mov	r2, r6
 8007c64:	463b      	mov	r3, r7
 8007c66:	4604      	mov	r4, r0
 8007c68:	460d      	mov	r5, r1
 8007c6a:	f7f8 fb15 	bl	8000298 <__aeabi_dsub>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fb0f 	bl	8000298 <__aeabi_dsub>
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	9a06      	ldr	r2, [sp, #24]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	f040 81e7 	bne.w	8008058 <__ieee754_pow+0x700>
 8007c8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007d40 <__ieee754_pow+0x3e8>
 8007c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8007c92:	eef0 8a67 	vmov.f32	s17, s15
 8007c96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca4:	f7f8 faf8 	bl	8000298 <__aeabi_dsub>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	462b      	mov	r3, r5
 8007cac:	f7f8 fcac 	bl	8000608 <__aeabi_dmul>
 8007cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	f7f8 fca4 	bl	8000608 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 fae8 	bl	800029c <__adddf3>
 8007ccc:	4632      	mov	r2, r6
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	f7f8 fad8 	bl	800029c <__adddf3>
 8007cec:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <__ieee754_pow+0x3fc>)
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	ec45 4b19 	vmov	d9, r4, r5
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	f340 82f1 	ble.w	80082e0 <__ieee754_pow+0x988>
 8007cfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d06:	4303      	orrs	r3, r0
 8007d08:	f000 81e4 	beq.w	80080d4 <__ieee754_pow+0x77c>
 8007d0c:	ec51 0b18 	vmov	r0, r1, d8
 8007d10:	2200      	movs	r2, #0
 8007d12:	2300      	movs	r3, #0
 8007d14:	f7f8 feea 	bl	8000aec <__aeabi_dcmplt>
 8007d18:	3800      	subs	r0, #0
 8007d1a:	bf18      	it	ne
 8007d1c:	2001      	movne	r0, #1
 8007d1e:	e72b      	b.n	8007b78 <__ieee754_pow+0x220>
 8007d20:	60000000 	.word	0x60000000
 8007d24:	3ff71547 	.word	0x3ff71547
 8007d28:	f85ddf44 	.word	0xf85ddf44
 8007d2c:	3e54ae0b 	.word	0x3e54ae0b
 8007d30:	55555555 	.word	0x55555555
 8007d34:	3fd55555 	.word	0x3fd55555
 8007d38:	652b82fe 	.word	0x652b82fe
 8007d3c:	3ff71547 	.word	0x3ff71547
 8007d40:	00000000 	.word	0x00000000
 8007d44:	bff00000 	.word	0xbff00000
 8007d48:	3ff00000 	.word	0x3ff00000
 8007d4c:	3fd00000 	.word	0x3fd00000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	408fffff 	.word	0x408fffff
 8007d58:	4bd5      	ldr	r3, [pc, #852]	; (80080b0 <__ieee754_pow+0x758>)
 8007d5a:	402b      	ands	r3, r5
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	b92b      	cbnz	r3, 8007d6c <__ieee754_pow+0x414>
 8007d60:	4bd4      	ldr	r3, [pc, #848]	; (80080b4 <__ieee754_pow+0x75c>)
 8007d62:	f7f8 fc51 	bl	8000608 <__aeabi_dmul>
 8007d66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	1523      	asrs	r3, r4, #20
 8007d6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d72:	4413      	add	r3, r2
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	4bd0      	ldr	r3, [pc, #832]	; (80080b8 <__ieee754_pow+0x760>)
 8007d78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d80:	429c      	cmp	r4, r3
 8007d82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d86:	dd08      	ble.n	8007d9a <__ieee754_pow+0x442>
 8007d88:	4bcc      	ldr	r3, [pc, #816]	; (80080bc <__ieee754_pow+0x764>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	f340 8162 	ble.w	8008054 <__ieee754_pow+0x6fc>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	3301      	adds	r3, #1
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	00e3      	lsls	r3, r4, #3
 8007d9e:	9307      	str	r3, [sp, #28]
 8007da0:	4bc7      	ldr	r3, [pc, #796]	; (80080c0 <__ieee754_pow+0x768>)
 8007da2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007da6:	ed93 7b00 	vldr	d7, [r3]
 8007daa:	4629      	mov	r1, r5
 8007dac:	ec53 2b17 	vmov	r2, r3, d7
 8007db0:	eeb0 9a47 	vmov.f32	s18, s14
 8007db4:	eef0 9a67 	vmov.f32	s19, s15
 8007db8:	4682      	mov	sl, r0
 8007dba:	f7f8 fa6d 	bl	8000298 <__aeabi_dsub>
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	460f      	mov	r7, r1
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	ec51 0b19 	vmov	r0, r1, d9
 8007dca:	f7f8 fa67 	bl	800029c <__adddf3>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	49bb      	ldr	r1, [pc, #748]	; (80080c4 <__ieee754_pow+0x76c>)
 8007dd6:	f7f8 fd41 	bl	800085c <__aeabi_ddiv>
 8007dda:	ec41 0b1a 	vmov	d10, r0, r1
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 fc0f 	bl	8000608 <__aeabi_dmul>
 8007dea:	2300      	movs	r3, #0
 8007dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df0:	9302      	str	r3, [sp, #8]
 8007df2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007df6:	46ab      	mov	fp, r5
 8007df8:	106d      	asrs	r5, r5, #1
 8007dfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007dfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e02:	ec41 0b18 	vmov	d8, r0, r1
 8007e06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fa3a 	bl	8000298 <__aeabi_dsub>
 8007e24:	ec53 2b19 	vmov	r2, r3, d9
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fa32 	bl	8000298 <__aeabi_dsub>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4650      	mov	r0, sl
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	f7f8 fa2c 	bl	8000298 <__aeabi_dsub>
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	f7f8 fbe0 	bl	8000608 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fa22 	bl	8000298 <__aeabi_dsub>
 8007e54:	ec53 2b1a 	vmov	r2, r3, d10
 8007e58:	f7f8 fbd6 	bl	8000608 <__aeabi_dmul>
 8007e5c:	ec53 2b18 	vmov	r2, r3, d8
 8007e60:	ec41 0b19 	vmov	d9, r0, r1
 8007e64:	ec51 0b18 	vmov	r0, r1, d8
 8007e68:	f7f8 fbce 	bl	8000608 <__aeabi_dmul>
 8007e6c:	a37c      	add	r3, pc, #496	; (adr r3, 8008060 <__ieee754_pow+0x708>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	f7f8 fbc7 	bl	8000608 <__aeabi_dmul>
 8007e7a:	a37b      	add	r3, pc, #492	; (adr r3, 8008068 <__ieee754_pow+0x710>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 fa0c 	bl	800029c <__adddf3>
 8007e84:	4622      	mov	r2, r4
 8007e86:	462b      	mov	r3, r5
 8007e88:	f7f8 fbbe 	bl	8000608 <__aeabi_dmul>
 8007e8c:	a378      	add	r3, pc, #480	; (adr r3, 8008070 <__ieee754_pow+0x718>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 fa03 	bl	800029c <__adddf3>
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	f7f8 fbb5 	bl	8000608 <__aeabi_dmul>
 8007e9e:	a376      	add	r3, pc, #472	; (adr r3, 8008078 <__ieee754_pow+0x720>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f9fa 	bl	800029c <__adddf3>
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	462b      	mov	r3, r5
 8007eac:	f7f8 fbac 	bl	8000608 <__aeabi_dmul>
 8007eb0:	a373      	add	r3, pc, #460	; (adr r3, 8008080 <__ieee754_pow+0x728>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f9f1 	bl	800029c <__adddf3>
 8007eba:	4622      	mov	r2, r4
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	a371      	add	r3, pc, #452	; (adr r3, 8008088 <__ieee754_pow+0x730>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f9e8 	bl	800029c <__adddf3>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fb90 	bl	8000608 <__aeabi_dmul>
 8007ee8:	4642      	mov	r2, r8
 8007eea:	4604      	mov	r4, r0
 8007eec:	460d      	mov	r5, r1
 8007eee:	464b      	mov	r3, r9
 8007ef0:	ec51 0b18 	vmov	r0, r1, d8
 8007ef4:	f7f8 f9d2 	bl	800029c <__adddf3>
 8007ef8:	ec53 2b19 	vmov	r2, r3, d9
 8007efc:	f7f8 fb84 	bl	8000608 <__aeabi_dmul>
 8007f00:	4622      	mov	r2, r4
 8007f02:	462b      	mov	r3, r5
 8007f04:	f7f8 f9ca 	bl	800029c <__adddf3>
 8007f08:	4642      	mov	r2, r8
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	468b      	mov	fp, r1
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fb78 	bl	8000608 <__aeabi_dmul>
 8007f18:	4b6b      	ldr	r3, [pc, #428]	; (80080c8 <__ieee754_pow+0x770>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	460f      	mov	r7, r1
 8007f20:	f7f8 f9bc 	bl	800029c <__adddf3>
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	f7f8 f9b8 	bl	800029c <__adddf3>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 fb65 	bl	8000608 <__aeabi_dmul>
 8007f3e:	4b62      	ldr	r3, [pc, #392]	; (80080c8 <__ieee754_pow+0x770>)
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	4620      	mov	r0, r4
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7f8 f9a5 	bl	8000298 <__aeabi_dsub>
 8007f4e:	4632      	mov	r2, r6
 8007f50:	463b      	mov	r3, r7
 8007f52:	f7f8 f9a1 	bl	8000298 <__aeabi_dsub>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	f7f8 f99b 	bl	8000298 <__aeabi_dsub>
 8007f62:	ec53 2b18 	vmov	r2, r3, d8
 8007f66:	f7f8 fb4f 	bl	8000608 <__aeabi_dmul>
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	460f      	mov	r7, r1
 8007f70:	462b      	mov	r3, r5
 8007f72:	ec51 0b19 	vmov	r0, r1, d9
 8007f76:	f7f8 fb47 	bl	8000608 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4630      	mov	r0, r6
 8007f80:	4639      	mov	r1, r7
 8007f82:	f7f8 f98b 	bl	800029c <__adddf3>
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 f983 	bl	800029c <__adddf3>
 8007f96:	a33e      	add	r3, pc, #248	; (adr r3, 8008090 <__ieee754_pow+0x738>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f7f8 fb31 	bl	8000608 <__aeabi_dmul>
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	ec41 0b18 	vmov	d8, r0, r1
 8007fac:	464b      	mov	r3, r9
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 f971 	bl	8000298 <__aeabi_dsub>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7f8 f96b 	bl	8000298 <__aeabi_dsub>
 8007fc2:	a335      	add	r3, pc, #212	; (adr r3, 8008098 <__ieee754_pow+0x740>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 fb1e 	bl	8000608 <__aeabi_dmul>
 8007fcc:	a334      	add	r3, pc, #208	; (adr r3, 80080a0 <__ieee754_pow+0x748>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 fb15 	bl	8000608 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 f959 	bl	800029c <__adddf3>
 8007fea:	9a07      	ldr	r2, [sp, #28]
 8007fec:	4b37      	ldr	r3, [pc, #220]	; (80080cc <__ieee754_pow+0x774>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 f952 	bl	800029c <__adddf3>
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	9805      	ldr	r0, [sp, #20]
 8007ffc:	468b      	mov	fp, r1
 8007ffe:	f7f8 fa99 	bl	8000534 <__aeabi_i2d>
 8008002:	9a07      	ldr	r2, [sp, #28]
 8008004:	4b32      	ldr	r3, [pc, #200]	; (80080d0 <__ieee754_pow+0x778>)
 8008006:	4413      	add	r3, r2
 8008008:	e9d3 8900 	ldrd	r8, r9, [r3]
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	4652      	mov	r2, sl
 8008012:	465b      	mov	r3, fp
 8008014:	ec51 0b18 	vmov	r0, r1, d8
 8008018:	f7f8 f940 	bl	800029c <__adddf3>
 800801c:	4642      	mov	r2, r8
 800801e:	464b      	mov	r3, r9
 8008020:	f7f8 f93c 	bl	800029c <__adddf3>
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	f7f8 f938 	bl	800029c <__adddf3>
 800802c:	2000      	movs	r0, #0
 800802e:	4632      	mov	r2, r6
 8008030:	463b      	mov	r3, r7
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	f7f8 f92f 	bl	8000298 <__aeabi_dsub>
 800803a:	4642      	mov	r2, r8
 800803c:	464b      	mov	r3, r9
 800803e:	f7f8 f92b 	bl	8000298 <__aeabi_dsub>
 8008042:	ec53 2b18 	vmov	r2, r3, d8
 8008046:	f7f8 f927 	bl	8000298 <__aeabi_dsub>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4650      	mov	r0, sl
 8008050:	4659      	mov	r1, fp
 8008052:	e610      	b.n	8007c76 <__ieee754_pow+0x31e>
 8008054:	2401      	movs	r4, #1
 8008056:	e6a1      	b.n	8007d9c <__ieee754_pow+0x444>
 8008058:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80080a8 <__ieee754_pow+0x750>
 800805c:	e617      	b.n	8007c8e <__ieee754_pow+0x336>
 800805e:	bf00      	nop
 8008060:	4a454eef 	.word	0x4a454eef
 8008064:	3fca7e28 	.word	0x3fca7e28
 8008068:	93c9db65 	.word	0x93c9db65
 800806c:	3fcd864a 	.word	0x3fcd864a
 8008070:	a91d4101 	.word	0xa91d4101
 8008074:	3fd17460 	.word	0x3fd17460
 8008078:	518f264d 	.word	0x518f264d
 800807c:	3fd55555 	.word	0x3fd55555
 8008080:	db6fabff 	.word	0xdb6fabff
 8008084:	3fdb6db6 	.word	0x3fdb6db6
 8008088:	33333303 	.word	0x33333303
 800808c:	3fe33333 	.word	0x3fe33333
 8008090:	e0000000 	.word	0xe0000000
 8008094:	3feec709 	.word	0x3feec709
 8008098:	dc3a03fd 	.word	0xdc3a03fd
 800809c:	3feec709 	.word	0x3feec709
 80080a0:	145b01f5 	.word	0x145b01f5
 80080a4:	be3e2fe0 	.word	0xbe3e2fe0
 80080a8:	00000000 	.word	0x00000000
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	7ff00000 	.word	0x7ff00000
 80080b4:	43400000 	.word	0x43400000
 80080b8:	0003988e 	.word	0x0003988e
 80080bc:	000bb679 	.word	0x000bb679
 80080c0:	08008ae8 	.word	0x08008ae8
 80080c4:	3ff00000 	.word	0x3ff00000
 80080c8:	40080000 	.word	0x40080000
 80080cc:	08008b08 	.word	0x08008b08
 80080d0:	08008af8 	.word	0x08008af8
 80080d4:	a3b5      	add	r3, pc, #724	; (adr r3, 80083ac <__ieee754_pow+0xa54>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f8dd 	bl	800029c <__adddf3>
 80080e2:	4622      	mov	r2, r4
 80080e4:	ec41 0b1a 	vmov	d10, r0, r1
 80080e8:	462b      	mov	r3, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 f8d3 	bl	8000298 <__aeabi_dsub>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	ec51 0b1a 	vmov	r0, r1, d10
 80080fa:	f7f8 fd15 	bl	8000b28 <__aeabi_dcmpgt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f47f ae04 	bne.w	8007d0c <__ieee754_pow+0x3b4>
 8008104:	4aa4      	ldr	r2, [pc, #656]	; (8008398 <__ieee754_pow+0xa40>)
 8008106:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800810a:	4293      	cmp	r3, r2
 800810c:	f340 8108 	ble.w	8008320 <__ieee754_pow+0x9c8>
 8008110:	151b      	asrs	r3, r3, #20
 8008112:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008116:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800811a:	fa4a f303 	asr.w	r3, sl, r3
 800811e:	445b      	add	r3, fp
 8008120:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008124:	4e9d      	ldr	r6, [pc, #628]	; (800839c <__ieee754_pow+0xa44>)
 8008126:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800812a:	4116      	asrs	r6, r2
 800812c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008130:	2000      	movs	r0, #0
 8008132:	ea23 0106 	bic.w	r1, r3, r6
 8008136:	f1c2 0214 	rsb	r2, r2, #20
 800813a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800813e:	fa4a fa02 	asr.w	sl, sl, r2
 8008142:	f1bb 0f00 	cmp.w	fp, #0
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	bfb8      	it	lt
 8008150:	f1ca 0a00 	rsblt	sl, sl, #0
 8008154:	f7f8 f8a0 	bl	8000298 <__aeabi_dsub>
 8008158:	ec41 0b19 	vmov	d9, r0, r1
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	ec51 0b19 	vmov	r0, r1, d9
 8008164:	f7f8 f89a 	bl	800029c <__adddf3>
 8008168:	a37b      	add	r3, pc, #492	; (adr r3, 8008358 <__ieee754_pow+0xa00>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	2000      	movs	r0, #0
 8008170:	4604      	mov	r4, r0
 8008172:	460d      	mov	r5, r1
 8008174:	f7f8 fa48 	bl	8000608 <__aeabi_dmul>
 8008178:	ec53 2b19 	vmov	r2, r3, d9
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 f888 	bl	8000298 <__aeabi_dsub>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 f882 	bl	8000298 <__aeabi_dsub>
 8008194:	a372      	add	r3, pc, #456	; (adr r3, 8008360 <__ieee754_pow+0xa08>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 fa35 	bl	8000608 <__aeabi_dmul>
 800819e:	a372      	add	r3, pc, #456	; (adr r3, 8008368 <__ieee754_pow+0xa10>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 fa2c 	bl	8000608 <__aeabi_dmul>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4640      	mov	r0, r8
 80081b6:	4649      	mov	r1, r9
 80081b8:	f7f8 f870 	bl	800029c <__adddf3>
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 f868 	bl	800029c <__adddf3>
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	4680      	mov	r8, r0
 80081d2:	4689      	mov	r9, r1
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 f85a 	bl	8000298 <__aeabi_dsub>
 80081e4:	4642      	mov	r2, r8
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	464b      	mov	r3, r9
 80081ec:	4640      	mov	r0, r8
 80081ee:	4649      	mov	r1, r9
 80081f0:	f7f8 fa0a 	bl	8000608 <__aeabi_dmul>
 80081f4:	a35e      	add	r3, pc, #376	; (adr r3, 8008370 <__ieee754_pow+0xa18>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	4604      	mov	r4, r0
 80081fc:	460d      	mov	r5, r1
 80081fe:	f7f8 fa03 	bl	8000608 <__aeabi_dmul>
 8008202:	a35d      	add	r3, pc, #372	; (adr r3, 8008378 <__ieee754_pow+0xa20>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f846 	bl	8000298 <__aeabi_dsub>
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	f7f8 f9fa 	bl	8000608 <__aeabi_dmul>
 8008214:	a35a      	add	r3, pc, #360	; (adr r3, 8008380 <__ieee754_pow+0xa28>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f83f 	bl	800029c <__adddf3>
 800821e:	4622      	mov	r2, r4
 8008220:	462b      	mov	r3, r5
 8008222:	f7f8 f9f1 	bl	8000608 <__aeabi_dmul>
 8008226:	a358      	add	r3, pc, #352	; (adr r3, 8008388 <__ieee754_pow+0xa30>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f834 	bl	8000298 <__aeabi_dsub>
 8008230:	4622      	mov	r2, r4
 8008232:	462b      	mov	r3, r5
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	a355      	add	r3, pc, #340	; (adr r3, 8008390 <__ieee754_pow+0xa38>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f82d 	bl	800029c <__adddf3>
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	f7f8 f9df 	bl	8000608 <__aeabi_dmul>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4640      	mov	r0, r8
 8008250:	4649      	mov	r1, r9
 8008252:	f7f8 f821 	bl	8000298 <__aeabi_dsub>
 8008256:	4604      	mov	r4, r0
 8008258:	460d      	mov	r5, r1
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	f7f8 f9d1 	bl	8000608 <__aeabi_dmul>
 8008266:	2200      	movs	r2, #0
 8008268:	ec41 0b19 	vmov	d9, r0, r1
 800826c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008270:	4620      	mov	r0, r4
 8008272:	4629      	mov	r1, r5
 8008274:	f7f8 f810 	bl	8000298 <__aeabi_dsub>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	ec51 0b19 	vmov	r0, r1, d9
 8008280:	f7f8 faec 	bl	800085c <__aeabi_ddiv>
 8008284:	4632      	mov	r2, r6
 8008286:	4604      	mov	r4, r0
 8008288:	460d      	mov	r5, r1
 800828a:	463b      	mov	r3, r7
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 f800 	bl	800029c <__adddf3>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4620      	mov	r0, r4
 80082a2:	4629      	mov	r1, r5
 80082a4:	f7f7 fff8 	bl	8000298 <__aeabi_dsub>
 80082a8:	4642      	mov	r2, r8
 80082aa:	464b      	mov	r3, r9
 80082ac:	f7f7 fff4 	bl	8000298 <__aeabi_dsub>
 80082b0:	460b      	mov	r3, r1
 80082b2:	4602      	mov	r2, r0
 80082b4:	493a      	ldr	r1, [pc, #232]	; (80083a0 <__ieee754_pow+0xa48>)
 80082b6:	2000      	movs	r0, #0
 80082b8:	f7f7 ffee 	bl	8000298 <__aeabi_dsub>
 80082bc:	ec41 0b10 	vmov	d0, r0, r1
 80082c0:	ee10 3a90 	vmov	r3, s1
 80082c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80082c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082cc:	da2b      	bge.n	8008326 <__ieee754_pow+0x9ce>
 80082ce:	4650      	mov	r0, sl
 80082d0:	f000 f966 	bl	80085a0 <scalbn>
 80082d4:	ec51 0b10 	vmov	r0, r1, d0
 80082d8:	ec53 2b18 	vmov	r2, r3, d8
 80082dc:	f7ff bbed 	b.w	8007aba <__ieee754_pow+0x162>
 80082e0:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <__ieee754_pow+0xa4c>)
 80082e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80082e6:	429e      	cmp	r6, r3
 80082e8:	f77f af0c 	ble.w	8008104 <__ieee754_pow+0x7ac>
 80082ec:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <__ieee754_pow+0xa50>)
 80082ee:	440b      	add	r3, r1
 80082f0:	4303      	orrs	r3, r0
 80082f2:	d009      	beq.n	8008308 <__ieee754_pow+0x9b0>
 80082f4:	ec51 0b18 	vmov	r0, r1, d8
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	f7f8 fbf6 	bl	8000aec <__aeabi_dcmplt>
 8008300:	3800      	subs	r0, #0
 8008302:	bf18      	it	ne
 8008304:	2001      	movne	r0, #1
 8008306:	e447      	b.n	8007b98 <__ieee754_pow+0x240>
 8008308:	4622      	mov	r2, r4
 800830a:	462b      	mov	r3, r5
 800830c:	f7f7 ffc4 	bl	8000298 <__aeabi_dsub>
 8008310:	4642      	mov	r2, r8
 8008312:	464b      	mov	r3, r9
 8008314:	f7f8 fbfe 	bl	8000b14 <__aeabi_dcmpge>
 8008318:	2800      	cmp	r0, #0
 800831a:	f43f aef3 	beq.w	8008104 <__ieee754_pow+0x7ac>
 800831e:	e7e9      	b.n	80082f4 <__ieee754_pow+0x99c>
 8008320:	f04f 0a00 	mov.w	sl, #0
 8008324:	e71a      	b.n	800815c <__ieee754_pow+0x804>
 8008326:	ec51 0b10 	vmov	r0, r1, d0
 800832a:	4619      	mov	r1, r3
 800832c:	e7d4      	b.n	80082d8 <__ieee754_pow+0x980>
 800832e:	491c      	ldr	r1, [pc, #112]	; (80083a0 <__ieee754_pow+0xa48>)
 8008330:	2000      	movs	r0, #0
 8008332:	f7ff bb30 	b.w	8007996 <__ieee754_pow+0x3e>
 8008336:	2000      	movs	r0, #0
 8008338:	2100      	movs	r1, #0
 800833a:	f7ff bb2c 	b.w	8007996 <__ieee754_pow+0x3e>
 800833e:	4630      	mov	r0, r6
 8008340:	4639      	mov	r1, r7
 8008342:	f7ff bb28 	b.w	8007996 <__ieee754_pow+0x3e>
 8008346:	9204      	str	r2, [sp, #16]
 8008348:	f7ff bb7a 	b.w	8007a40 <__ieee754_pow+0xe8>
 800834c:	2300      	movs	r3, #0
 800834e:	f7ff bb64 	b.w	8007a1a <__ieee754_pow+0xc2>
 8008352:	bf00      	nop
 8008354:	f3af 8000 	nop.w
 8008358:	00000000 	.word	0x00000000
 800835c:	3fe62e43 	.word	0x3fe62e43
 8008360:	fefa39ef 	.word	0xfefa39ef
 8008364:	3fe62e42 	.word	0x3fe62e42
 8008368:	0ca86c39 	.word	0x0ca86c39
 800836c:	be205c61 	.word	0xbe205c61
 8008370:	72bea4d0 	.word	0x72bea4d0
 8008374:	3e663769 	.word	0x3e663769
 8008378:	c5d26bf1 	.word	0xc5d26bf1
 800837c:	3ebbbd41 	.word	0x3ebbbd41
 8008380:	af25de2c 	.word	0xaf25de2c
 8008384:	3f11566a 	.word	0x3f11566a
 8008388:	16bebd93 	.word	0x16bebd93
 800838c:	3f66c16c 	.word	0x3f66c16c
 8008390:	5555553e 	.word	0x5555553e
 8008394:	3fc55555 	.word	0x3fc55555
 8008398:	3fe00000 	.word	0x3fe00000
 800839c:	000fffff 	.word	0x000fffff
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	4090cbff 	.word	0x4090cbff
 80083a8:	3f6f3400 	.word	0x3f6f3400
 80083ac:	652b82fe 	.word	0x652b82fe
 80083b0:	3c971547 	.word	0x3c971547

080083b4 <__ieee754_sqrt>:
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	ec55 4b10 	vmov	r4, r5, d0
 80083bc:	4e55      	ldr	r6, [pc, #340]	; (8008514 <__ieee754_sqrt+0x160>)
 80083be:	43ae      	bics	r6, r5
 80083c0:	ee10 0a10 	vmov	r0, s0
 80083c4:	ee10 3a10 	vmov	r3, s0
 80083c8:	462a      	mov	r2, r5
 80083ca:	4629      	mov	r1, r5
 80083cc:	d110      	bne.n	80083f0 <__ieee754_sqrt+0x3c>
 80083ce:	ee10 2a10 	vmov	r2, s0
 80083d2:	462b      	mov	r3, r5
 80083d4:	f7f8 f918 	bl	8000608 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4620      	mov	r0, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	f7f7 ff5c 	bl	800029c <__adddf3>
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	ec45 4b10 	vmov	d0, r4, r5
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	dc10      	bgt.n	8008416 <__ieee754_sqrt+0x62>
 80083f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80083f8:	4330      	orrs	r0, r6
 80083fa:	d0f5      	beq.n	80083e8 <__ieee754_sqrt+0x34>
 80083fc:	b15d      	cbz	r5, 8008416 <__ieee754_sqrt+0x62>
 80083fe:	ee10 2a10 	vmov	r2, s0
 8008402:	462b      	mov	r3, r5
 8008404:	ee10 0a10 	vmov	r0, s0
 8008408:	f7f7 ff46 	bl	8000298 <__aeabi_dsub>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	f7f8 fa24 	bl	800085c <__aeabi_ddiv>
 8008414:	e7e6      	b.n	80083e4 <__ieee754_sqrt+0x30>
 8008416:	1512      	asrs	r2, r2, #20
 8008418:	d074      	beq.n	8008504 <__ieee754_sqrt+0x150>
 800841a:	07d4      	lsls	r4, r2, #31
 800841c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008420:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008428:	bf5e      	ittt	pl
 800842a:	0fda      	lsrpl	r2, r3, #31
 800842c:	005b      	lslpl	r3, r3, #1
 800842e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008432:	2400      	movs	r4, #0
 8008434:	0fda      	lsrs	r2, r3, #31
 8008436:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800843a:	107f      	asrs	r7, r7, #1
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	2516      	movs	r5, #22
 8008440:	4620      	mov	r0, r4
 8008442:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008446:	1886      	adds	r6, r0, r2
 8008448:	428e      	cmp	r6, r1
 800844a:	bfde      	ittt	le
 800844c:	1b89      	suble	r1, r1, r6
 800844e:	18b0      	addle	r0, r6, r2
 8008450:	18a4      	addle	r4, r4, r2
 8008452:	0049      	lsls	r1, r1, #1
 8008454:	3d01      	subs	r5, #1
 8008456:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800845a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800845e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008462:	d1f0      	bne.n	8008446 <__ieee754_sqrt+0x92>
 8008464:	462a      	mov	r2, r5
 8008466:	f04f 0e20 	mov.w	lr, #32
 800846a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800846e:	4281      	cmp	r1, r0
 8008470:	eb06 0c05 	add.w	ip, r6, r5
 8008474:	dc02      	bgt.n	800847c <__ieee754_sqrt+0xc8>
 8008476:	d113      	bne.n	80084a0 <__ieee754_sqrt+0xec>
 8008478:	459c      	cmp	ip, r3
 800847a:	d811      	bhi.n	80084a0 <__ieee754_sqrt+0xec>
 800847c:	f1bc 0f00 	cmp.w	ip, #0
 8008480:	eb0c 0506 	add.w	r5, ip, r6
 8008484:	da43      	bge.n	800850e <__ieee754_sqrt+0x15a>
 8008486:	2d00      	cmp	r5, #0
 8008488:	db41      	blt.n	800850e <__ieee754_sqrt+0x15a>
 800848a:	f100 0801 	add.w	r8, r0, #1
 800848e:	1a09      	subs	r1, r1, r0
 8008490:	459c      	cmp	ip, r3
 8008492:	bf88      	it	hi
 8008494:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008498:	eba3 030c 	sub.w	r3, r3, ip
 800849c:	4432      	add	r2, r6
 800849e:	4640      	mov	r0, r8
 80084a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084a4:	f1be 0e01 	subs.w	lr, lr, #1
 80084a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80084ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084b4:	d1db      	bne.n	800846e <__ieee754_sqrt+0xba>
 80084b6:	430b      	orrs	r3, r1
 80084b8:	d006      	beq.n	80084c8 <__ieee754_sqrt+0x114>
 80084ba:	1c50      	adds	r0, r2, #1
 80084bc:	bf13      	iteet	ne
 80084be:	3201      	addne	r2, #1
 80084c0:	3401      	addeq	r4, #1
 80084c2:	4672      	moveq	r2, lr
 80084c4:	f022 0201 	bicne.w	r2, r2, #1
 80084c8:	1063      	asrs	r3, r4, #1
 80084ca:	0852      	lsrs	r2, r2, #1
 80084cc:	07e1      	lsls	r1, r4, #31
 80084ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80084d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80084d6:	bf48      	it	mi
 80084d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80084dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80084e0:	4614      	mov	r4, r2
 80084e2:	e781      	b.n	80083e8 <__ieee754_sqrt+0x34>
 80084e4:	0ad9      	lsrs	r1, r3, #11
 80084e6:	3815      	subs	r0, #21
 80084e8:	055b      	lsls	r3, r3, #21
 80084ea:	2900      	cmp	r1, #0
 80084ec:	d0fa      	beq.n	80084e4 <__ieee754_sqrt+0x130>
 80084ee:	02cd      	lsls	r5, r1, #11
 80084f0:	d50a      	bpl.n	8008508 <__ieee754_sqrt+0x154>
 80084f2:	f1c2 0420 	rsb	r4, r2, #32
 80084f6:	fa23 f404 	lsr.w	r4, r3, r4
 80084fa:	1e55      	subs	r5, r2, #1
 80084fc:	4093      	lsls	r3, r2
 80084fe:	4321      	orrs	r1, r4
 8008500:	1b42      	subs	r2, r0, r5
 8008502:	e78a      	b.n	800841a <__ieee754_sqrt+0x66>
 8008504:	4610      	mov	r0, r2
 8008506:	e7f0      	b.n	80084ea <__ieee754_sqrt+0x136>
 8008508:	0049      	lsls	r1, r1, #1
 800850a:	3201      	adds	r2, #1
 800850c:	e7ef      	b.n	80084ee <__ieee754_sqrt+0x13a>
 800850e:	4680      	mov	r8, r0
 8008510:	e7bd      	b.n	800848e <__ieee754_sqrt+0xda>
 8008512:	bf00      	nop
 8008514:	7ff00000 	.word	0x7ff00000

08008518 <with_errno>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4604      	mov	r4, r0
 800851c:	460d      	mov	r5, r1
 800851e:	4616      	mov	r6, r2
 8008520:	f7fc fa80 	bl	8004a24 <__errno>
 8008524:	4629      	mov	r1, r5
 8008526:	6006      	str	r6, [r0, #0]
 8008528:	4620      	mov	r0, r4
 800852a:	bd70      	pop	{r4, r5, r6, pc}

0800852c <xflow>:
 800852c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852e:	4614      	mov	r4, r2
 8008530:	461d      	mov	r5, r3
 8008532:	b108      	cbz	r0, 8008538 <xflow+0xc>
 8008534:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008538:	e9cd 2300 	strd	r2, r3, [sp]
 800853c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f8 f860 	bl	8000608 <__aeabi_dmul>
 8008548:	2222      	movs	r2, #34	; 0x22
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008550:	f7ff bfe2 	b.w	8008518 <with_errno>

08008554 <__math_uflow>:
 8008554:	b508      	push	{r3, lr}
 8008556:	2200      	movs	r2, #0
 8008558:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800855c:	f7ff ffe6 	bl	800852c <xflow>
 8008560:	ec41 0b10 	vmov	d0, r0, r1
 8008564:	bd08      	pop	{r3, pc}

08008566 <__math_oflow>:
 8008566:	b508      	push	{r3, lr}
 8008568:	2200      	movs	r2, #0
 800856a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800856e:	f7ff ffdd 	bl	800852c <xflow>
 8008572:	ec41 0b10 	vmov	d0, r0, r1
 8008576:	bd08      	pop	{r3, pc}

08008578 <fabs>:
 8008578:	ec51 0b10 	vmov	r0, r1, d0
 800857c:	ee10 2a10 	vmov	r2, s0
 8008580:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008584:	ec43 2b10 	vmov	d0, r2, r3
 8008588:	4770      	bx	lr

0800858a <finite>:
 800858a:	b082      	sub	sp, #8
 800858c:	ed8d 0b00 	vstr	d0, [sp]
 8008590:	9801      	ldr	r0, [sp, #4]
 8008592:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008596:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800859a:	0fc0      	lsrs	r0, r0, #31
 800859c:	b002      	add	sp, #8
 800859e:	4770      	bx	lr

080085a0 <scalbn>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	ec55 4b10 	vmov	r4, r5, d0
 80085a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80085aa:	4606      	mov	r6, r0
 80085ac:	462b      	mov	r3, r5
 80085ae:	b99a      	cbnz	r2, 80085d8 <scalbn+0x38>
 80085b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80085b4:	4323      	orrs	r3, r4
 80085b6:	d036      	beq.n	8008626 <scalbn+0x86>
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <scalbn+0x100>)
 80085ba:	4629      	mov	r1, r5
 80085bc:	ee10 0a10 	vmov	r0, s0
 80085c0:	2200      	movs	r2, #0
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <scalbn+0x104>)
 80085c8:	429e      	cmp	r6, r3
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	da10      	bge.n	80085f2 <scalbn+0x52>
 80085d0:	a32b      	add	r3, pc, #172	; (adr r3, 8008680 <scalbn+0xe0>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	e03a      	b.n	800864e <scalbn+0xae>
 80085d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80085dc:	428a      	cmp	r2, r1
 80085de:	d10c      	bne.n	80085fa <scalbn+0x5a>
 80085e0:	ee10 2a10 	vmov	r2, s0
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fe58 	bl	800029c <__adddf3>
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	e019      	b.n	8008626 <scalbn+0x86>
 80085f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80085f6:	460b      	mov	r3, r1
 80085f8:	3a36      	subs	r2, #54	; 0x36
 80085fa:	4432      	add	r2, r6
 80085fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008600:	428a      	cmp	r2, r1
 8008602:	dd08      	ble.n	8008616 <scalbn+0x76>
 8008604:	2d00      	cmp	r5, #0
 8008606:	a120      	add	r1, pc, #128	; (adr r1, 8008688 <scalbn+0xe8>)
 8008608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860c:	da1c      	bge.n	8008648 <scalbn+0xa8>
 800860e:	a120      	add	r1, pc, #128	; (adr r1, 8008690 <scalbn+0xf0>)
 8008610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008614:	e018      	b.n	8008648 <scalbn+0xa8>
 8008616:	2a00      	cmp	r2, #0
 8008618:	dd08      	ble.n	800862c <scalbn+0x8c>
 800861a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800861e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008622:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008626:	ec45 4b10 	vmov	d0, r4, r5
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008630:	da19      	bge.n	8008666 <scalbn+0xc6>
 8008632:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008636:	429e      	cmp	r6, r3
 8008638:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800863c:	dd0a      	ble.n	8008654 <scalbn+0xb4>
 800863e:	a112      	add	r1, pc, #72	; (adr r1, 8008688 <scalbn+0xe8>)
 8008640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e2      	bne.n	800860e <scalbn+0x6e>
 8008648:	a30f      	add	r3, pc, #60	; (adr r3, 8008688 <scalbn+0xe8>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 ffdb 	bl	8000608 <__aeabi_dmul>
 8008652:	e7cb      	b.n	80085ec <scalbn+0x4c>
 8008654:	a10a      	add	r1, pc, #40	; (adr r1, 8008680 <scalbn+0xe0>)
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0b8      	beq.n	80085d0 <scalbn+0x30>
 800865e:	a10e      	add	r1, pc, #56	; (adr r1, 8008698 <scalbn+0xf8>)
 8008660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008664:	e7b4      	b.n	80085d0 <scalbn+0x30>
 8008666:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800866a:	3236      	adds	r2, #54	; 0x36
 800866c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008670:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008674:	4620      	mov	r0, r4
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <scalbn+0x108>)
 8008678:	2200      	movs	r2, #0
 800867a:	e7e8      	b.n	800864e <scalbn+0xae>
 800867c:	f3af 8000 	nop.w
 8008680:	c2f8f359 	.word	0xc2f8f359
 8008684:	01a56e1f 	.word	0x01a56e1f
 8008688:	8800759c 	.word	0x8800759c
 800868c:	7e37e43c 	.word	0x7e37e43c
 8008690:	8800759c 	.word	0x8800759c
 8008694:	fe37e43c 	.word	0xfe37e43c
 8008698:	c2f8f359 	.word	0xc2f8f359
 800869c:	81a56e1f 	.word	0x81a56e1f
 80086a0:	43500000 	.word	0x43500000
 80086a4:	ffff3cb0 	.word	0xffff3cb0
 80086a8:	3c900000 	.word	0x3c900000

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
