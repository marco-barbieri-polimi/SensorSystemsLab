
Play a song.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e94  08002e94  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08002e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000012c  08002fc8  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002fc8  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c393  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180a  00000000  00000000  0002c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001544a  00000000  00000000  0002f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c53e  00000000  00000000  000447a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089307  00000000  00000000  00050ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000da038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000012c 	.word	0x2000012c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e5c 	.word	0x08002e5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000130 	.word	0x20000130
 80001d0:	08002e5c 	.word	0x08002e5c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb4c 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f946 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f91a 	bl	8000720 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ec:	f000 f870 	bl	80005d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //a music is an array of notes
  playSong();
 80004f0:	f000 f9ea 	bl	80008c8 <playSong>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fca0 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800056c:	2310      	movs	r3, #16
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fe12 	bl	80011ac <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f9bb 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f874 	bl	800169c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f9a5 	bl	8000908 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fc1f 	bl	8002e4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060e:	4b42      	ldr	r3, [pc, #264]	; (8000718 <MX_TIM1_Init+0x148>)
 8000610:	4a42      	ldr	r2, [pc, #264]	; (800071c <MX_TIM1_Init+0x14c>)
 8000612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <MX_TIM1_Init+0x148>)
 8000616:	2263      	movs	r2, #99	; 0x63
 8000618:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <MX_TIM1_Init+0x148>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <MX_TIM1_Init+0x148>)
 8000622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <MX_TIM1_Init+0x148>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062e:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <MX_TIM1_Init+0x148>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000634:	4b38      	ldr	r3, [pc, #224]	; (8000718 <MX_TIM1_Init+0x148>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800063a:	4837      	ldr	r0, [pc, #220]	; (8000718 <MX_TIM1_Init+0x148>)
 800063c:	f001 fa4e 	bl	8001adc <HAL_TIM_Base_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000646:	f000 f95f 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000654:	4619      	mov	r1, r3
 8000656:	4830      	ldr	r0, [pc, #192]	; (8000718 <MX_TIM1_Init+0x148>)
 8000658:	f001 fcbe 	bl	8001fd8 <HAL_TIM_ConfigClockSource>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000662:	f000 f951 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000666:	482c      	ldr	r0, [pc, #176]	; (8000718 <MX_TIM1_Init+0x148>)
 8000668:	f001 fa87 	bl	8001b7a <HAL_TIM_PWM_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000672:	f000 f949 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000682:	4619      	mov	r1, r3
 8000684:	4824      	ldr	r0, [pc, #144]	; (8000718 <MX_TIM1_Init+0x148>)
 8000686:	f002 f83b 	bl	8002700 <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000690:	f000 f93a 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	2204      	movs	r2, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <MX_TIM1_Init+0x148>)
 80006ba:	f001 fbcb 	bl	8001e54 <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80006c4:	f000 f920 	bl	8000908 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_TIM1_Init+0x148>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_TIM1_Init+0x148>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006d6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_TIM1_Init+0x148>)
 80006fc:	f002 f86e 	bl	80027dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000706:	f000 f8ff 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <MX_TIM1_Init+0x148>)
 800070c:	f000 f94c 	bl	80009a8 <HAL_TIM_MspPostInit>

}
 8000710:	bf00      	nop
 8000712:	3758      	adds	r7, #88	; 0x58
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000148 	.word	0x20000148
 800071c:	40010000 	.word	0x40010000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f002 f892 	bl	8002880 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8d1 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000190 	.word	0x20000190
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fcba 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fb28 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fb1a 	bl	8000e70 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <playNote>:

/* USER CODE BEGIN 4 */
void playNote(struct SongNote songNote){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__HAL_TIM_SET_AUTORELOAD(&htim1, songNote.height.period);
 800085c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <playNote+0x74>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000868:	ee17 2a90 	vmov	r2, s15
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
 800086e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000876:	ee17 2a90 	vmov	r2, s15
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <playNote+0x74>)
 800087c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, songNote.height.pulse);
 800087e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <playNote+0x74>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088a:	ee17 2a90 	vmov	r2, s15
 800088e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000890:	2104      	movs	r1, #4
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <playNote+0x74>)
 8000894:	f001 f9ca 	bl	8001c2c <HAL_TIM_PWM_Start>
	HAL_Delay(songNote.duration*up_eight);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	225a      	movs	r2, #90	; 0x5a
 800089c:	fb02 f303 	mul.w	r3, r2, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f9db 	bl	8000c5c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80008a6:	2104      	movs	r1, #4
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <playNote+0x74>)
 80008aa:	f001 fa6f 	bl	8001d8c <HAL_TIM_PWM_Stop>
	HAL_Delay(songNote.duration*down_eight);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	220a      	movs	r2, #10
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f9d0 	bl	8000c5c <HAL_Delay>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000148 	.word	0x20000148

080008c8 <playSong>:

void playSong(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < songLength; i++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	e00d      	b.n	80008f0 <playSong+0x28>
		playNote(song[i]);
 80008d4:	490b      	ldr	r1, [pc, #44]	; (8000904 <playSong+0x3c>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008e6:	f7ff ffb3 	bl	8000850 <playNote>
	for(int i = 0; i < songLength; i++){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	2218      	movs	r2, #24
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	dbed      	blt.n	80008d4 <playSong+0xc>
	}
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fa58 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10d      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40010000 	.word	0x40010000
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_TIM_MspPostInit+0x68>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d11e      	bne.n	8000a08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_TIM_MspPostInit+0x70>)
 8000a04:	f000 fa34 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010000 	.word	0x40010000
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12b      	bne.n	8000a96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a76:	230c      	movs	r3, #12
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_MspInit+0x8c>)
 8000a92:	f000 f9ed 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f890 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd7 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f002 f957 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fcbf 	bl	80004d8 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000b68:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 8000b6c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000b70:	200001d8 	.word	0x200001d8

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_Init+0x40>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_Init+0x40>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x40>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f931 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff feb2 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f93b 	bl	8000e56 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f911 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000120 	.word	0x20000120
 8000c14:	20000128 	.word	0x20000128
 8000c18:	20000124 	.word	0x20000124

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000128 	.word	0x20000128
 8000c40:	200001d4 	.word	0x200001d4

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200001d4 	.word	0x200001d4

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000128 	.word	0x20000128

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff5c 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff8e 	bl	8000d5c <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffb0 	bl	8000dc4 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e159      	b.n	8001140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8148 	bne.w	800113a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a56      	ldr	r2, [pc, #344]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x202>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_GPIO_Init+0x2f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1fa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x300>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1f2>
 800105e:	2304      	movs	r3, #4
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001062:	2307      	movs	r3, #7
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a24      	ldr	r2, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f aea2 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e267      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d075      	beq.n	80012b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b85      	ldr	r3, [pc, #532]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d112      	bne.n	8001208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ee:	d10b      	bne.n	8001208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d05b      	beq.n	80012b4 <HAL_RCC_OscConfig+0x108>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d157      	bne.n	80012b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e242      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d106      	bne.n	8001220 <HAL_RCC_OscConfig+0x74>
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x98>
 800122a:	4b70      	ldr	r3, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6f      	ldr	r2, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6c      	ldr	r2, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001244:	4b69      	ldr	r3, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a68      	ldr	r2, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a65      	ldr	r2, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fcee 	bl	8000c44 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fcea 	bl	8000c44 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e207      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xc0>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fcda 	bl	8000c44 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fcd6 	bl	8000c44 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1f3      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0xe8>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d063      	beq.n	800138a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d11c      	bne.n	8001314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	4b41      	ldr	r3, [pc, #260]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x152>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1c7      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4937      	ldr	r1, [pc, #220]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	e03a      	b.n	800138a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_RCC_OscConfig+0x244>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff fc8f 	bl	8000c44 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fc8b 	bl	8000c44 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1a8      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4925      	ldr	r1, [pc, #148]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fc6e 	bl	8000c44 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fc6a 	bl	8000c44 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e187      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d036      	beq.n	8001404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_RCC_OscConfig+0x248>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff fc4e 	bl	8000c44 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc4a 	bl	8000c44 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e167      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x240>)
 80013c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x200>
 80013ca:	e01b      	b.n	8001404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_OscConfig+0x248>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fc37 	bl	8000c44 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	e00e      	b.n	80013f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fc33 	bl	8000c44 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d907      	bls.n	80013f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e150      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b88      	ldr	r3, [pc, #544]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ea      	bne.n	80013da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8097 	beq.w	8001540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b81      	ldr	r3, [pc, #516]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b7d      	ldr	r3, [pc, #500]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a7c      	ldr	r2, [pc, #496]	; (800161c <HAL_RCC_OscConfig+0x470>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b7a      	ldr	r3, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	4b77      	ldr	r3, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x474>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144e:	4b74      	ldr	r3, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a73      	ldr	r2, [pc, #460]	; (8001620 <HAL_RCC_OscConfig+0x474>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145a:	f7ff fbf3 	bl	8000c44 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7ff fbef 	bl	8000c44 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e10c      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x474>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x2ea>
 8001488:	4b64      	ldr	r3, [pc, #400]	; (800161c <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a63      	ldr	r2, [pc, #396]	; (800161c <HAL_RCC_OscConfig+0x470>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
 8001494:	e01c      	b.n	80014d0 <HAL_RCC_OscConfig+0x324>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x30c>
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a5e      	ldr	r2, [pc, #376]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a5b      	ldr	r2, [pc, #364]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0x324>
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a57      	ldr	r2, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a54      	ldr	r2, [pc, #336]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d015      	beq.n	8001504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fbb4 	bl	8000c44 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fbb0 	bl	8000c44 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0cb      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0ee      	beq.n	80014e0 <HAL_RCC_OscConfig+0x334>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fb9e 	bl	8000c44 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fb9a 	bl	8000c44 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0b5      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ee      	bne.n	800150c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a38      	ldr	r2, [pc, #224]	; (800161c <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a1 	beq.w	800168c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_OscConfig+0x470>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d05c      	beq.n	8001610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d141      	bne.n	80015e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <HAL_RCC_OscConfig+0x478>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fb6e 	bl	8000c44 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fb6a 	bl	8000c44 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e087      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	3b01      	subs	r3, #1
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	491b      	ldr	r1, [pc, #108]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x478>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb43 	bl	8000c44 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb3f 	bl	8000c44 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e05c      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_RCC_OscConfig+0x470>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x416>
 80015e0:	e054      	b.n	800168c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb2c 	bl	8000c44 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb28 	bl	8000c44 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e045      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x444>
 800160e:	e03d      	b.n	800168c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e038      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000
 8001624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x4ec>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d028      	beq.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d121      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d11a      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001660:	4293      	cmp	r3, r2
 8001662:	d111      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0cc      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d90c      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d044      	beq.n	80017bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d119      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d003      	beq.n	800175a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e067      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0203 	bic.w	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4934      	ldr	r1, [pc, #208]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff fa5a 	bl	8000c44 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff fa56 	bl	8000c44 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 020c 	and.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1eb      	bne.n	8001794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001822:	f000 f821 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	; (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f9ba 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00
 8001858:	40023800 	.word	0x40023800
 800185c:	08002e74 	.word	0x08002e74
 8001860:	20000120 	.word	0x20000120
 8001864:	20000124 	.word	0x20000124

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800186c:	b094      	sub	sp, #80	; 0x50
 800186e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001878:	2300      	movs	r3, #0
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001880:	4b79      	ldr	r3, [pc, #484]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d00d      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x40>
 800188c:	2b08      	cmp	r3, #8
 800188e:	f200 80e1 	bhi.w	8001a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x34>
 8001896:	2b04      	cmp	r3, #4
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800189a:	e0db      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018a0:	e0db      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018a6:	e0d8      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b6d      	ldr	r3, [pc, #436]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	2200      	movs	r2, #0
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
 80018d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018da:	4622      	mov	r2, r4
 80018dc:	462b      	mov	r3, r5
 80018de:	f04f 0000 	mov.w	r0, #0
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	0159      	lsls	r1, r3, #5
 80018e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ec:	0150      	lsls	r0, r2, #5
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4621      	mov	r1, r4
 80018f4:	1a51      	subs	r1, r2, r1
 80018f6:	6139      	str	r1, [r7, #16]
 80018f8:	4629      	mov	r1, r5
 80018fa:	eb63 0301 	sbc.w	r3, r3, r1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800190c:	4659      	mov	r1, fp
 800190e:	018b      	lsls	r3, r1, #6
 8001910:	4651      	mov	r1, sl
 8001912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001916:	4651      	mov	r1, sl
 8001918:	018a      	lsls	r2, r1, #6
 800191a:	4651      	mov	r1, sl
 800191c:	ebb2 0801 	subs.w	r8, r2, r1
 8001920:	4659      	mov	r1, fp
 8001922:	eb63 0901 	sbc.w	r9, r3, r1
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800193a:	4690      	mov	r8, r2
 800193c:	4699      	mov	r9, r3
 800193e:	4623      	mov	r3, r4
 8001940:	eb18 0303 	adds.w	r3, r8, r3
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	462b      	mov	r3, r5
 8001948:	eb49 0303 	adc.w	r3, r9, r3
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800195a:	4629      	mov	r1, r5
 800195c:	024b      	lsls	r3, r1, #9
 800195e:	4621      	mov	r1, r4
 8001960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001964:	4621      	mov	r1, r4
 8001966:	024a      	lsls	r2, r1, #9
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196e:	2200      	movs	r2, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
 8001972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001978:	f7fe fc2c 	bl	80001d4 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001984:	e058      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	4618      	mov	r0, r3
 8001990:	4611      	mov	r1, r2
 8001992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a0:	4642      	mov	r2, r8
 80019a2:	464b      	mov	r3, r9
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0159      	lsls	r1, r3, #5
 80019ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b2:	0150      	lsls	r0, r2, #5
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4641      	mov	r1, r8
 80019ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80019be:	4649      	mov	r1, r9
 80019c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019d8:	ebb2 040a 	subs.w	r4, r2, sl
 80019dc:	eb63 050b 	sbc.w	r5, r3, fp
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	00eb      	lsls	r3, r5, #3
 80019ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ee:	00e2      	lsls	r2, r4, #3
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	4643      	mov	r3, r8
 80019f6:	18e3      	adds	r3, r4, r3
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	464b      	mov	r3, r9
 80019fc:	eb45 0303 	adc.w	r3, r5, r3
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0e:	4629      	mov	r1, r5
 8001a10:	028b      	lsls	r3, r1, #10
 8001a12:	4621      	mov	r1, r4
 8001a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a18:	4621      	mov	r1, r4
 8001a1a:	028a      	lsls	r2, r1, #10
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	2200      	movs	r2, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	61fa      	str	r2, [r7, #28]
 8001a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2c:	f7fe fbd2 	bl	80001d4 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3750      	adds	r7, #80	; 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000120 	.word	0x20000120

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08002e84 	.word	0x08002e84

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffdc 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0b5b      	lsrs	r3, r3, #13
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08002e84 	.word	0x08002e84

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff2e 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fb24 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e041      	b.n	8001c10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f839 	bl	8001c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f000 fad5 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_TIM_PWM_Start+0x24>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e022      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d109      	bne.n	8001c6a <HAL_TIM_PWM_Start+0x3e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	e015      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d109      	bne.n	8001c84 <HAL_TIM_PWM_Start+0x58>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e008      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e068      	b.n	8001d70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_PWM_Start+0x82>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cac:	e013      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_PWM_Start+0x92>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cbc:	e00b      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d104      	bne.n	8001cce <HAL_TIM_PWM_Start+0xa2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	e003      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fce8 	bl	80026b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_TIM_PWM_Start+0x14c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d107      	bne.n	8001cfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_TIM_PWM_Start+0x14c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d013      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_PWM_Start+0x150>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_TIM_PWM_Start+0x154>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_TIM_PWM_Start+0x158>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_TIM_PWM_Start+0x15c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d010      	beq.n	8001d6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	e007      	b.n	8001d6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40014000 	.word	0x40014000

08001d8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fc88 	bl	80026b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_TIM_PWM_Stop+0xc4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d117      	bne.n	8001dde <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_TIM_PWM_Stop+0x52>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	f240 4344 	movw	r3, #1092	; 0x444
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_PWM_Stop+0x52>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_TIM_PWM_Stop+0x82>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	f240 4344 	movw	r3, #1092	; 0x444
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_TIM_PWM_Stop+0x82>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_PWM_Stop+0x92>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	e013      	b.n	8001e46 <HAL_TIM_PWM_Stop+0xba>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PWM_Stop+0xa2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e2c:	e00b      	b.n	8001e46 <HAL_TIM_PWM_Stop+0xba>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_PWM_Stop+0xb2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e3c:	e003      	b.n	8001e46 <HAL_TIM_PWM_Stop+0xba>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010000 	.word	0x40010000

08001e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0ae      	b.n	8001fd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	f200 809f 	bhi.w	8001fc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001ebd 	.word	0x08001ebd
 8001e8c:	08001fc1 	.word	0x08001fc1
 8001e90:	08001fc1 	.word	0x08001fc1
 8001e94:	08001fc1 	.word	0x08001fc1
 8001e98:	08001efd 	.word	0x08001efd
 8001e9c:	08001fc1 	.word	0x08001fc1
 8001ea0:	08001fc1 	.word	0x08001fc1
 8001ea4:	08001fc1 	.word	0x08001fc1
 8001ea8:	08001f3f 	.word	0x08001f3f
 8001eac:	08001fc1 	.word	0x08001fc1
 8001eb0:	08001fc1 	.word	0x08001fc1
 8001eb4:	08001fc1 	.word	0x08001fc1
 8001eb8:	08001f7f 	.word	0x08001f7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f9d0 	bl	8002268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0204 	bic.w	r2, r2, #4
 8001ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6999      	ldr	r1, [r3, #24]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	619a      	str	r2, [r3, #24]
      break;
 8001efa:	e064      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fa16 	bl	8002334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6999      	ldr	r1, [r3, #24]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	021a      	lsls	r2, r3, #8
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
      break;
 8001f3c:	e043      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa61 	bl	800240c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0208 	orr.w	r2, r2, #8
 8001f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0204 	bic.w	r2, r2, #4
 8001f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69d9      	ldr	r1, [r3, #28]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	61da      	str	r2, [r3, #28]
      break;
 8001f7c:	e023      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 faab 	bl	80024e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69d9      	ldr	r1, [r3, #28]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8001fc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0b4      	b.n	800215e <HAL_TIM_ConfigClockSource+0x186>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202c:	d03e      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0xd4>
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	f200 8087 	bhi.w	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	f000 8086 	beq.w	800214a <HAL_TIM_ConfigClockSource+0x172>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d87f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b70      	cmp	r3, #112	; 0x70
 8002046:	d01a      	beq.n	800207e <HAL_TIM_ConfigClockSource+0xa6>
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d87b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	d050      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d877      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b50      	cmp	r3, #80	; 0x50
 8002056:	d03c      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d873      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d058      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x13a>
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d86f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b30      	cmp	r3, #48	; 0x30
 8002066:	d064      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d86b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d060      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b20      	cmp	r3, #32
 8002072:	d867      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05c      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	2b10      	cmp	r3, #16
 800207a:	d05a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 800207c:	e062      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f000 faf1 	bl	8002674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	609a      	str	r2, [r3, #8]
      break;
 80020aa:	e04f      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f000 fada 	bl	8002674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e03c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 fa4e 	bl	8002580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2150      	movs	r1, #80	; 0x50
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 faa7 	bl	800263e <TIM_ITRx_SetConfig>
      break;
 80020f0:	e02c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 fa6d 	bl	80025de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2160      	movs	r1, #96	; 0x60
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fa97 	bl	800263e <TIM_ITRx_SetConfig>
      break;
 8002110:	e01c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f000 fa2e 	bl	8002580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa87 	bl	800263e <TIM_ITRx_SetConfig>
      break;
 8002130:	e00c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f000 fa7e 	bl	800263e <TIM_ITRx_SetConfig>
      break;
 8002142:	e003      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e000      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800214a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <TIM_Base_SetConfig+0xe4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00f      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00b      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a31      	ldr	r2, [pc, #196]	; (8002250 <TIM_Base_SetConfig+0xe8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a30      	ldr	r2, [pc, #192]	; (8002254 <TIM_Base_SetConfig+0xec>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a2f      	ldr	r2, [pc, #188]	; (8002258 <TIM_Base_SetConfig+0xf0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <TIM_Base_SetConfig+0xe4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01b      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d017      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <TIM_Base_SetConfig+0xe8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a21      	ldr	r2, [pc, #132]	; (8002254 <TIM_Base_SetConfig+0xec>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00f      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a20      	ldr	r2, [pc, #128]	; (8002258 <TIM_Base_SetConfig+0xf0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00b      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <TIM_Base_SetConfig+0xf4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <TIM_Base_SetConfig+0xf8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <TIM_Base_SetConfig+0xfc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d108      	bne.n	8002204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <TIM_Base_SetConfig+0xe4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800

08002268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f023 0201 	bic.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 0302 	bic.w	r3, r3, #2
 80022b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <TIM_OC1_SetConfig+0xc8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10c      	bne.n	80022de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0308 	bic.w	r3, r3, #8
 80022ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <TIM_OC1_SetConfig+0xc8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d111      	bne.n	800230a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	621a      	str	r2, [r3, #32]
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40010000 	.word	0x40010000

08002334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0210 	bic.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0320 	bic.w	r3, r3, #32
 800237e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <TIM_OC2_SetConfig+0xd4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10d      	bne.n	80023b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <TIM_OC2_SetConfig+0xd4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d113      	bne.n	80023e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000

0800240c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <TIM_OC3_SetConfig+0xd0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10d      	bne.n	8002486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <TIM_OC3_SetConfig+0xd0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d113      	bne.n	80024b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800249c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40010000 	.word	0x40010000

080024e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	031b      	lsls	r3, r3, #12
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <TIM_OC4_SetConfig+0x9c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d109      	bne.n	8002554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000

08002580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 030a 	bic.w	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025de:	b480      	push	{r7}
 80025e0:	b087      	sub	sp, #28
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	031b      	lsls	r3, r3, #12
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800261a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	f043 0307 	orr.w	r3, r3, #7
 8002660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	431a      	orrs	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002714:	2302      	movs	r3, #2
 8002716:	e050      	b.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d013      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10c      	bne.n	80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4313      	orrs	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40014000 	.word	0x40014000

080027dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e03d      	b.n	8002874 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e03f      	b.n	8002912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe f8b8 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f829 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b0c0      	sub	sp, #256	; 0x100
 8002922:	af00      	add	r7, sp, #0
 8002924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	ea40 0301 	orr.w	r3, r0, r1
 8002944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002974:	f021 010c 	bic.w	r1, r1, #12
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002982:	430b      	orrs	r3, r1
 8002984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	ea40 0301 	orr.w	r3, r0, r1
 80029a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <UART_SetConfig+0x2cc>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0xa0>
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <UART_SetConfig+0x2d0>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff f87a 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 80029c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029c4:	e003      	b.n	80029ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff f861 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 80029ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	f040 810c 	bne.w	8002bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80029f6:	415b      	adcs	r3, r3
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029fe:	4621      	mov	r1, r4
 8002a00:	eb12 0801 	adds.w	r8, r2, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb43 0901 	adc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a50:	4613      	mov	r3, r2
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
 8002a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a60:	f7fd fbb8 	bl	80001d4 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a94:	4641      	mov	r1, r8
 8002a96:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	4692      	mov	sl, r2
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	eb1a 0303 	adds.w	r3, sl, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
 8002aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002af6:	f7fd fb6d 	bl	80001d4 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	; 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b18:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b24:	441c      	add	r4, r3
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b40:	415b      	adcs	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bb2:	f7fd fb0f 	bl	80001d4 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be4:	e105      	b.n	8002df2 <UART_SetConfig+0x4d6>
 8002be6:	bf00      	nop
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	6239      	str	r1, [r7, #32]
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	4641      	mov	r1, r8
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0501 	adc.w	r5, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c62:	4629      	mov	r1, r5
 8002c64:	008b      	lsls	r3, r1, #2
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	008a      	lsls	r2, r1, #2
 8002c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c74:	f7fd faae 	bl	80001d4 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	61b9      	str	r1, [r7, #24]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6139      	str	r1, [r7, #16]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d12:	f7fd fa5f 	bl	80001d4 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	; 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	3332      	adds	r3, #50	; 0x32
 8002d2e:	4a34      	ldr	r2, [pc, #208]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	441c      	add	r4, r3
 8002d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d40:	2200      	movs	r2, #0
 8002d42:	673b      	str	r3, [r7, #112]	; 0x70
 8002d44:	677a      	str	r2, [r7, #116]	; 0x74
 8002d46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	1891      	adds	r1, r2, r2
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	415b      	adcs	r3, r3
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	1851      	adds	r1, r2, r1
 8002d5e:	6039      	str	r1, [r7, #0]
 8002d60:	4649      	mov	r1, r9
 8002d62:	414b      	adcs	r3, r1
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d72:	4659      	mov	r1, fp
 8002d74:	00cb      	lsls	r3, r1, #3
 8002d76:	4651      	mov	r1, sl
 8002d78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	00ca      	lsls	r2, r1, #3
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	4603      	mov	r3, r0
 8002d86:	4642      	mov	r2, r8
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	460a      	mov	r2, r1
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002da0:	667a      	str	r2, [r7, #100]	; 0x64
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dae:	4649      	mov	r1, r9
 8002db0:	008b      	lsls	r3, r1, #2
 8002db2:	4641      	mov	r1, r8
 8002db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db8:	4641      	mov	r1, r8
 8002dba:	008a      	lsls	r2, r1, #2
 8002dbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dc0:	f7fd fa08 	bl	80001d4 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002dca:	fba3 1302 	umull	r1, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2164      	movs	r1, #100	; 0x64
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	3332      	adds	r3, #50	; 0x32
 8002ddc:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4422      	add	r2, r4
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfe:	bf00      	nop
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 f820 	bl	8002e5c <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08002e94 	.word	0x08002e94
 8002e40:	08002e94 	.word	0x08002e94
 8002e44:	08002e94 	.word	0x08002e94
 8002e48:	08002e98 	.word	0x08002e98

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
