
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a0c8  0800a0c8  0001a0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a50c  0800a50c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a514  0800a514  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a514  0800a514  0001a514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001f0  0800a70c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800a70c  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110b0  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e4  00000000  00000000  000312d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00034368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017614  00000000  00000000  00035268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012031  00000000  00000000  0004c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912ed  00000000  00000000  0005e8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efb9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  000efbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0b0 	.word	0x0800a0b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800a0b0 	.word	0x0800a0b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fd99 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f893 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 f9cb 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6e:	f000 f9a1 	bl	80012b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f72:	f000 f975 	bl	8001260 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f76:	f000 f8f7 	bl	8001168 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f7a:	f000 f923 	bl	80011c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  char string[32];
  int length;
  if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG1, 2, 10) == HAL_OK){
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <main+0x100>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b299      	uxth	r1, r3
 8000f84:	230a      	movs	r3, #10
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	4a35      	ldr	r2, [pc, #212]	; (8001060 <main+0x104>)
 8000f8c:	4835      	ldr	r0, [pc, #212]	; (8001064 <main+0x108>)
 8000f8e:	f001 fe05 	bl	8002b9c <HAL_I2C_Master_Transmit>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10b      	bne.n	8000fb0 <main+0x54>
	  length = snprintf(string, 32, "LIS2DE\r\n");
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4a33      	ldr	r2, [pc, #204]	; (8001068 <main+0x10c>)
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f006 fdfa 	bl	8007b98 <sniprintf>
 8000fa4:	6278      	str	r0, [r7, #36]	; 0x24
	  address = LIS2DE_ADD;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <main+0x100>)
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <main+0x110>)
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e028      	b.n	8001002 <main+0xa6>
  }else if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE12_ADD, CTRL_REG1, 2, 10) == HAL_OK){
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <main+0x114>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <main+0x104>)
 8000fbe:	4829      	ldr	r0, [pc, #164]	; (8001064 <main+0x108>)
 8000fc0:	f001 fdec 	bl	8002b9c <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <main+0x86>
	  length = snprintf(string, 32, "LIS2DE12\r\n");
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <main+0x118>)
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fde1 	bl	8007b98 <sniprintf>
 8000fd6:	6278      	str	r0, [r7, #36]	; 0x24
	  address = LIS2DE12_ADD;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <main+0x114>)
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <main+0x110>)
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e00f      	b.n	8001002 <main+0xa6>
  }else{
	  length = snprintf(string, 32, "error\r\n");
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4a24      	ldr	r2, [pc, #144]	; (8001078 <main+0x11c>)
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 fdd5 	bl	8007b98 <sniprintf>
 8000fee:	6278      	str	r0, [r7, #36]	; 0x24
	  HAL_UART_Transmit_DMA(&huart2, (unsigned char *)string, length);
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4820      	ldr	r0, [pc, #128]	; (800107c <main+0x120>)
 8000ffa:	f005 f915 	bl	8006228 <HAL_UART_Transmit_DMA>
	  return 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e028      	b.n	8001054 <main+0xf8>
  }

  HAL_UART_Transmit_DMA(&huart2, (unsigned char *)string, length);
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	b29a      	uxth	r2, r3
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4619      	mov	r1, r3
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <main+0x120>)
 800100c:	f005 f90c 	bl	8006228 <HAL_UART_Transmit_DMA>
  HAL_I2C_Master_Transmit(&hi2c1, address, CTRL_REG2, 2, 10);
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <main+0x110>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b299      	uxth	r1, r3
 8001016:	230a      	movs	r3, #10
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <main+0x124>)
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <main+0x108>)
 8001020:	f001 fdbc 	bl	8002b9c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, address, CTRL_REG3, 2, 10);
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <main+0x110>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b299      	uxth	r1, r3
 800102a:	230a      	movs	r3, #10
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2302      	movs	r3, #2
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <main+0x128>)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <main+0x108>)
 8001034:	f001 fdb2 	bl	8002b9c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, address, CTRL_REG4, 2, 10);
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <main+0x110>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b299      	uxth	r1, r3
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2302      	movs	r3, #2
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <main+0x12c>)
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <main+0x108>)
 8001048:	f001 fda8 	bl	8002b9c <HAL_I2C_Master_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <main+0x130>)
 800104e:	f004 fca7 	bl	80059a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001052:	e7fe      	b.n	8001052 <main+0xf6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001054:	4618      	mov	r0, r3
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004
 8001064:	2000020c 	.word	0x2000020c
 8001068:	0800a0c8 	.word	0x0800a0c8
 800106c:	200003ac 	.word	0x200003ac
 8001070:	20000001 	.word	0x20000001
 8001074:	0800a0d4 	.word	0x0800a0d4
 8001078:	0800a0e0 	.word	0x0800a0e0
 800107c:	20000308 	.word	0x20000308
 8001080:	20000008 	.word	0x20000008
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000010 	.word	0x20000010
 800108c:	200002c0 	.word	0x200002c0

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 f908 	bl	80072b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <SystemClock_Config+0xd0>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <SystemClock_Config+0xd0>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <SystemClock_Config+0xd0>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <SystemClock_Config+0xd4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <SystemClock_Config+0xd4>)
 80010de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemClock_Config+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001108:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800110e:	2304      	movs	r3, #4
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001112:	2307      	movs	r3, #7
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f003 ff58 	bl	8004fd0 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001126:	f000 f9ef 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f004 f9ba 	bl	80054c0 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001152:	f000 f9d9 	bl	8001508 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x50>)
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_I2C1_Init+0x54>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_I2C1_Init+0x58>)
 8001176:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a6:	f001 fbb5 	bl	8002914 <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 f9aa 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000020c 	.word	0x2000020c
 80011bc:	40005400 	.word	0x40005400
 80011c0:	000186a0 	.word	0x000186a0

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM2_Init+0x94>)
 80011e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM2_Init+0x94>)
 80011ea:	2253      	movs	r2, #83	; 0x53
 80011ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM2_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_TIM2_Init+0x94>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <MX_TIM2_Init+0x98>)
 80011f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM2_Init+0x94>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM2_Init+0x94>)
 8001208:	f004 fb7a 	bl	8005900 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 f979 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM2_Init+0x94>)
 8001224:	f004 fd26 	bl	8005c74 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 f96b 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM2_Init+0x94>)
 8001240:	f004 ff22 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800124a:	f000 f95d 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002c0 	.word	0x200002c0
 800125c:	000f423f 	.word	0x000f423f

08001260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART2_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001298:	f004 ff78 	bl	800618c <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 f931 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000308 	.word	0x20000308
 80012b0:	40004400 	.word	0x40004400

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_DMA_Init+0x4c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <MX_DMA_Init+0x4c>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_DMA_Init+0x4c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200b      	movs	r0, #11
 80012dc:	f000 fd29 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e0:	200b      	movs	r0, #11
 80012e2:	f000 fd42 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2011      	movs	r0, #17
 80012ec:	f000 fd21 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012f0:	2011      	movs	r0, #17
 80012f2:	f000 fd3a 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_GPIO_Init+0xd0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_GPIO_Init+0xd0>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0xd4>)
 8001390:	f001 faa6 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800139a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_GPIO_Init+0xd8>)
 80013ac:	f001 f914 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013b0:	2320      	movs	r3, #32
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_GPIO_Init+0xd4>)
 80013c8:	f001 f906 	bl	80025d8 <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800

080013e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, address, &OUT_Z, 1, 50);
	HAL_I2C_Master_Receive(&hi2c1, address+1, &z, 1, 50);
	*/

	HAL_I2C_Master_Transmit(&hi2c1, address, &OUT_X, 1, 50);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b299      	uxth	r1, r3
 80013ee:	2332      	movs	r3, #50	; 0x32
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013f8:	f001 fbd0 	bl	8002b9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive_DMA(&hi2c1, address+1, outputs, 5);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	3301      	adds	r3, #1
 8001404:	b299      	uxth	r1, r3
 8001406:	2305      	movs	r3, #5
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800140c:	f001 fcc4 	bl	8002d98 <HAL_I2C_Master_Receive_DMA>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200003ac 	.word	0x200003ac
 800141c:	20000012 	.word	0x20000012
 8001420:	2000020c 	.word	0x2000020c
 8001424:	200003b0 	.word	0x200003b0

08001428 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800142c:	b09c      	sub	sp, #112	; 0x70
 800142e:	af06      	add	r7, sp, #24
 8001430:	6078      	str	r0, [r7, #4]
	float x = outputs[0]/64.0;
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f87b 	bl	8000534 <__aeabi_i2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8001444:	f7ff fa0a 	bl	800085c <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fbb2 	bl	8000bb8 <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
	float y = outputs[2]/64.0;
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 800145a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f868 	bl	8000534 <__aeabi_i2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_I2C_MasterRxCpltCallback+0xd4>)
 800146a:	f7ff f9f7 	bl	800085c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb9f 	bl	8000bb8 <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	653b      	str	r3, [r7, #80]	; 0x50
	float z = outputs[4]/64.0;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8001480:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f855 	bl	8000534 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb8c 	bl	8000bb8 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	char string[64];
	int length;
	length = snprintf(string, 64, "x = %+.3f g y = %+.3f g z = %+.3f g\r\n", x, y, z);
 80014a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80014a6:	f7ff f857 	bl	8000558 <__aeabi_f2d>
 80014aa:	4604      	mov	r4, r0
 80014ac:	460d      	mov	r5, r1
 80014ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014b0:	f7ff f852 	bl	8000558 <__aeabi_f2d>
 80014b4:	4680      	mov	r8, r0
 80014b6:	4689      	mov	r9, r1
 80014b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014ba:	f7ff f84d 	bl	8000558 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	f107 0008 	add.w	r0, r7, #8
 80014c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014ce:	e9cd 4500 	strd	r4, r5, [sp]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	f006 fb5f 	bl	8007b98 <sniprintf>
 80014da:	64b8      	str	r0, [r7, #72]	; 0x48

	HAL_UART_Transmit_DMA(&huart2, (unsigned char *)string, length);
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 80014e8:	f004 fe9e 	bl	8006228 <HAL_UART_Transmit_DMA>
}
 80014ec:	bf00      	nop
 80014ee:	3758      	adds	r7, #88	; 0x58
 80014f0:	46bd      	mov	sp, r7
 80014f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014f6:	bf00      	nop
 80014f8:	200003b0 	.word	0x200003b0
 80014fc:	40500000 	.word	0x40500000
 8001500:	0800a0e8 	.word	0x0800a0e8
 8001504:	20000308 	.word	0x20000308

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_MspInit+0x4c>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001552:	2007      	movs	r0, #7
 8001554:	f000 fbe2 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_I2C_MspInit+0x100>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d16a      	bne.n	800165c <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_I2C_MspInit+0x104>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a36      	ldr	r2, [pc, #216]	; (8001668 <HAL_I2C_MspInit+0x104>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_I2C_MspInit+0x104>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b4:	2304      	movs	r3, #4
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	482b      	ldr	r0, [pc, #172]	; (800166c <HAL_I2C_MspInit+0x108>)
 80015c0:	f001 f80a 	bl	80025d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_I2C_MspInit+0x104>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_I2C_MspInit+0x104>)
 80015ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_I2C_MspInit+0x104>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_I2C_MspInit+0x110>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 80015e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001622:	f000 fbbd 	bl	8001da0 <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800162c:	f7ff ff6c 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_I2C_MspInit+0x10c>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	201f      	movs	r0, #31
 8001642:	f000 fb76 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001646:	201f      	movs	r0, #31
 8001648:	f000 fb8f 	bl	8001d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2020      	movs	r0, #32
 8001652:	f000 fb6e 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001656:	2020      	movs	r0, #32
 8001658:	f000 fb87 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40005400 	.word	0x40005400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400
 8001670:	20000260 	.word	0x20000260
 8001674:	40026010 	.word	0x40026010

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d115      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201c      	movs	r0, #28
 80016ac:	f000 fb41 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b0:	201c      	movs	r0, #28
 80016b2:	f000 fb5a 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_UART_MspInit+0xf0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d161      	bne.n	80017aa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_UART_MspInit+0xf4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4820      	ldr	r0, [pc, #128]	; (80017bc <HAL_UART_MspInit+0xf8>)
 800173a:	f000 ff4d 	bl	80025d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <HAL_UART_MspInit+0x100>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800175a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800177e:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001780:	f000 fb0e 	bl	8001da0 <HAL_DMA_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800178a:	f7ff febd 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2026      	movs	r0, #38	; 0x26
 80017a0:	f000 fac7 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a4:	2026      	movs	r0, #38	; 0x26
 80017a6:	f000 fae0 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40004400 	.word	0x40004400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	2000034c 	.word	0x2000034c
 80017c4:	400260a0 	.word	0x400260a0

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f992 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Stream0_IRQHandler+0x10>)
 8001822:	f000 fc55 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000260 	.word	0x20000260

08001830 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA1_Stream6_IRQHandler+0x10>)
 8001836:	f000 fc4b 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000034c 	.word	0x2000034c

08001844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM2_IRQHandler+0x10>)
 800184a:	f004 f90b 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002c0 	.word	0x200002c0

08001858 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <I2C1_EV_IRQHandler+0x10>)
 800185e:	f001 fbcb 	bl	8002ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000020c 	.word	0x2000020c

0800186c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <I2C1_ER_IRQHandler+0x10>)
 8001872:	f001 fd32 	bl	80032da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000020c 	.word	0x2000020c

08001880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART2_IRQHandler+0x10>)
 8001886:	f004 fd4d 	bl	8006324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000308 	.word	0x20000308

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ae:	f005 fcd7 	bl	8007260 <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
	return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d6:	e7fe      	b.n	80018d6 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
	}

return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e009      	b.n	8001938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf1      	blt.n	8001924 <_write+0x12>
	}
	return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001972:	605a      	str	r2, [r3, #4]
	return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f005 fc3c 	bl	8007260 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20018000 	.word	0x20018000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	200003b8 	.word	0x200003b8
 8001a1c:	200003d0 	.word	0x200003d0

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a60:	4c0b      	ldr	r4, [pc, #44]	; (8001a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a6e:	f7ff ffd7 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f005 fbfb 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7ff fa71 	bl	8000f5c <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a88:	0800a51c 	.word	0x0800a51c
  ldr r2, =_sbss
 8001a8c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a90:	200003d0 	.word	0x200003d0

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_Init+0x40>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_Init+0x40>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x40>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f92b 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fd22 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f943 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f90b 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000014 	.word	0x20000014
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	20000018 	.word	0x20000018

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000001c 	.word	0x2000001c
 8001b60:	200003bc 	.word	0x200003bc

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200003bc 	.word	0x200003bc

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff feda 	bl	8001b64 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e099      	b.n	8001ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e00f      	b.n	8001dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fec1 	bl	8001b64 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d908      	bls.n	8001dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e078      	b.n	8001ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_DMA_Init+0x158>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d117      	bne.n	8001ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fb1b 	bl	80024e0 <DMA_CheckFifoParam>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fad2 	bl	8002474 <DMA_CalcBaseAndBitshift>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f010803f 	.word	0xf010803f

08001efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Start_IT+0x26>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e040      	b.n	8001fa4 <HAL_DMA_Start_IT+0xa8>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12f      	bne.n	8001f96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fa64 	bl	8002418 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0216 	orr.w	r2, r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e005      	b.n	8001fa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fba:	f7ff fdd3 	bl	8001b64 <HAL_GetTick>
 8001fbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d008      	beq.n	8001fde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e052      	b.n	8002084 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0216 	bic.w	r2, r2, #22
 8001fec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <HAL_DMA_Abort+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0208 	bic.w	r2, r2, #8
 800201c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	e013      	b.n	8002058 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002030:	f7ff fd98 	bl	8001b64 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b05      	cmp	r3, #5
 800203c:	d90c      	bls.n	8002058 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2203      	movs	r2, #3
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e015      	b.n	8002084 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e4      	bne.n	8002030 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	223f      	movs	r2, #63	; 0x3f
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d004      	beq.n	80020aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00c      	b.n	80020c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020dc:	4b8e      	ldr	r3, [pc, #568]	; (8002318 <HAL_DMA_IRQHandler+0x248>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a8e      	ldr	r2, [pc, #568]	; (800231c <HAL_DMA_IRQHandler+0x24c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0a9b      	lsrs	r3, r3, #10
 80020e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2208      	movs	r2, #8
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01a      	beq.n	800213c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0204 	bic.w	r2, r2, #4
 8002122:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2208      	movs	r2, #8
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d012      	beq.n	8002172 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2201      	movs	r2, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f043 0202 	orr.w	r2, r3, #2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2204      	movs	r2, #4
 8002178:	409a      	lsls	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2204      	movs	r2, #4
 8002196:	409a      	lsls	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f043 0204 	orr.w	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	2210      	movs	r2, #16
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d043      	beq.n	8002240 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03c      	beq.n	8002240 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2210      	movs	r2, #16
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d018      	beq.n	8002212 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d024      	beq.n	8002240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
 80021fe:	e01f      	b.n	8002240 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e016      	b.n	8002240 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0208 	bic.w	r2, r2, #8
 800222e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2220      	movs	r2, #32
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 808f 	beq.w	8002370 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8087 	beq.w	8002370 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2220      	movs	r2, #32
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b05      	cmp	r3, #5
 8002278:	d136      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0216 	bic.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002298:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <HAL_DMA_IRQHandler+0x1da>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0208 	bic.w	r2, r2, #8
 80022b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	223f      	movs	r2, #63	; 0x3f
 80022c0:	409a      	lsls	r2, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d07e      	beq.n	80023dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
        }
        return;
 80022e6:	e079      	b.n	80023dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01d      	beq.n	8002332 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10d      	bne.n	8002320 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	2b00      	cmp	r3, #0
 800230a:	d031      	beq.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e02c      	b.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
 8002316:	bf00      	nop
 8002318:	20000014 	.word	0x20000014
 800231c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e01e      	b.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10f      	bne.n	8002360 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0210 	bic.w	r2, r2, #16
 800234e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	2b00      	cmp	r3, #0
 8002376:	d032      	beq.n	80023de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d022      	beq.n	80023ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d307      	bcc.n	80023b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f2      	bne.n	800239c <HAL_DMA_IRQHandler+0x2cc>
 80023b6:	e000      	b.n	80023ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
 80023da:	e000      	b.n	80023de <HAL_DMA_IRQHandler+0x30e>
        return;
 80023dc:	bf00      	nop
    }
  }
}
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002434:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d108      	bne.n	8002458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002456:	e007      	b.n	8002468 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3b10      	subs	r3, #16
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <DMA_CalcBaseAndBitshift+0x68>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d909      	bls.n	80024b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58
 80024b4:	e007      	b.n	80024c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	aaaaaaab 	.word	0xaaaaaaab
 80024dc:	0800a128 	.word	0x0800a128

080024e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11f      	bne.n	800253a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d856      	bhi.n	80025ae <DMA_CheckFifoParam+0xce>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <DMA_CheckFifoParam+0x28>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	08002519 	.word	0x08002519
 800250c:	0800252b 	.word	0x0800252b
 8002510:	08002519 	.word	0x08002519
 8002514:	080025af 	.word	0x080025af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d046      	beq.n	80025b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002528:	e043      	b.n	80025b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002532:	d140      	bne.n	80025b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002538:	e03d      	b.n	80025b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002542:	d121      	bne.n	8002588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d837      	bhi.n	80025ba <DMA_CheckFifoParam+0xda>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <DMA_CheckFifoParam+0x70>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	08002561 	.word	0x08002561
 8002554:	08002567 	.word	0x08002567
 8002558:	08002561 	.word	0x08002561
 800255c:	08002579 	.word	0x08002579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      break;
 8002564:	e030      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d025      	beq.n	80025be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002576:	e022      	b.n	80025be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002580:	d11f      	bne.n	80025c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002586:	e01c      	b.n	80025c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d903      	bls.n	8002596 <DMA_CheckFifoParam+0xb6>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d003      	beq.n	800259c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002594:	e018      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      break;
 800259a:	e015      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e00b      	b.n	80025c6 <DMA_CheckFifoParam+0xe6>
      break;
 80025ae:	bf00      	nop
 80025b0:	e00a      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e008      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e006      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
 80025bc:	e004      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
    }
  } 
  
  return status; 
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e159      	b.n	80028a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8148 	bne.w	80028a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d005      	beq.n	800262a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002626:	2b02      	cmp	r3, #2
 8002628:	d130      	bne.n	800268c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0201 	and.w	r2, r3, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d017      	beq.n	80026c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d123      	bne.n	800271c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a2 	beq.w	80028a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_GPIO_Init+0x2ec>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a49      	ldr	r2, [pc, #292]	; (80028c8 <HAL_GPIO_Init+0x2f0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x202>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_GPIO_Init+0x2f4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x1fe>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_GPIO_Init+0x2f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x1fa>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <HAL_GPIO_Init+0x2fc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x1f6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_GPIO_Init+0x300>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x1f2>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e008      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4935      	ldr	r1, [pc, #212]	; (80028c4 <HAL_GPIO_Init+0x2ec>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_GPIO_Init+0x304>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a24      	ldr	r2, [pc, #144]	; (80028dc <HAL_GPIO_Init+0x304>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_GPIO_Init+0x304>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_GPIO_Init+0x304>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f aea2 	bls.w	80025f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40013c00 	.word	0x40013c00

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e12b      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fe12 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002978:	f002 ff9a 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a81      	ldr	r2, [pc, #516]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d807      	bhi.n	8002998 <HAL_I2C_Init+0x84>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_I2C_Init+0x278>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e006      	b.n	80029a6 <HAL_I2C_Init+0x92>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_I2C_Init+0x27c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0e7      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_I2C_Init+0x280>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9b      	lsrs	r3, r3, #18
 80029b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_I2C_Init+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <HAL_I2C_Init+0xd4>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	e009      	b.n	80029fc <HAL_I2C_Init+0xe8>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_I2C_Init+0x284>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	495c      	ldr	r1, [pc, #368]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	d819      	bhi.n	8002a50 <HAL_I2C_Init+0x13c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a30:	400b      	ands	r3, r1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_I2C_Init+0x138>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e59      	subs	r1, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	e051      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e04f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_I2C_Init+0x168>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_I2C_Init+0x18e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x196>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e022      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_I2C_Init+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6911      	ldr	r1, [r2, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	000186a0 	.word	0x000186a0
 8002b8c:	001e847f 	.word	0x001e847f
 8002b90:	003d08ff 	.word	0x003d08ff
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
 8002bac:	4613      	mov	r3, r2
 8002bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7fe ffd8 	bl	8001b64 <HAL_GetTick>
 8002bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f040 80e0 	bne.w	8002d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4970      	ldr	r1, [pc, #448]	; (8002d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f002 f82a 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0d3      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x50>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e0cc      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d007      	beq.n	8002c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2221      	movs	r2, #33	; 0x21
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	893a      	ldrh	r2, [r7, #8]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f001 fda8 	bl	80047b0 <I2C_MasterRequestWrite>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e08d      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c80:	e066      	b.n	8002d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f002 f8a4 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d107      	bne.n	8002caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06b      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x188>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	6a39      	ldr	r1, [r7, #32]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f002 f894 	bl	8004e56 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e01a      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d194      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	00100002 	.word	0x00100002
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
 8002da8:	4613      	mov	r3, r2
 8002daa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 810d 	bne.w	8002fd8 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0a1a      	lsrs	r2, r3, #8
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0e3      	b.n	8002fda <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d0db      	beq.n	8002dd8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Master_Receive_DMA+0x96>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0d5      	b.n	8002fda <HAL_I2C_Master_Receive_DMA+0x242>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d007      	beq.n	8002e54 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2222      	movs	r2, #34	; 0x22
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	893a      	ldrh	r2, [r7, #8]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a56      	ldr	r2, [pc, #344]	; (8002fec <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e96:	897a      	ldrh	r2, [r7, #10]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d07b      	beq.n	8002f9c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02a      	beq.n	8002f02 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	; (8002ff0 <HAL_I2C_Master_Receive_DMA+0x258>)
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	4a4e      	ldr	r2, [pc, #312]	; (8002ff4 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002eba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	461a      	mov	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	f7ff f803 	bl	8001efc <HAL_DMA_Start_IT>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d139      	bne.n	8002f74 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002f00:	e013      	b.n	8002f2a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e057      	b.n	8002fda <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f48:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f60:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e02f      	b.n	8002fd4 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0210 	orr.w	r2, r3, #16
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e01e      	b.n	8002fda <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002fb2:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	14f8b589 	.word	0x14f8b589
 8002fec:	ffff0000 	.word	0xffff0000
 8002ff0:	080048b5 	.word	0x080048b5
 8002ff4:	08004a5f 	.word	0x08004a5f

08002ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003018:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b10      	cmp	r3, #16
 8003026:	d003      	beq.n	8003030 <HAL_I2C_EV_IRQHandler+0x38>
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	f040 80c1 	bne.w	80031b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <HAL_I2C_EV_IRQHandler+0x6e>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003050:	d003      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0x62>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003058:	d101      	bne.n	800305e <HAL_I2C_EV_IRQHandler+0x66>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_I2C_EV_IRQHandler+0x68>
 800305e:	2300      	movs	r3, #0
 8003060:	2b01      	cmp	r3, #1
 8003062:	f000 8132 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0x92>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	0a5b      	lsrs	r3, r3, #9
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 ff8c 	bl	8004f9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fd79 	bl	8003b7a <I2C_Master_SB>
 8003088:	e092      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_I2C_EV_IRQHandler+0xb2>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	0a5b      	lsrs	r3, r3, #9
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fdef 	bl	8003c86 <I2C_Master_ADD10>
 80030a8:	e082      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0xd2>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	0a5b      	lsrs	r3, r3, #9
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fe09 	bl	8003cda <I2C_Master_ADDR>
 80030c8:	e072      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03b      	beq.n	800314e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e4:	f000 80f3 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	09db      	lsrs	r3, r3, #7
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00f      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x11c>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x11c>
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f9e9 	bl	80034e4 <I2C_MasterTransmit_TXE>
 8003112:	e04d      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80d6 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80cf 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003130:	7bbb      	ldrb	r3, [r7, #14]
 8003132:	2b21      	cmp	r3, #33	; 0x21
 8003134:	d103      	bne.n	800313e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa70 	bl	800361c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	e0c7      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	f040 80c4 	bne.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fade 	bl	8003708 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314c:	e0bf      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	f000 80b7 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <HAL_I2C_EV_IRQHandler+0x194>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	0a9b      	lsrs	r3, r3, #10
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_I2C_EV_IRQHandler+0x194>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d103      	bne.n	800318c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb53 	bl	8003830 <I2C_MasterReceive_RXNE>
 800318a:	e011      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 809a 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	0a5b      	lsrs	r3, r3, #9
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8093 	beq.w	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fbfc 	bl	80039a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ae:	e08e      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80031b0:	e08d      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e007      	b.n	80031d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <HAL_I2C_EV_IRQHandler+0x20e>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	0a5b      	lsrs	r3, r3, #9
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031fc:	69b9      	ldr	r1, [r7, #24]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 ffba 	bl	8004178 <I2C_Slave_ADDR>
 8003204:	e066      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x22e>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fff4 	bl	800420c <I2C_Slave_STOPF>
 8003224:	e056      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003226:	7bbb      	ldrb	r3, [r7, #14]
 8003228:	2b21      	cmp	r3, #33	; 0x21
 800322a:	d002      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x23a>
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	2b29      	cmp	r3, #41	; 0x29
 8003230:	d125      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	09db      	lsrs	r3, r3, #7
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00f      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x266>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	0a9b      	lsrs	r3, r3, #10
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x266>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fed0 	bl	8003ffc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325c:	e039      	b.n	80032d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d033      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	0a5b      	lsrs	r3, r3, #9
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02d      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fefd 	bl	8004076 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327c:	e029      	b.n	80032d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00f      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	0a9b      	lsrs	r3, r3, #10
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 ff08 	bl	80040b8 <I2C_SlaveReceive_RXNE>
 80032a8:	e014      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	0a5b      	lsrs	r3, r3, #9
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 ff36 	bl	8004134 <I2C_SlaveReceive_BTF>
 80032c8:	e004      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032ca:	bf00      	nop
 80032cc:	e002      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08a      	sub	sp, #40	; 0x28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x4e>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003326:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	0a5b      	lsrs	r3, r3, #9
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x78>
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003350:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	0a9b      	lsrs	r3, r3, #10
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03f      	beq.n	80033de <HAL_I2C_ER_IRQHandler+0x104>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d039      	beq.n	80033de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800336a:	7efb      	ldrb	r3, [r7, #27]
 800336c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003384:	7ebb      	ldrb	r3, [r7, #26]
 8003386:	2b20      	cmp	r3, #32
 8003388:	d112      	bne.n	80033b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b21      	cmp	r3, #33	; 0x21
 8003394:	d008      	beq.n	80033a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b29      	cmp	r3, #41	; 0x29
 800339a:	d005      	beq.n	80033a8 <HAL_I2C_ER_IRQHandler+0xce>
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b28      	cmp	r3, #40	; 0x28
 80033a0:	d106      	bne.n	80033b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b21      	cmp	r3, #33	; 0x21
 80033a6:	d103      	bne.n	80033b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 f85f 	bl	800446c <I2C_Slave_AF>
 80033ae:	e016      	b.n	80033de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d002      	beq.n	80033ce <HAL_I2C_ER_IRQHandler+0xf4>
 80033c8:	7efb      	ldrb	r3, [r7, #27]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d107      	bne.n	80033de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	0adb      	lsrs	r3, r3, #11
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00e      	beq.n	8003408 <HAL_I2C_ER_IRQHandler+0x12e>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003406:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 f896 	bl	800454c <I2C_ITError>
  }
}
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
 8003470:	4613      	mov	r3, r2
 8003472:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d150      	bne.n	80035ac <I2C_MasterTransmit_TXE+0xc8>
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b21      	cmp	r3, #33	; 0x21
 800350e:	d14d      	bne.n	80035ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d01d      	beq.n	8003552 <I2C_MasterTransmit_TXE+0x6e>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b20      	cmp	r3, #32
 800351a:	d01a      	beq.n	8003552 <I2C_MasterTransmit_TXE+0x6e>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003522:	d016      	beq.n	8003552 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003532:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2211      	movs	r2, #17
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff6c 	bl	8003428 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003550:	e060      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003560:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d107      	bne.n	800359c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff7d 	bl	8003494 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800359a:	e03b      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff3f 	bl	8003428 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035aa:	e033      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b21      	cmp	r3, #33	; 0x21
 80035b0:	d005      	beq.n	80035be <I2C_MasterTransmit_TXE+0xda>
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d12d      	bne.n	8003614 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b22      	cmp	r3, #34	; 0x22
 80035bc:	d12a      	bne.n	8003614 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d108      	bne.n	80035da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035d8:	e01c      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d103      	bne.n	80035ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f88e 	bl	8003708 <I2C_MemoryTransmit_TXE_BTF>
}
 80035ec:	e012      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003612:	e7ff      	b.n	8003614 <I2C_MasterTransmit_TXE+0x130>
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b21      	cmp	r3, #33	; 0x21
 8003634:	d164      	bne.n	8003700 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003664:	e04c      	b.n	8003700 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d01d      	beq.n	80036a8 <I2C_MasterTransmit_BTF+0x8c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b20      	cmp	r3, #32
 8003670:	d01a      	beq.n	80036a8 <I2C_MasterTransmit_BTF+0x8c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003678:	d016      	beq.n	80036a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003688:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2211      	movs	r2, #17
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fec1 	bl	8003428 <HAL_I2C_MasterTxCpltCallback>
}
 80036a6:	e02b      	b.n	8003700 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d107      	bne.n	80036f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fed2 	bl	8003494 <HAL_I2C_MemTxCpltCallback>
}
 80036f0:	e006      	b.n	8003700 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fe94 	bl	8003428 <HAL_I2C_MasterTxCpltCallback>
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10b      	bne.n	8003740 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	1c9a      	adds	r2, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800373e:	e073      	b.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003744:	b29b      	uxth	r3, r3
 8003746:	121b      	asrs	r3, r3, #8
 8003748:	b2da      	uxtb	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800375a:	e065      	b.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10b      	bne.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	b2da      	uxtb	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800377a:	e055      	b.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	2b02      	cmp	r3, #2
 8003782:	d151      	bne.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b22      	cmp	r3, #34	; 0x22
 8003788:	d10d      	bne.n	80037a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003798:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037a4:	e040      	b.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d112      	bne.n	80037dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037da:	e025      	b.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d120      	bne.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b21      	cmp	r3, #33	; 0x21
 80037ea:	d11d      	bne.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fe36 	bl	8003494 <HAL_I2C_MemTxCpltCallback>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b22      	cmp	r3, #34	; 0x22
 8003842:	f040 80ac 	bne.w	800399e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d921      	bls.n	8003898 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b03      	cmp	r3, #3
 8003882:	f040 808c 	bne.w	800399e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003894:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003896:	e082      	b.n	800399e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2b02      	cmp	r3, #2
 800389e:	d075      	beq.n	800398c <I2C_MasterReceive_RXNE+0x15c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <I2C_MasterReceive_RXNE+0x7c>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d16f      	bne.n	800398c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f001 fb13 	bl	8004ed8 <I2C_WaitOnSTOPRequestThroughIT>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d142      	bne.n	800393e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d10a      	bne.n	8003928 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fdc1 	bl	80034a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003926:	e03a      	b.n	800399e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2212      	movs	r2, #18
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fd76 	bl	8001428 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800393c:	e02f      	b.n	800399e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fd99 	bl	80034bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800398a:	e008      	b.n	800399e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	605a      	str	r2, [r3, #4]
}
 800399c:	e7ff      	b.n	800399e <I2C_MasterReceive_RXNE+0x16e>
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d11b      	bne.n	80039f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039f4:	e0bd      	b.n	8003b72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d129      	bne.n	8003a54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00a      	beq.n	8003a2c <I2C_MasterReceive_BTF+0x86>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d007      	beq.n	8003a2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a52:	e08e      	b.n	8003b72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d176      	bne.n	8003b4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d002      	beq.n	8003a6a <I2C_MasterReceive_BTF+0xc4>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d108      	bne.n	8003a7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e019      	b.n	8003ab0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d002      	beq.n	8003a88 <I2C_MasterReceive_BTF+0xe2>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d108      	bne.n	8003a9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e00a      	b.n	8003ab0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d007      	beq.n	8003ab0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d10a      	bne.n	8003b36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fcba 	bl	80034a8 <HAL_I2C_MemRxCpltCallback>
}
 8003b34:	e01d      	b.n	8003b72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2212      	movs	r2, #18
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd fc6f 	bl	8001428 <HAL_I2C_MasterRxCpltCallback>
}
 8003b4a:	e012      	b.n	8003b72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d117      	bne.n	8003bbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ba8:	e067      	b.n	8003c7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
}
 8003bbc:	e05d      	b.n	8003c7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc6:	d133      	bne.n	8003c30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b21      	cmp	r3, #33	; 0x21
 8003bd2:	d109      	bne.n	8003be8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	e008      	b.n	8003bfa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <I2C_Master_SB+0x92>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d108      	bne.n	8003c1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <I2C_Master_SB+0x100>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02d      	beq.n	8003c7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2c:	605a      	str	r2, [r3, #4]
}
 8003c2e:	e024      	b.n	8003c7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10e      	bne.n	8003c56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	11db      	asrs	r3, r3, #7
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0306 	and.w	r3, r3, #6
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f063 030f 	orn	r3, r3, #15
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
}
 8003c54:	e011      	b.n	8003c7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10d      	bne.n	8003c7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	11db      	asrs	r3, r3, #7
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0306 	and.w	r3, r3, #6
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f063 030e 	orn	r3, r3, #14
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <I2C_Master_ADD10+0x26>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d108      	bne.n	8003cbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <I2C_Master_ADD10+0x48>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ccc:	605a      	str	r2, [r3, #4]
  }
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b091      	sub	sp, #68	; 0x44
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b22      	cmp	r3, #34	; 0x22
 8003d02:	f040 8169 	bne.w	8003fd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <I2C_Master_ADDR+0x54>
 8003d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d10b      	bne.n	8003d2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	633b      	str	r3, [r7, #48]	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	e160      	b.n	8003ff0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11d      	bne.n	8003d72 <I2C_Master_ADDR+0x98>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d3e:	d118      	bne.n	8003d72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d70:	e13e      	b.n	8003ff0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e115      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f040 808a 	bne.w	8003ec4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db6:	d137      	bne.n	8003e28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d113      	bne.n	8003e00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	e0e7      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e0d3      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d02e      	beq.n	8003e8c <I2C_Master_ADDR+0x1b2>
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d02b      	beq.n	8003e8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d102      	bne.n	8003e40 <I2C_Master_ADDR+0x166>
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d125      	bne.n	8003e8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00e      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d00b      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d008      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e007      	b.n	8003e74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	e0a1      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e085      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d14d      	bne.n	8003f6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d016      	beq.n	8003f02 <I2C_Master_ADDR+0x228>
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d013      	beq.n	8003f02 <I2C_Master_ADDR+0x228>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d010      	beq.n	8003f02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e007      	b.n	8003f12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d117      	bne.n	8003f52 <I2C_Master_ADDR+0x278>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f28:	d00b      	beq.n	8003f42 <I2C_Master_ADDR+0x268>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d008      	beq.n	8003f42 <I2C_Master_ADDR+0x268>
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d005      	beq.n	8003f42 <I2C_Master_ADDR+0x268>
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d002      	beq.n	8003f42 <I2C_Master_ADDR+0x268>
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d107      	bne.n	8003f52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	e032      	b.n	8003fd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f88:	d117      	bne.n	8003fba <I2C_Master_ADDR+0x2e0>
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f90:	d00b      	beq.n	8003faa <I2C_Master_ADDR+0x2d0>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d008      	beq.n	8003faa <I2C_Master_ADDR+0x2d0>
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d005      	beq.n	8003faa <I2C_Master_ADDR+0x2d0>
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d002      	beq.n	8003faa <I2C_Master_ADDR+0x2d0>
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d107      	bne.n	8003fba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fd6:	e00b      	b.n	8003ff0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	e7ff      	b.n	8003ff0 <I2C_Master_ADDR+0x316>
 8003ff0:	bf00      	nop
 8003ff2:	3744      	adds	r7, #68	; 0x44
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d02b      	beq.n	800406e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d114      	bne.n	800406e <I2C_SlaveTransmit_TXE+0x72>
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b29      	cmp	r3, #41	; 0x29
 8004048:	d111      	bne.n	800406e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2221      	movs	r2, #33	; 0x21
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2228      	movs	r2, #40	; 0x28
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff f9e7 	bl	800343c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d011      	beq.n	80040ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02c      	beq.n	800412c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d114      	bne.n	800412c <I2C_SlaveReceive_RXNE+0x74>
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b2a      	cmp	r3, #42	; 0x2a
 8004106:	d111      	bne.n	800412c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004116:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2228      	movs	r2, #40	; 0x28
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff f992 	bl	8003450 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004192:	2b28      	cmp	r3, #40	; 0x28
 8004194:	d127      	bne.n	80041e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	09db      	lsrs	r3, r3, #7
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	81bb      	strh	r3, [r7, #12]
 80041c8:	e002      	b.n	80041d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041d8:	89ba      	ldrh	r2, [r7, #12]
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff f940 	bl	8003464 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041e4:	e00e      	b.n	8004204 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004258:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d172      	bne.n	8004350 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b22      	cmp	r3, #34	; 0x22
 800426e:	d002      	beq.n	8004276 <I2C_Slave_STOPF+0x6a>
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b2a      	cmp	r3, #42	; 0x2a
 8004274:	d135      	bne.n	80042e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe f898 	bl	80023e4 <HAL_DMA_GetState>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d049      	beq.n	800434e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4a69      	ldr	r2, [pc, #420]	; (8004464 <I2C_Slave_STOPF+0x258>)
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fee0 	bl	800208c <HAL_DMA_Abort_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03d      	beq.n	800434e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e0:	e035      	b.n	800434e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f043 0204 	orr.w	r2, r3, #4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004314:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f862 	bl	80023e4 <HAL_DMA_GetState>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d014      	beq.n	8004350 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	4a4e      	ldr	r2, [pc, #312]	; (8004464 <I2C_Slave_STOPF+0x258>)
 800432c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd feaa 	bl	800208c <HAL_DMA_Abort_IT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004348:	4610      	mov	r0, r2
 800434a:	4798      	blx	r3
 800434c:	e000      	b.n	8004350 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800434e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03e      	beq.n	80043d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d112      	bne.n	800438e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d112      	bne.n	80043c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8b3 	bl	800454c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043e6:	e039      	b.n	800445c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b2a      	cmp	r3, #42	; 0x2a
 80043ec:	d109      	bne.n	8004402 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2228      	movs	r2, #40	; 0x28
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff f827 	bl	8003450 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b28      	cmp	r3, #40	; 0x28
 800440c:	d111      	bne.n	8004432 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <I2C_Slave_STOPF+0x25c>)
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff f828 	bl	8003480 <HAL_I2C_ListenCpltCallback>
}
 8004430:	e014      	b.n	800445c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	d002      	beq.n	8004440 <I2C_Slave_STOPF+0x234>
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b22      	cmp	r3, #34	; 0x22
 800443e:	d10d      	bne.n	800445c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fe fffa 	bl	8003450 <HAL_I2C_SlaveRxCpltCallback>
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	08004ad9 	.word	0x08004ad9
 8004468:	ffff0000 	.word	0xffff0000

0800446c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d002      	beq.n	800448e <I2C_Slave_AF+0x22>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d129      	bne.n	80044e2 <I2C_Slave_AF+0x76>
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b28      	cmp	r3, #40	; 0x28
 8004492:	d126      	bne.n	80044e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <I2C_Slave_AF+0xdc>)
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fe ffd0 	bl	8003480 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044e0:	e02e      	b.n	8004540 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b21      	cmp	r3, #33	; 0x21
 80044e6:	d126      	bne.n	8004536 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <I2C_Slave_AF+0xdc>)
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004512:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe ff84 	bl	800343c <HAL_I2C_SlaveTxCpltCallback>
}
 8004534:	e004      	b.n	8004540 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800453e:	615a      	str	r2, [r3, #20]
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	ffff0000 	.word	0xffff0000

0800454c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004562:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004564:	7bbb      	ldrb	r3, [r7, #14]
 8004566:	2b10      	cmp	r3, #16
 8004568:	d002      	beq.n	8004570 <I2C_ITError+0x24>
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d10a      	bne.n	8004586 <I2C_ITError+0x3a>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b22      	cmp	r3, #34	; 0x22
 8004574:	d107      	bne.n	8004586 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004584:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800458c:	2b28      	cmp	r3, #40	; 0x28
 800458e:	d107      	bne.n	80045a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2228      	movs	r2, #40	; 0x28
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800459e:	e015      	b.n	80045cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d00a      	beq.n	80045c6 <I2C_ITError+0x7a>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b60      	cmp	r3, #96	; 0x60
 80045b4:	d007      	beq.n	80045c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045da:	d162      	bne.n	80046a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d020      	beq.n	800463c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <I2C_ITError+0x25c>)
 8004600:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd fd40 	bl	800208c <HAL_DMA_Abort_IT>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8089 	beq.w	8004726 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004636:	4610      	mov	r0, r2
 8004638:	4798      	blx	r3
 800463a:	e074      	b.n	8004726 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	4a59      	ldr	r2, [pc, #356]	; (80047a8 <I2C_ITError+0x25c>)
 8004642:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd fd1f 	bl	800208c <HAL_DMA_Abort_IT>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d068      	beq.n	8004726 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d10b      	bne.n	800467a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800469c:	4610      	mov	r0, r2
 800469e:	4798      	blx	r3
 80046a0:	e041      	b.n	8004726 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b60      	cmp	r3, #96	; 0x60
 80046ac:	d125      	bne.n	80046fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d10b      	bne.n	80046e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe feec 	bl	80034d0 <HAL_I2C_AbortCpltCallback>
 80046f8:	e015      	b.n	8004726 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d10b      	bne.n	8004720 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fe fecb 	bl	80034bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10e      	bne.n	8004754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d113      	bne.n	80047a0 <I2C_ITError+0x254>
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b28      	cmp	r3, #40	; 0x28
 800477c:	d110      	bne.n	80047a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <I2C_ITError+0x260>)
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fe fe70 	bl	8003480 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	08004ad9 	.word	0x08004ad9
 80047ac:	ffff0000 	.word	0xffff0000

080047b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	460b      	mov	r3, r1
 80047be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d006      	beq.n	80047da <I2C_MasterRequestWrite+0x2a>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d003      	beq.n	80047da <I2C_MasterRequestWrite+0x2a>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d8:	d108      	bne.n	80047ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e00b      	b.n	8004804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	2b12      	cmp	r3, #18
 80047f2:	d107      	bne.n	8004804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fa09 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482a:	d103      	bne.n	8004834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e035      	b.n	80048a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004840:	d108      	bne.n	8004854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004842:	897b      	ldrh	r3, [r7, #10]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004850:	611a      	str	r2, [r3, #16]
 8004852:	e01b      	b.n	800488c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004854:	897b      	ldrh	r3, [r7, #10]
 8004856:	11db      	asrs	r3, r3, #7
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 0306 	and.w	r3, r3, #6
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f063 030f 	orn	r3, r3, #15
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <I2C_MasterRequestWrite+0xfc>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fa2f 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e010      	b.n	80048a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4907      	ldr	r1, [pc, #28]	; (80048b0 <I2C_MasterRequestWrite+0x100>)
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa1f 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	00010008 	.word	0x00010008
 80048b0:	00010002 	.word	0x00010002

080048b4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048e6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	2200      	movs	r2, #0
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	2200      	movs	r2, #0
 8004906:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800490e:	2b21      	cmp	r3, #33	; 0x21
 8004910:	d007      	beq.n	8004922 <I2C_DMAXferCplt+0x6e>
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004918:	2b22      	cmp	r3, #34	; 0x22
 800491a:	d131      	bne.n	8004980 <I2C_DMAXferCplt+0xcc>
 800491c:	7cbb      	ldrb	r3, [r7, #18]
 800491e:	2b20      	cmp	r3, #32
 8004920:	d12e      	bne.n	8004980 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004930:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b29      	cmp	r3, #41	; 0x29
 800493c:	d10a      	bne.n	8004954 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2228      	movs	r2, #40	; 0x28
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800494c:	6978      	ldr	r0, [r7, #20]
 800494e:	f7fe fd75 	bl	800343c <HAL_I2C_SlaveTxCpltCallback>
 8004952:	e00c      	b.n	800496e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d109      	bne.n	800496e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2222      	movs	r2, #34	; 0x22
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2228      	movs	r2, #40	; 0x28
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004968:	6978      	ldr	r0, [r7, #20]
 800496a:	f7fe fd71 	bl	8003450 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800497c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800497e:	e06a      	b.n	8004a56 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d064      	beq.n	8004a56 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049bc:	d009      	beq.n	80049d2 <I2C_DMAXferCplt+0x11e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d006      	beq.n	80049d2 <I2C_DMAXferCplt+0x11e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049ca:	d002      	beq.n	80049d2 <I2C_DMAXferCplt+0x11e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d107      	bne.n	80049e2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a00:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004a10:	6978      	ldr	r0, [r7, #20]
 8004a12:	f7fe fd53 	bl	80034bc <HAL_I2C_ErrorCallback>
}
 8004a16:	e01e      	b.n	8004a56 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d10a      	bne.n	8004a42 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7fe fd34 	bl	80034a8 <HAL_I2C_MemRxCpltCallback>
}
 8004a40:	e009      	b.n	8004a56 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2212      	movs	r2, #18
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f7fc fce9 	bl	8001428 <HAL_I2C_MasterRxCpltCallback>
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	2200      	movs	r2, #0
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	2200      	movs	r2, #0
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd fcb7 	bl	8002400 <HAL_DMA_GetError>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d01b      	beq.n	8004ad0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f043 0210 	orr.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fe fcf6 	bl	80034bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004af2:	4b4b      	ldr	r3, [pc, #300]	; (8004c20 <I2C_DMAAbort+0x148>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	08db      	lsrs	r3, r3, #3
 8004af8:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <I2C_DMAAbort+0x14c>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0a1a      	lsrs	r2, r3, #8
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00da      	lsls	r2, r3, #3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b1e:	e00a      	b.n	8004b36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b34:	d0ea      	beq.n	8004b0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	2200      	movs	r2, #0
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	2200      	movs	r2, #0
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b78:	2200      	movs	r2, #0
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	2200      	movs	r2, #0
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b60      	cmp	r3, #96	; 0x60
 8004ba6:	d10e      	bne.n	8004bc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7fe fc86 	bl	80034d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bc4:	e027      	b.n	8004c16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bc6:	7cfb      	ldrb	r3, [r7, #19]
 8004bc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bcc:	2b28      	cmp	r3, #40	; 0x28
 8004bce:	d117      	bne.n	8004c00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2228      	movs	r2, #40	; 0x28
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bfe:	e007      	b.n	8004c10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f7fe fc53 	bl	80034bc <HAL_I2C_ErrorCallback>
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000014 	.word	0x20000014
 8004c24:	14f8b589 	.word	0x14f8b589

08004c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c38:	e025      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d021      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fc ff8f 	bl	8001b64 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e023      	b.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10d      	bne.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	e00c      	b.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b6      	beq.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce4:	e051      	b.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d123      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e046      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d021      	beq.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fc ff0d 	bl	8001b64 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e020      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d10c      	bne.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e00b      	b.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d18d      	bne.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de0:	e02d      	b.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8aa 	bl	8004f3c <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02d      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d021      	beq.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fc feb3 	bl	8001b64 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d116      	bne.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d1ca      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e62:	e02d      	b.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f869 	bl	8004f3c <I2C_IsAcknowledgeFailed>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e02d      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d021      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7fc fe72 	bl	8001b64 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d116      	bne.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d1ca      	bne.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	0a1a      	lsrs	r2, r3, #8
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e008      	b.n	8004f28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d0e9      	beq.n	8004efa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000014 	.word	0x20000014
 8004f38:	14f8b589 	.word	0x14f8b589

08004f3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d11b      	bne.n	8004f8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f043 0204 	orr.w	r2, r3, #4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004faa:	d103      	bne.n	8004fb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fb2:	e007      	b.n	8004fc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fbc:	d102      	bne.n	8004fc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e267      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d075      	beq.n	80050da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fee:	4b88      	ldr	r3, [pc, #544]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d00c      	beq.n	8005014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffa:	4b85      	ldr	r3, [pc, #532]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005002:	2b08      	cmp	r3, #8
 8005004:	d112      	bne.n	800502c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005006:	4b82      	ldr	r3, [pc, #520]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005012:	d10b      	bne.n	800502c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05b      	beq.n	80050d8 <HAL_RCC_OscConfig+0x108>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d157      	bne.n	80050d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e242      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005034:	d106      	bne.n	8005044 <HAL_RCC_OscConfig+0x74>
 8005036:	4b76      	ldr	r3, [pc, #472]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a75      	ldr	r2, [pc, #468]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e01d      	b.n	8005080 <HAL_RCC_OscConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x98>
 800504e:	4b70      	ldr	r3, [pc, #448]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6f      	ldr	r2, [pc, #444]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6c      	ldr	r2, [pc, #432]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0xb0>
 8005068:	4b69      	ldr	r3, [pc, #420]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a68      	ldr	r2, [pc, #416]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800506e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4b66      	ldr	r3, [pc, #408]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a65      	ldr	r2, [pc, #404]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800507a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005088:	f7fc fd6c 	bl	8001b64 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005090:	f7fc fd68 	bl	8001b64 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	; 0x64
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e207      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0xc0>
 80050ae:	e014      	b.n	80050da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fc fd58 	bl	8001b64 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fc fd54 	bl	8001b64 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	; 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e1f3      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ca:	4b51      	ldr	r3, [pc, #324]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0xe8>
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d063      	beq.n	80051ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d11c      	bne.n	8005138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fe:	4b44      	ldr	r3, [pc, #272]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d116      	bne.n	8005138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RCC_OscConfig+0x152>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d001      	beq.n	8005122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e1c7      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4937      	ldr	r1, [pc, #220]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	e03a      	b.n	80051ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d020      	beq.n	8005182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCC_OscConfig+0x244>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fc fd0d 	bl	8001b64 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514e:	f7fc fd09 	bl	8001b64 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e1a8      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4925      	ldr	r1, [pc, #148]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]
 8005180:	e015      	b.n	80051ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RCC_OscConfig+0x244>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fc fcec 	bl	8001b64 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005190:	f7fc fce8 	bl	8001b64 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e187      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d036      	beq.n	8005228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <HAL_RCC_OscConfig+0x248>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fc fccc 	bl	8001b64 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fc fcc8 	bl	8001b64 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e167      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_OscConfig+0x240>)
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x200>
 80051ee:	e01b      	b.n	8005228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_OscConfig+0x248>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fc fcb5 	bl	8001b64 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051fc:	e00e      	b.n	800521c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fe:	f7fc fcb1 	bl	8001b64 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d907      	bls.n	800521c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e150      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
 8005210:	40023800 	.word	0x40023800
 8005214:	42470000 	.word	0x42470000
 8005218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521c:	4b88      	ldr	r3, [pc, #544]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ea      	bne.n	80051fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8097 	beq.w	8005364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b81      	ldr	r3, [pc, #516]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10f      	bne.n	8005266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	4b7d      	ldr	r3, [pc, #500]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	4a7c      	ldr	r2, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6413      	str	r3, [r2, #64]	; 0x40
 8005256:	4b7a      	ldr	r3, [pc, #488]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005266:	4b77      	ldr	r3, [pc, #476]	; (8005444 <HAL_RCC_OscConfig+0x474>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d118      	bne.n	80052a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005272:	4b74      	ldr	r3, [pc, #464]	; (8005444 <HAL_RCC_OscConfig+0x474>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a73      	ldr	r2, [pc, #460]	; (8005444 <HAL_RCC_OscConfig+0x474>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527e:	f7fc fc71 	bl	8001b64 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fc fc6d 	bl	8001b64 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e10c      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005298:	4b6a      	ldr	r3, [pc, #424]	; (8005444 <HAL_RCC_OscConfig+0x474>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d106      	bne.n	80052ba <HAL_RCC_OscConfig+0x2ea>
 80052ac:	4b64      	ldr	r3, [pc, #400]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	6713      	str	r3, [r2, #112]	; 0x70
 80052b8:	e01c      	b.n	80052f4 <HAL_RCC_OscConfig+0x324>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0x30c>
 80052c2:	4b5f      	ldr	r3, [pc, #380]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	4a5e      	ldr	r2, [pc, #376]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052c8:	f043 0304 	orr.w	r3, r3, #4
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70
 80052ce:	4b5c      	ldr	r3, [pc, #368]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	4a5b      	ldr	r2, [pc, #364]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6713      	str	r3, [r2, #112]	; 0x70
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0x324>
 80052dc:	4b58      	ldr	r3, [pc, #352]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4a57      	ldr	r2, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	; 0x70
 80052e8:	4b55      	ldr	r3, [pc, #340]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	4a54      	ldr	r2, [pc, #336]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80052ee:	f023 0304 	bic.w	r3, r3, #4
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fc:	f7fc fc32 	bl	8001b64 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	e00a      	b.n	800531a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fc fc2e 	bl	8001b64 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0cb      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0ee      	beq.n	8005304 <HAL_RCC_OscConfig+0x334>
 8005326:	e014      	b.n	8005352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005328:	f7fc fc1c 	bl	8001b64 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532e:	e00a      	b.n	8005346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fc fc18 	bl	8001b64 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0b5      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005346:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ee      	bne.n	8005330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4b39      	ldr	r3, [pc, #228]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	4a38      	ldr	r2, [pc, #224]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 800535e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80a1 	beq.w	80054b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b08      	cmp	r3, #8
 8005378:	d05c      	beq.n	8005434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d141      	bne.n	8005406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005382:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCC_OscConfig+0x478>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005388:	f7fc fbec 	bl	8001b64 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005390:	f7fc fbe8 	bl	8001b64 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e087      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	4b27      	ldr	r3, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f0      	bne.n	8005390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	019b      	lsls	r3, r3, #6
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	3b01      	subs	r3, #1
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	061b      	lsls	r3, r3, #24
 80053d2:	491b      	ldr	r1, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_OscConfig+0x478>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053de:	f7fc fbc1 	bl	8001b64 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e6:	f7fc fbbd 	bl	8001b64 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e05c      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x416>
 8005404:	e054      	b.n	80054b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <HAL_RCC_OscConfig+0x478>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fc fbaa 	bl	8001b64 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc fba6 	bl	8001b64 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e045      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_OscConfig+0x470>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x444>
 8005432:	e03d      	b.n	80054b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e038      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
 8005440:	40023800 	.word	0x40023800
 8005444:	40007000 	.word	0x40007000
 8005448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCC_OscConfig+0x4ec>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d028      	beq.n	80054ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d121      	bne.n	80054ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d11a      	bne.n	80054ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	3b01      	subs	r3, #1
 8005496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d107      	bne.n	80054ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800

080054c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0cc      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d90c      	bls.n	80054fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b63      	ldr	r3, [pc, #396]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0b8      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4a58      	ldr	r2, [pc, #352]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800551e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800552c:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4a52      	ldr	r2, [pc, #328]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	4b50      	ldr	r3, [pc, #320]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	494d      	ldr	r1, [pc, #308]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d119      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d003      	beq.n	800557e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800557a:	2b03      	cmp	r3, #3
 800557c:	d107      	bne.n	800558e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557e:	4b3f      	ldr	r3, [pc, #252]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e06f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e067      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800559e:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 0203 	bic.w	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4934      	ldr	r1, [pc, #208]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b0:	f7fc fad8 	bl	8001b64 <HAL_GetTick>
 80055b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b6:	e00a      	b.n	80055ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b8:	f7fc fad4 	bl	8001b64 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e04f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ce:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 020c 	and.w	r2, r3, #12
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1eb      	bne.n	80055b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d20c      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e032      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4916      	ldr	r1, [pc, #88]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005646:	f000 f821 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	490a      	ldr	r1, [pc, #40]	; (8005680 <HAL_RCC_ClockConfig+0x1c0>)
 8005658:	5ccb      	ldrb	r3, [r1, r3]
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc fa38 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023c00 	.word	0x40023c00
 800567c:	40023800 	.word	0x40023800
 8005680:	0800a110 	.word	0x0800a110
 8005684:	20000014 	.word	0x20000014
 8005688:	20000018 	.word	0x20000018

0800568c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005690:	b094      	sub	sp, #80	; 0x50
 8005692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	647b      	str	r3, [r7, #68]	; 0x44
 8005698:	2300      	movs	r3, #0
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569c:	2300      	movs	r3, #0
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a4:	4b79      	ldr	r3, [pc, #484]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d00d      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x40>
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	f200 80e1 	bhi.w	8005878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d003      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056be:	e0db      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056c0:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_RCC_GetSysClockFreq+0x204>)
 80056c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056c4:	e0db      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_GetSysClockFreq+0x208>)
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ca:	e0d8      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056cc:	4b6f      	ldr	r3, [pc, #444]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056d6:	4b6d      	ldr	r3, [pc, #436]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d063      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e2:	4b6a      	ldr	r3, [pc, #424]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	2200      	movs	r2, #0
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30
 80056f6:	2300      	movs	r3, #0
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
 80056fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	0159      	lsls	r1, r3, #5
 800570c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005710:	0150      	lsls	r0, r2, #5
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4621      	mov	r1, r4
 8005718:	1a51      	subs	r1, r2, r1
 800571a:	6139      	str	r1, [r7, #16]
 800571c:	4629      	mov	r1, r5
 800571e:	eb63 0301 	sbc.w	r3, r3, r1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005730:	4659      	mov	r1, fp
 8005732:	018b      	lsls	r3, r1, #6
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800573a:	4651      	mov	r1, sl
 800573c:	018a      	lsls	r2, r1, #6
 800573e:	4651      	mov	r1, sl
 8005740:	ebb2 0801 	subs.w	r8, r2, r1
 8005744:	4659      	mov	r1, fp
 8005746:	eb63 0901 	sbc.w	r9, r3, r1
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575e:	4690      	mov	r8, r2
 8005760:	4699      	mov	r9, r3
 8005762:	4623      	mov	r3, r4
 8005764:	eb18 0303 	adds.w	r3, r8, r3
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	462b      	mov	r3, r5
 800576c:	eb49 0303 	adc.w	r3, r9, r3
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800577e:	4629      	mov	r1, r5
 8005780:	024b      	lsls	r3, r1, #9
 8005782:	4621      	mov	r1, r4
 8005784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005788:	4621      	mov	r1, r4
 800578a:	024a      	lsls	r2, r1, #9
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005792:	2200      	movs	r2, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800579c:	f7fb fa5c 	bl	8000c58 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	e058      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057aa:	4b38      	ldr	r3, [pc, #224]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	2200      	movs	r2, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	4611      	mov	r1, r2
 80057b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	2300      	movs	r3, #0
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
 80057c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	f04f 0000 	mov.w	r0, #0
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d6:	0150      	lsls	r0, r2, #5
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4641      	mov	r1, r8
 80057de:	ebb2 0a01 	subs.w	sl, r2, r1
 80057e2:	4649      	mov	r1, r9
 80057e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005800:	eb63 050b 	sbc.w	r5, r3, fp
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	00eb      	lsls	r3, r5, #3
 800580e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005812:	00e2      	lsls	r2, r4, #3
 8005814:	4614      	mov	r4, r2
 8005816:	461d      	mov	r5, r3
 8005818:	4643      	mov	r3, r8
 800581a:	18e3      	adds	r3, r4, r3
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	464b      	mov	r3, r9
 8005820:	eb45 0303 	adc.w	r3, r5, r3
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005832:	4629      	mov	r1, r5
 8005834:	028b      	lsls	r3, r1, #10
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800583c:	4621      	mov	r1, r4
 800583e:	028a      	lsls	r2, r1, #10
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	2200      	movs	r2, #0
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	61fa      	str	r2, [r7, #28]
 800584c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005850:	f7fb fa02 	bl	8000c58 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	3301      	adds	r3, #1
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800586c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800586e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005876:	e002      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCC_GetSysClockFreq+0x204>)
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800587c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005880:	4618      	mov	r0, r3
 8005882:	3750      	adds	r7, #80	; 0x50
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400
 8005894:	007a1200 	.word	0x007a1200

08005898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000014 	.word	0x20000014

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	0800a120 	.word	0x0800a120

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058dc:	f7ff ffdc 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800a120 	.word	0x0800a120

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e041      	b.n	8005996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb fea6 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 fa88 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d001      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e044      	b.n	8005a42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_TIM_Base_Start_IT+0xb0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x6c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d013      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x6c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <HAL_TIM_Base_Start_IT+0xb4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x6c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_TIM_Base_Start_IT+0xb8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x6c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <HAL_TIM_Base_Start_IT+0xbc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x6c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d111      	bne.n	8005a30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d010      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	e007      	b.n	8005a40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000

08005a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0202 	mvn.w	r2, #2
 8005a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9b5 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9a7 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9b8 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d122      	bne.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d11b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0204 	mvn.w	r2, #4
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f98b 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f97d 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f98e 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0208 	mvn.w	r2, #8
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f961 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f953 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f964 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d122      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0210 	mvn.w	r2, #16
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2208      	movs	r2, #8
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f937 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f929 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f93a 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d10e      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0201 	mvn.w	r2, #1
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb fbfc 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fab2 	bl	8006178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f8ff 	bl	8005e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0220 	mvn.w	r2, #32
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa7c 	bl	8006164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e0b4      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x186>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc8:	d03e      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0xd4>
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cce:	f200 8087 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd6:	f000 8086 	beq.w	8005de6 <HAL_TIM_ConfigClockSource+0x172>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d87f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b70      	cmp	r3, #112	; 0x70
 8005ce2:	d01a      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0xa6>
 8005ce4:	2b70      	cmp	r3, #112	; 0x70
 8005ce6:	d87b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d050      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x11a>
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d877      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b50      	cmp	r3, #80	; 0x50
 8005cf2:	d03c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0xfa>
 8005cf4:	2b50      	cmp	r3, #80	; 0x50
 8005cf6:	d873      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d058      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x13a>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d86f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d064      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	2b30      	cmp	r3, #48	; 0x30
 8005d06:	d86b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d060      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x15a>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d867      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05c      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x15a>
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d05a      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	e062      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f000 f98d 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	609a      	str	r2, [r3, #8]
      break;
 8005d46:	e04f      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6899      	ldr	r1, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f000 f976 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d6a:	609a      	str	r2, [r3, #8]
      break;
 8005d6c:	e03c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 f8ea 	bl	8005f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2150      	movs	r1, #80	; 0x50
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f943 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e02c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 f909 	bl	8005fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2160      	movs	r1, #96	; 0x60
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f933 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005dac:	e01c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 f8ca 	bl	8005f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2140      	movs	r1, #64	; 0x40
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f923 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e00c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 f91a 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005dde:	e003      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	e000      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d017      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <TIM_Base_SetConfig+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	; (8005f4c <TIM_Base_SetConfig+0xf8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <TIM_Base_SetConfig+0xfc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 030a 	bic.w	r3, r3, #10
 8005f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b087      	sub	sp, #28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0210 	bic.w	r2, r3, #16
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	f043 0307 	orr.w	r3, r3, #7
 8006034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	431a      	orrs	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	609a      	str	r2, [r3, #8]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800609c:	2302      	movs	r3, #2
 800609e:	e050      	b.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d018      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d013      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a18      	ldr	r2, [pc, #96]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00e      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d009      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a15      	ldr	r2, [pc, #84]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a13      	ldr	r2, [pc, #76]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10c      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40014000 	.word	0x40014000

08006164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e03f      	b.n	800621e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fa86 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fdd1 	bl	8006d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08c      	sub	sp, #48	; 0x30
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d165      	bne.n	800630e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_UART_Transmit_DMA+0x26>
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e05e      	b.n	8006310 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_UART_Transmit_DMA+0x38>
 800625c:	2302      	movs	r3, #2
 800625e:	e057      	b.n	8006310 <HAL_UART_Transmit_DMA+0xe8>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2221      	movs	r2, #33	; 0x21
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_UART_Transmit_DMA+0xf0>)
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_UART_Transmit_DMA+0xf4>)
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <HAL_UART_Transmit_DMA+0xf8>)
 800629e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	2200      	movs	r2, #0
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3304      	adds	r3, #4
 80062bc:	461a      	mov	r2, r3
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f7fb fe1c 	bl	8001efc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	617b      	str	r3, [r7, #20]
   return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f6:	627a      	str	r2, [r7, #36]	; 0x24
 80062f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6a39      	ldr	r1, [r7, #32]
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	61fb      	str	r3, [r7, #28]
   return(result);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e000      	b.n	8006310 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800630e:	2302      	movs	r3, #2
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	3730      	adds	r7, #48	; 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	080068a9 	.word	0x080068a9
 800631c:	08006943 	.word	0x08006943
 8006320:	0800695f 	.word	0x0800695f

08006324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b0ba      	sub	sp, #232	; 0xe8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800634a:	2300      	movs	r3, #0
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <HAL_UART_IRQHandler+0x66>
 8006376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fc3c 	bl	8006c00 <UART_Receive_IT>
      return;
 8006388:	e256      	b.n	8006838 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800638a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80de 	beq.w	8006550 <HAL_UART_IRQHandler+0x22c>
 8006394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80d1 	beq.w	8006550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_UART_IRQHandler+0xae>
 80063ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <HAL_UART_IRQHandler+0xd2>
 80063de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f043 0202 	orr.w	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_UART_IRQHandler+0xf6>
 8006402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f043 0204 	orr.w	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d011      	beq.n	800644a <HAL_UART_IRQHandler+0x126>
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f043 0208 	orr.w	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 81ed 	beq.w	800682e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_UART_IRQHandler+0x14e>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbc7 	bl	8006c00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <HAL_UART_IRQHandler+0x17a>
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d04f      	beq.n	800653e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 facf 	bl	8006a42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d141      	bne.n	8006536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1d9      	bne.n	80064b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	2b00      	cmp	r3, #0
 8006504:	d013      	beq.n	800652e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	4a7d      	ldr	r2, [pc, #500]	; (8006700 <HAL_UART_IRQHandler+0x3dc>)
 800650c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb fdba 	bl	800208c <HAL_DMA_Abort_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d016      	beq.n	800654c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00e      	b.n	800654c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9a4 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e00a      	b.n	800654c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9a0 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	e006      	b.n	800654c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f99c 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800654a:	e170      	b.n	800682e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	bf00      	nop
    return;
 800654e:	e16e      	b.n	800682e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	2b01      	cmp	r3, #1
 8006556:	f040 814a 	bne.w	80067ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800655a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8143 	beq.w	80067ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 813c 	beq.w	80067ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	f040 80b4 	bne.w	8006704 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8140 	beq.w	8006832 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065ba:	429a      	cmp	r2, r3
 80065bc:	f080 8139 	bcs.w	8006832 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d2:	f000 8088 	beq.w	80066e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800660e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1d9      	bne.n	80065d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800664a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800664e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e1      	bne.n	8006622 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800666e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e3      	bne.n	80066a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fb fc63 	bl	8001fac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8ca 	bl	8006890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066fc:	e099      	b.n	8006832 <HAL_UART_IRQHandler+0x50e>
 80066fe:	bf00      	nop
 8006700:	08006b09 	.word	0x08006b09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800670c:	b29b      	uxth	r3, r3
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 808b 	beq.w	8006836 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8086 	beq.w	8006836 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800674e:	647a      	str	r2, [r7, #68]	; 0x44
 8006750:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e3      	bne.n	800672a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3314      	adds	r3, #20
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	623b      	str	r3, [r7, #32]
   return(result);
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006786:	633a      	str	r2, [r7, #48]	; 0x30
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800678c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e3      	bne.n	8006762 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067cc:	61fa      	str	r2, [r7, #28]
 80067ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	617b      	str	r3, [r7, #20]
   return(result);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f852 	bl	8006890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ec:	e023      	b.n	8006836 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_UART_IRQHandler+0x4ea>
 80067fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f992 	bl	8006b30 <UART_Transmit_IT>
    return;
 800680c:	e014      	b.n	8006838 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <HAL_UART_IRQHandler+0x514>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9d2 	bl	8006bd0 <UART_EndTransmit_IT>
    return;
 800682c:	e004      	b.n	8006838 <HAL_UART_IRQHandler+0x514>
    return;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <HAL_UART_IRQHandler+0x514>
      return;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_UART_IRQHandler+0x514>
      return;
 8006836:	bf00      	nop
  }
}
 8006838:	37e8      	adds	r7, #232	; 0xe8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b090      	sub	sp, #64	; 0x40
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d137      	bne.n	8006934 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	2200      	movs	r2, #0
 80068c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	623b      	str	r3, [r7, #32]
   return(result);
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ea:	633a      	str	r2, [r7, #48]	; 0x30
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	60fb      	str	r3, [r7, #12]
   return(result);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	330c      	adds	r3, #12
 800691c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691e:	61fa      	str	r2, [r7, #28]
 8006920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	617b      	str	r3, [r7, #20]
   return(result);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006932:	e002      	b.n	800693a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006934:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006936:	f7ff ff83 	bl	8006840 <HAL_UART_TxCpltCallback>
}
 800693a:	bf00      	nop
 800693c:	3740      	adds	r7, #64	; 0x40
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff ff7f 	bl	8006854 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b21      	cmp	r3, #33	; 0x21
 8006990:	d108      	bne.n	80069a4 <UART_DMAError+0x46>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800699e:	68b8      	ldr	r0, [r7, #8]
 80069a0:	f000 f827 	bl	80069f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b22      	cmp	r3, #34	; 0x22
 80069c4:	d108      	bne.n	80069d8 <UART_DMAError+0x7a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069d2:	68b8      	ldr	r0, [r7, #8]
 80069d4:	f000 f835 	bl	8006a42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	f043 0210 	orr.w	r2, r3, #16
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f7ff ff49 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b089      	sub	sp, #36	; 0x24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	61ba      	str	r2, [r7, #24]
 8006a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6979      	ldr	r1, [r7, #20]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	613b      	str	r3, [r7, #16]
   return(result);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a36:	bf00      	nop
 8006a38:	3724      	adds	r7, #36	; 0x24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b095      	sub	sp, #84	; 0x54
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a6a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e5      	bne.n	8006a4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e5      	bne.n	8006a7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d119      	bne.n	8006aee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ada:	61ba      	str	r2, [r7, #24]
 8006adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006afc:	bf00      	nop
 8006afe:	3754      	adds	r7, #84	; 0x54
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff feaa 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b21      	cmp	r3, #33	; 0x21
 8006b42:	d13e      	bne.n	8006bc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d114      	bne.n	8006b78 <UART_Transmit_IT+0x48>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d110      	bne.n	8006b78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]
 8006b76:	e008      	b.n	8006b8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6211      	str	r1, [r2, #32]
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e000      	b.n	8006bc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
  }
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff fe25 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b22      	cmp	r3, #34	; 0x22
 8006c12:	f040 80ab 	bne.w	8006d6c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	d117      	bne.n	8006c50 <UART_Receive_IT+0x50>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	629a      	str	r2, [r3, #40]	; 0x28
 8006c4e:	e026      	b.n	8006c9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d007      	beq.n	8006c74 <UART_Receive_IT+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <UART_Receive_IT+0x82>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e008      	b.n	8006c94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4619      	mov	r1, r3
 8006cac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d15a      	bne.n	8006d68 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0220 	bic.w	r2, r2, #32
 8006cc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d135      	bne.n	8006d5e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	623a      	str	r2, [r7, #32]
 8006d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	69f9      	ldr	r1, [r7, #28]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d10a      	bne.n	8006d50 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fd9a 	bl	8006890 <HAL_UARTEx_RxEventCallback>
 8006d5c:	e002      	b.n	8006d64 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fd82 	bl	8006868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e002      	b.n	8006d6e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3730      	adds	r7, #48	; 0x30
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d7c:	b0c0      	sub	sp, #256	; 0x100
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	68d9      	ldr	r1, [r3, #12]
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	ea40 0301 	orr.w	r3, r0, r1
 8006da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dd0:	f021 010c 	bic.w	r1, r1, #12
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dde:	430b      	orrs	r3, r1
 8006de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df2:	6999      	ldr	r1, [r3, #24]
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	ea40 0301 	orr.w	r3, r0, r1
 8006dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b8f      	ldr	r3, [pc, #572]	; (8007044 <UART_SetConfig+0x2cc>)
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d005      	beq.n	8006e18 <UART_SetConfig+0xa0>
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b8d      	ldr	r3, [pc, #564]	; (8007048 <UART_SetConfig+0x2d0>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d104      	bne.n	8006e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e18:	f7fe fd5e 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8006e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e20:	e003      	b.n	8006e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e22:	f7fe fd45 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8006e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	f040 810c 	bne.w	8007050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	1891      	adds	r1, r2, r2
 8006e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e52:	415b      	adcs	r3, r3
 8006e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	eb12 0801 	adds.w	r8, r2, r1
 8006e60:	4629      	mov	r1, r5
 8006e62:	eb43 0901 	adc.w	r9, r3, r1
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	4699      	mov	r9, r3
 8006e7e:	4623      	mov	r3, r4
 8006e80:	eb18 0303 	adds.w	r3, r8, r3
 8006e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e88:	462b      	mov	r3, r5
 8006e8a:	eb49 0303 	adc.w	r3, r9, r3
 8006e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	18db      	adds	r3, r3, r3
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8006eac:	4613      	mov	r3, r2
 8006eae:	eb42 0303 	adc.w	r3, r2, r3
 8006eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ebc:	f7f9 fecc 	bl	8000c58 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4b61      	ldr	r3, [pc, #388]	; (800704c <UART_SetConfig+0x2d4>)
 8006ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	011c      	lsls	r4, r3, #4
 8006ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	1891      	adds	r1, r2, r2
 8006ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ee8:	415b      	adcs	r3, r3
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f10:	4692      	mov	sl, r2
 8006f12:	469b      	mov	fp, r3
 8006f14:	4643      	mov	r3, r8
 8006f16:	eb1a 0303 	adds.w	r3, sl, r3
 8006f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	eb4b 0303 	adc.w	r3, fp, r3
 8006f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	18db      	adds	r3, r3, r3
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
 8006f42:	4613      	mov	r3, r2
 8006f44:	eb42 0303 	adc.w	r3, r2, r3
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f52:	f7f9 fe81 	bl	8000c58 <__aeabi_uldivmod>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	; (800704c <UART_SetConfig+0x2d4>)
 8006f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2264      	movs	r2, #100	; 0x64
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
 8006f6a:	1acb      	subs	r3, r1, r3
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <UART_SetConfig+0x2d4>)
 8006f74:	fba3 2302 	umull	r2, r3, r3, r2
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f80:	441c      	add	r4, r3
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	1851      	adds	r1, r2, r1
 8006fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8006faa:	4649      	mov	r1, r9
 8006fac:	414b      	adcs	r3, r1
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	00cb      	lsls	r3, r1, #3
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	00ca      	lsls	r2, r1, #3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fd8:	464b      	mov	r3, r9
 8006fda:	460a      	mov	r2, r1
 8006fdc:	eb42 0303 	adc.w	r3, r2, r3
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	18db      	adds	r3, r3, r3
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ffe:	4613      	mov	r3, r2
 8007000:	eb42 0303 	adc.w	r3, r2, r3
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800700a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800700e:	f7f9 fe23 	bl	8000c58 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <UART_SetConfig+0x2d4>)
 8007018:	fba3 1302 	umull	r1, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	2164      	movs	r1, #100	; 0x64
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	3332      	adds	r3, #50	; 0x32
 800702a:	4a08      	ldr	r2, [pc, #32]	; (800704c <UART_SetConfig+0x2d4>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f003 0207 	and.w	r2, r3, #7
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4422      	add	r2, r4
 800703e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007040:	e105      	b.n	800724e <UART_SetConfig+0x4d6>
 8007042:	bf00      	nop
 8007044:	40011000 	.word	0x40011000
 8007048:	40011400 	.word	0x40011400
 800704c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007054:	2200      	movs	r2, #0
 8007056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800705a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800705e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	1891      	adds	r1, r2, r2
 8007068:	6239      	str	r1, [r7, #32]
 800706a:	415b      	adcs	r3, r3
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
 800706e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007072:	4641      	mov	r1, r8
 8007074:	1854      	adds	r4, r2, r1
 8007076:	4649      	mov	r1, r9
 8007078:	eb43 0501 	adc.w	r5, r3, r1
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	00eb      	lsls	r3, r5, #3
 8007086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708a:	00e2      	lsls	r2, r4, #3
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	4643      	mov	r3, r8
 8007092:	18e3      	adds	r3, r4, r3
 8007094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007098:	464b      	mov	r3, r9
 800709a:	eb45 0303 	adc.w	r3, r5, r3
 800709e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070be:	4629      	mov	r1, r5
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	4621      	mov	r1, r4
 80070c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c8:	4621      	mov	r1, r4
 80070ca:	008a      	lsls	r2, r1, #2
 80070cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070d0:	f7f9 fdc2 	bl	8000c58 <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4b60      	ldr	r3, [pc, #384]	; (800725c <UART_SetConfig+0x4e4>)
 80070da:	fba3 2302 	umull	r2, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	011c      	lsls	r4, r3, #4
 80070e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	1891      	adds	r1, r2, r2
 80070fa:	61b9      	str	r1, [r7, #24]
 80070fc:	415b      	adcs	r3, r3
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007104:	4641      	mov	r1, r8
 8007106:	1851      	adds	r1, r2, r1
 8007108:	6139      	str	r1, [r7, #16]
 800710a:	4649      	mov	r1, r9
 800710c:	414b      	adcs	r3, r1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800711c:	4659      	mov	r1, fp
 800711e:	00cb      	lsls	r3, r1, #3
 8007120:	4651      	mov	r1, sl
 8007122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007126:	4651      	mov	r1, sl
 8007128:	00ca      	lsls	r2, r1, #3
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	4603      	mov	r3, r0
 8007130:	4642      	mov	r2, r8
 8007132:	189b      	adds	r3, r3, r2
 8007134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007138:	464b      	mov	r3, r9
 800713a:	460a      	mov	r2, r1
 800713c:	eb42 0303 	adc.w	r3, r2, r3
 8007140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	67bb      	str	r3, [r7, #120]	; 0x78
 800714e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800715c:	4649      	mov	r1, r9
 800715e:	008b      	lsls	r3, r1, #2
 8007160:	4641      	mov	r1, r8
 8007162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007166:	4641      	mov	r1, r8
 8007168:	008a      	lsls	r2, r1, #2
 800716a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800716e:	f7f9 fd73 	bl	8000c58 <__aeabi_uldivmod>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <UART_SetConfig+0x4e4>)
 8007178:	fba3 1302 	umull	r1, r3, r3, r2
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	2164      	movs	r1, #100	; 0x64
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	3332      	adds	r3, #50	; 0x32
 800718a:	4a34      	ldr	r2, [pc, #208]	; (800725c <UART_SetConfig+0x4e4>)
 800718c:	fba2 2303 	umull	r2, r3, r2, r3
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007196:	441c      	add	r4, r3
 8007198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719c:	2200      	movs	r2, #0
 800719e:	673b      	str	r3, [r7, #112]	; 0x70
 80071a0:	677a      	str	r2, [r7, #116]	; 0x74
 80071a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1851      	adds	r1, r2, r1
 80071ba:	6039      	str	r1, [r7, #0]
 80071bc:	4649      	mov	r1, r9
 80071be:	414b      	adcs	r3, r1
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071ce:	4659      	mov	r1, fp
 80071d0:	00cb      	lsls	r3, r1, #3
 80071d2:	4651      	mov	r1, sl
 80071d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071d8:	4651      	mov	r1, sl
 80071da:	00ca      	lsls	r2, r1, #3
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	4603      	mov	r3, r0
 80071e2:	4642      	mov	r2, r8
 80071e4:	189b      	adds	r3, r3, r2
 80071e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e8:	464b      	mov	r3, r9
 80071ea:	460a      	mov	r2, r1
 80071ec:	eb42 0303 	adc.w	r3, r2, r3
 80071f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	663b      	str	r3, [r7, #96]	; 0x60
 80071fc:	667a      	str	r2, [r7, #100]	; 0x64
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800720a:	4649      	mov	r1, r9
 800720c:	008b      	lsls	r3, r1, #2
 800720e:	4641      	mov	r1, r8
 8007210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007214:	4641      	mov	r1, r8
 8007216:	008a      	lsls	r2, r1, #2
 8007218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800721c:	f7f9 fd1c 	bl	8000c58 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <UART_SetConfig+0x4e4>)
 8007226:	fba3 1302 	umull	r1, r3, r3, r2
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	2164      	movs	r1, #100	; 0x64
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	3332      	adds	r3, #50	; 0x32
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <UART_SetConfig+0x4e4>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f003 020f 	and.w	r2, r3, #15
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4422      	add	r2, r4
 800724c:	609a      	str	r2, [r3, #8]
}
 800724e:	bf00      	nop
 8007250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007254:	46bd      	mov	sp, r7
 8007256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800725a:	bf00      	nop
 800725c:	51eb851f 	.word	0x51eb851f

08007260 <__errno>:
 8007260:	4b01      	ldr	r3, [pc, #4]	; (8007268 <__errno+0x8>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000020 	.word	0x20000020

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4d0d      	ldr	r5, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2600      	movs	r6, #0
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4d0b      	ldr	r5, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f002 ff16 	bl	800a0b0 <_init>
 8007284:	1b64      	subs	r4, r4, r5
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2600      	movs	r6, #0
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	0800a514 	.word	0x0800a514
 80072a8:	0800a514 	.word	0x0800a514
 80072ac:	0800a514 	.word	0x0800a514
 80072b0:	0800a518 	.word	0x0800a518

080072b4 <memset>:
 80072b4:	4402      	add	r2, r0
 80072b6:	4603      	mov	r3, r0
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d100      	bne.n	80072be <memset+0xa>
 80072bc:	4770      	bx	lr
 80072be:	f803 1b01 	strb.w	r1, [r3], #1
 80072c2:	e7f9      	b.n	80072b8 <memset+0x4>

080072c4 <__cvt>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	ec55 4b10 	vmov	r4, r5, d0
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	460e      	mov	r6, r1
 80072d0:	4619      	mov	r1, r3
 80072d2:	462b      	mov	r3, r5
 80072d4:	bfbb      	ittet	lt
 80072d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072da:	461d      	movlt	r5, r3
 80072dc:	2300      	movge	r3, #0
 80072de:	232d      	movlt	r3, #45	; 0x2d
 80072e0:	700b      	strb	r3, [r1, #0]
 80072e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072e8:	4691      	mov	r9, r2
 80072ea:	f023 0820 	bic.w	r8, r3, #32
 80072ee:	bfbc      	itt	lt
 80072f0:	4622      	movlt	r2, r4
 80072f2:	4614      	movlt	r4, r2
 80072f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072f8:	d005      	beq.n	8007306 <__cvt+0x42>
 80072fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072fe:	d100      	bne.n	8007302 <__cvt+0x3e>
 8007300:	3601      	adds	r6, #1
 8007302:	2102      	movs	r1, #2
 8007304:	e000      	b.n	8007308 <__cvt+0x44>
 8007306:	2103      	movs	r1, #3
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	ab02      	add	r3, sp, #8
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	ec45 4b10 	vmov	d0, r4, r5
 8007314:	4653      	mov	r3, sl
 8007316:	4632      	mov	r2, r6
 8007318:	f000 fcfe 	bl	8007d18 <_dtoa_r>
 800731c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007320:	4607      	mov	r7, r0
 8007322:	d102      	bne.n	800732a <__cvt+0x66>
 8007324:	f019 0f01 	tst.w	r9, #1
 8007328:	d022      	beq.n	8007370 <__cvt+0xac>
 800732a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800732e:	eb07 0906 	add.w	r9, r7, r6
 8007332:	d110      	bne.n	8007356 <__cvt+0x92>
 8007334:	783b      	ldrb	r3, [r7, #0]
 8007336:	2b30      	cmp	r3, #48	; 0x30
 8007338:	d10a      	bne.n	8007350 <__cvt+0x8c>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fbc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007346:	b918      	cbnz	r0, 8007350 <__cvt+0x8c>
 8007348:	f1c6 0601 	rsb	r6, r6, #1
 800734c:	f8ca 6000 	str.w	r6, [sl]
 8007350:	f8da 3000 	ldr.w	r3, [sl]
 8007354:	4499      	add	r9, r3
 8007356:	2200      	movs	r2, #0
 8007358:	2300      	movs	r3, #0
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f9 fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007362:	b108      	cbz	r0, 8007368 <__cvt+0xa4>
 8007364:	f8cd 900c 	str.w	r9, [sp, #12]
 8007368:	2230      	movs	r2, #48	; 0x30
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	454b      	cmp	r3, r9
 800736e:	d307      	bcc.n	8007380 <__cvt+0xbc>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007374:	1bdb      	subs	r3, r3, r7
 8007376:	4638      	mov	r0, r7
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	b004      	add	sp, #16
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	1c59      	adds	r1, r3, #1
 8007382:	9103      	str	r1, [sp, #12]
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e7f0      	b.n	800736a <__cvt+0xa6>

08007388 <__exponent>:
 8007388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738a:	4603      	mov	r3, r0
 800738c:	2900      	cmp	r1, #0
 800738e:	bfb8      	it	lt
 8007390:	4249      	neglt	r1, r1
 8007392:	f803 2b02 	strb.w	r2, [r3], #2
 8007396:	bfb4      	ite	lt
 8007398:	222d      	movlt	r2, #45	; 0x2d
 800739a:	222b      	movge	r2, #43	; 0x2b
 800739c:	2909      	cmp	r1, #9
 800739e:	7042      	strb	r2, [r0, #1]
 80073a0:	dd2a      	ble.n	80073f8 <__exponent+0x70>
 80073a2:	f10d 0407 	add.w	r4, sp, #7
 80073a6:	46a4      	mov	ip, r4
 80073a8:	270a      	movs	r7, #10
 80073aa:	46a6      	mov	lr, r4
 80073ac:	460a      	mov	r2, r1
 80073ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80073b2:	fb07 1516 	mls	r5, r7, r6, r1
 80073b6:	3530      	adds	r5, #48	; 0x30
 80073b8:	2a63      	cmp	r2, #99	; 0x63
 80073ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80073be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073c2:	4631      	mov	r1, r6
 80073c4:	dcf1      	bgt.n	80073aa <__exponent+0x22>
 80073c6:	3130      	adds	r1, #48	; 0x30
 80073c8:	f1ae 0502 	sub.w	r5, lr, #2
 80073cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073d0:	1c44      	adds	r4, r0, #1
 80073d2:	4629      	mov	r1, r5
 80073d4:	4561      	cmp	r1, ip
 80073d6:	d30a      	bcc.n	80073ee <__exponent+0x66>
 80073d8:	f10d 0209 	add.w	r2, sp, #9
 80073dc:	eba2 020e 	sub.w	r2, r2, lr
 80073e0:	4565      	cmp	r5, ip
 80073e2:	bf88      	it	hi
 80073e4:	2200      	movhi	r2, #0
 80073e6:	4413      	add	r3, r2
 80073e8:	1a18      	subs	r0, r3, r0
 80073ea:	b003      	add	sp, #12
 80073ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073f6:	e7ed      	b.n	80073d4 <__exponent+0x4c>
 80073f8:	2330      	movs	r3, #48	; 0x30
 80073fa:	3130      	adds	r1, #48	; 0x30
 80073fc:	7083      	strb	r3, [r0, #2]
 80073fe:	70c1      	strb	r1, [r0, #3]
 8007400:	1d03      	adds	r3, r0, #4
 8007402:	e7f1      	b.n	80073e8 <__exponent+0x60>

08007404 <_printf_float>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	ed2d 8b02 	vpush	{d8}
 800740c:	b08d      	sub	sp, #52	; 0x34
 800740e:	460c      	mov	r4, r1
 8007410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007414:	4616      	mov	r6, r2
 8007416:	461f      	mov	r7, r3
 8007418:	4605      	mov	r5, r0
 800741a:	f001 fa6b 	bl	80088f4 <_localeconv_r>
 800741e:	f8d0 a000 	ldr.w	sl, [r0]
 8007422:	4650      	mov	r0, sl
 8007424:	f7f8 fedc 	bl	80001e0 <strlen>
 8007428:	2300      	movs	r3, #0
 800742a:	930a      	str	r3, [sp, #40]	; 0x28
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	f8d8 3000 	ldr.w	r3, [r8]
 8007434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	f103 0208 	add.w	r2, r3, #8
 8007442:	f8c8 2000 	str.w	r2, [r8]
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800744e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	f8cd 8018 	str.w	r8, [sp, #24]
 800745c:	ee08 0a10 	vmov	s16, r0
 8007460:	4b9f      	ldr	r3, [pc, #636]	; (80076e0 <_printf_float+0x2dc>)
 8007462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	f7f9 fb67 	bl	8000b3c <__aeabi_dcmpun>
 800746e:	bb88      	cbnz	r0, 80074d4 <_printf_float+0xd0>
 8007470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007474:	4b9a      	ldr	r3, [pc, #616]	; (80076e0 <_printf_float+0x2dc>)
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	f7f9 fb41 	bl	8000b00 <__aeabi_dcmple>
 800747e:	bb48      	cbnz	r0, 80074d4 <_printf_float+0xd0>
 8007480:	2200      	movs	r2, #0
 8007482:	2300      	movs	r3, #0
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f9 fb30 	bl	8000aec <__aeabi_dcmplt>
 800748c:	b110      	cbz	r0, 8007494 <_printf_float+0x90>
 800748e:	232d      	movs	r3, #45	; 0x2d
 8007490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007494:	4b93      	ldr	r3, [pc, #588]	; (80076e4 <_printf_float+0x2e0>)
 8007496:	4894      	ldr	r0, [pc, #592]	; (80076e8 <_printf_float+0x2e4>)
 8007498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800749c:	bf94      	ite	ls
 800749e:	4698      	movls	r8, r3
 80074a0:	4680      	movhi	r8, r0
 80074a2:	2303      	movs	r3, #3
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	9b05      	ldr	r3, [sp, #20]
 80074a8:	f023 0204 	bic.w	r2, r3, #4
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	f04f 0900 	mov.w	r9, #0
 80074b2:	9700      	str	r7, [sp, #0]
 80074b4:	4633      	mov	r3, r6
 80074b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 f9d8 	bl	8007870 <_printf_common>
 80074c0:	3001      	adds	r0, #1
 80074c2:	f040 8090 	bne.w	80075e6 <_printf_float+0x1e2>
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	b00d      	add	sp, #52	; 0x34
 80074cc:	ecbd 8b02 	vpop	{d8}
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f9 fb2e 	bl	8000b3c <__aeabi_dcmpun>
 80074e0:	b140      	cbz	r0, 80074f4 <_printf_float+0xf0>
 80074e2:	464b      	mov	r3, r9
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfbc      	itt	lt
 80074e8:	232d      	movlt	r3, #45	; 0x2d
 80074ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074ee:	487f      	ldr	r0, [pc, #508]	; (80076ec <_printf_float+0x2e8>)
 80074f0:	4b7f      	ldr	r3, [pc, #508]	; (80076f0 <_printf_float+0x2ec>)
 80074f2:	e7d1      	b.n	8007498 <_printf_float+0x94>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074fa:	9206      	str	r2, [sp, #24]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	d13f      	bne.n	8007580 <_printf_float+0x17c>
 8007500:	2306      	movs	r3, #6
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	9b05      	ldr	r3, [sp, #20]
 8007506:	6861      	ldr	r1, [r4, #4]
 8007508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800750c:	2300      	movs	r3, #0
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	ab0a      	add	r3, sp, #40	; 0x28
 8007512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007516:	ab09      	add	r3, sp, #36	; 0x24
 8007518:	ec49 8b10 	vmov	d0, r8, r9
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	6022      	str	r2, [r4, #0]
 8007520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff fecd 	bl	80072c4 <__cvt>
 800752a:	9b06      	ldr	r3, [sp, #24]
 800752c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800752e:	2b47      	cmp	r3, #71	; 0x47
 8007530:	4680      	mov	r8, r0
 8007532:	d108      	bne.n	8007546 <_printf_float+0x142>
 8007534:	1cc8      	adds	r0, r1, #3
 8007536:	db02      	blt.n	800753e <_printf_float+0x13a>
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	4299      	cmp	r1, r3
 800753c:	dd41      	ble.n	80075c2 <_printf_float+0x1be>
 800753e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007542:	fa5f fb8b 	uxtb.w	fp, fp
 8007546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800754a:	d820      	bhi.n	800758e <_printf_float+0x18a>
 800754c:	3901      	subs	r1, #1
 800754e:	465a      	mov	r2, fp
 8007550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007554:	9109      	str	r1, [sp, #36]	; 0x24
 8007556:	f7ff ff17 	bl	8007388 <__exponent>
 800755a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800755c:	1813      	adds	r3, r2, r0
 800755e:	2a01      	cmp	r2, #1
 8007560:	4681      	mov	r9, r0
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	dc02      	bgt.n	800756c <_printf_float+0x168>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	07d2      	lsls	r2, r2, #31
 800756a:	d501      	bpl.n	8007570 <_printf_float+0x16c>
 800756c:	3301      	adds	r3, #1
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007574:	2b00      	cmp	r3, #0
 8007576:	d09c      	beq.n	80074b2 <_printf_float+0xae>
 8007578:	232d      	movs	r3, #45	; 0x2d
 800757a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757e:	e798      	b.n	80074b2 <_printf_float+0xae>
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	2a47      	cmp	r2, #71	; 0x47
 8007584:	d1be      	bne.n	8007504 <_printf_float+0x100>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1bc      	bne.n	8007504 <_printf_float+0x100>
 800758a:	2301      	movs	r3, #1
 800758c:	e7b9      	b.n	8007502 <_printf_float+0xfe>
 800758e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007592:	d118      	bne.n	80075c6 <_printf_float+0x1c2>
 8007594:	2900      	cmp	r1, #0
 8007596:	6863      	ldr	r3, [r4, #4]
 8007598:	dd0b      	ble.n	80075b2 <_printf_float+0x1ae>
 800759a:	6121      	str	r1, [r4, #16]
 800759c:	b913      	cbnz	r3, 80075a4 <_printf_float+0x1a0>
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	07d0      	lsls	r0, r2, #31
 80075a2:	d502      	bpl.n	80075aa <_printf_float+0x1a6>
 80075a4:	3301      	adds	r3, #1
 80075a6:	440b      	add	r3, r1
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80075ac:	f04f 0900 	mov.w	r9, #0
 80075b0:	e7de      	b.n	8007570 <_printf_float+0x16c>
 80075b2:	b913      	cbnz	r3, 80075ba <_printf_float+0x1b6>
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	07d2      	lsls	r2, r2, #31
 80075b8:	d501      	bpl.n	80075be <_printf_float+0x1ba>
 80075ba:	3302      	adds	r3, #2
 80075bc:	e7f4      	b.n	80075a8 <_printf_float+0x1a4>
 80075be:	2301      	movs	r3, #1
 80075c0:	e7f2      	b.n	80075a8 <_printf_float+0x1a4>
 80075c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c8:	4299      	cmp	r1, r3
 80075ca:	db05      	blt.n	80075d8 <_printf_float+0x1d4>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	6121      	str	r1, [r4, #16]
 80075d0:	07d8      	lsls	r0, r3, #31
 80075d2:	d5ea      	bpl.n	80075aa <_printf_float+0x1a6>
 80075d4:	1c4b      	adds	r3, r1, #1
 80075d6:	e7e7      	b.n	80075a8 <_printf_float+0x1a4>
 80075d8:	2900      	cmp	r1, #0
 80075da:	bfd4      	ite	le
 80075dc:	f1c1 0202 	rsble	r2, r1, #2
 80075e0:	2201      	movgt	r2, #1
 80075e2:	4413      	add	r3, r2
 80075e4:	e7e0      	b.n	80075a8 <_printf_float+0x1a4>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	055a      	lsls	r2, r3, #21
 80075ea:	d407      	bmi.n	80075fc <_printf_float+0x1f8>
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	4642      	mov	r2, r8
 80075f0:	4631      	mov	r1, r6
 80075f2:	4628      	mov	r0, r5
 80075f4:	47b8      	blx	r7
 80075f6:	3001      	adds	r0, #1
 80075f8:	d12c      	bne.n	8007654 <_printf_float+0x250>
 80075fa:	e764      	b.n	80074c6 <_printf_float+0xc2>
 80075fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007600:	f240 80e0 	bls.w	80077c4 <_printf_float+0x3c0>
 8007604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007608:	2200      	movs	r2, #0
 800760a:	2300      	movs	r3, #0
 800760c:	f7f9 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 8007610:	2800      	cmp	r0, #0
 8007612:	d034      	beq.n	800767e <_printf_float+0x27a>
 8007614:	4a37      	ldr	r2, [pc, #220]	; (80076f4 <_printf_float+0x2f0>)
 8007616:	2301      	movs	r3, #1
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af51 	beq.w	80074c6 <_printf_float+0xc2>
 8007624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007628:	429a      	cmp	r2, r3
 800762a:	db02      	blt.n	8007632 <_printf_float+0x22e>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	07d8      	lsls	r0, r3, #31
 8007630:	d510      	bpl.n	8007654 <_printf_float+0x250>
 8007632:	ee18 3a10 	vmov	r3, s16
 8007636:	4652      	mov	r2, sl
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af41 	beq.w	80074c6 <_printf_float+0xc2>
 8007644:	f04f 0800 	mov.w	r8, #0
 8007648:	f104 091a 	add.w	r9, r4, #26
 800764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764e:	3b01      	subs	r3, #1
 8007650:	4543      	cmp	r3, r8
 8007652:	dc09      	bgt.n	8007668 <_printf_float+0x264>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	079b      	lsls	r3, r3, #30
 8007658:	f100 8105 	bmi.w	8007866 <_printf_float+0x462>
 800765c:	68e0      	ldr	r0, [r4, #12]
 800765e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007660:	4298      	cmp	r0, r3
 8007662:	bfb8      	it	lt
 8007664:	4618      	movlt	r0, r3
 8007666:	e730      	b.n	80074ca <_printf_float+0xc6>
 8007668:	2301      	movs	r3, #1
 800766a:	464a      	mov	r2, r9
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f43f af27 	beq.w	80074c6 <_printf_float+0xc2>
 8007678:	f108 0801 	add.w	r8, r8, #1
 800767c:	e7e6      	b.n	800764c <_printf_float+0x248>
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc39      	bgt.n	80076f8 <_printf_float+0x2f4>
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <_printf_float+0x2f0>)
 8007686:	2301      	movs	r3, #1
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f af19 	beq.w	80074c6 <_printf_float+0xc2>
 8007694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007698:	4313      	orrs	r3, r2
 800769a:	d102      	bne.n	80076a2 <_printf_float+0x29e>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d5d8      	bpl.n	8007654 <_printf_float+0x250>
 80076a2:	ee18 3a10 	vmov	r3, s16
 80076a6:	4652      	mov	r2, sl
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	f43f af09 	beq.w	80074c6 <_printf_float+0xc2>
 80076b4:	f04f 0900 	mov.w	r9, #0
 80076b8:	f104 0a1a 	add.w	sl, r4, #26
 80076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076be:	425b      	negs	r3, r3
 80076c0:	454b      	cmp	r3, r9
 80076c2:	dc01      	bgt.n	80076c8 <_printf_float+0x2c4>
 80076c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c6:	e792      	b.n	80075ee <_printf_float+0x1ea>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4652      	mov	r2, sl
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f aef7 	beq.w	80074c6 <_printf_float+0xc2>
 80076d8:	f109 0901 	add.w	r9, r9, #1
 80076dc:	e7ee      	b.n	80076bc <_printf_float+0x2b8>
 80076de:	bf00      	nop
 80076e0:	7fefffff 	.word	0x7fefffff
 80076e4:	0800a134 	.word	0x0800a134
 80076e8:	0800a138 	.word	0x0800a138
 80076ec:	0800a140 	.word	0x0800a140
 80076f0:	0800a13c 	.word	0x0800a13c
 80076f4:	0800a144 	.word	0x0800a144
 80076f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076fc:	429a      	cmp	r2, r3
 80076fe:	bfa8      	it	ge
 8007700:	461a      	movge	r2, r3
 8007702:	2a00      	cmp	r2, #0
 8007704:	4691      	mov	r9, r2
 8007706:	dc37      	bgt.n	8007778 <_printf_float+0x374>
 8007708:	f04f 0b00 	mov.w	fp, #0
 800770c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007710:	f104 021a 	add.w	r2, r4, #26
 8007714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	eba3 0309 	sub.w	r3, r3, r9
 800771c:	455b      	cmp	r3, fp
 800771e:	dc33      	bgt.n	8007788 <_printf_float+0x384>
 8007720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007724:	429a      	cmp	r2, r3
 8007726:	db3b      	blt.n	80077a0 <_printf_float+0x39c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	07da      	lsls	r2, r3, #31
 800772c:	d438      	bmi.n	80077a0 <_printf_float+0x39c>
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	9a05      	ldr	r2, [sp, #20]
 8007732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007734:	1a9a      	subs	r2, r3, r2
 8007736:	eba3 0901 	sub.w	r9, r3, r1
 800773a:	4591      	cmp	r9, r2
 800773c:	bfa8      	it	ge
 800773e:	4691      	movge	r9, r2
 8007740:	f1b9 0f00 	cmp.w	r9, #0
 8007744:	dc35      	bgt.n	80077b2 <_printf_float+0x3ae>
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800774e:	f104 0a1a 	add.w	sl, r4, #26
 8007752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	eba3 0309 	sub.w	r3, r3, r9
 800775c:	4543      	cmp	r3, r8
 800775e:	f77f af79 	ble.w	8007654 <_printf_float+0x250>
 8007762:	2301      	movs	r3, #1
 8007764:	4652      	mov	r2, sl
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	f43f aeaa 	beq.w	80074c6 <_printf_float+0xc2>
 8007772:	f108 0801 	add.w	r8, r8, #1
 8007776:	e7ec      	b.n	8007752 <_printf_float+0x34e>
 8007778:	4613      	mov	r3, r2
 800777a:	4631      	mov	r1, r6
 800777c:	4642      	mov	r2, r8
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	d1c0      	bne.n	8007708 <_printf_float+0x304>
 8007786:	e69e      	b.n	80074c6 <_printf_float+0xc2>
 8007788:	2301      	movs	r3, #1
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	9205      	str	r2, [sp, #20]
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f ae97 	beq.w	80074c6 <_printf_float+0xc2>
 8007798:	9a05      	ldr	r2, [sp, #20]
 800779a:	f10b 0b01 	add.w	fp, fp, #1
 800779e:	e7b9      	b.n	8007714 <_printf_float+0x310>
 80077a0:	ee18 3a10 	vmov	r3, s16
 80077a4:	4652      	mov	r2, sl
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	d1be      	bne.n	800772e <_printf_float+0x32a>
 80077b0:	e689      	b.n	80074c6 <_printf_float+0xc2>
 80077b2:	9a05      	ldr	r2, [sp, #20]
 80077b4:	464b      	mov	r3, r9
 80077b6:	4442      	add	r2, r8
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	d1c1      	bne.n	8007746 <_printf_float+0x342>
 80077c2:	e680      	b.n	80074c6 <_printf_float+0xc2>
 80077c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c6:	2a01      	cmp	r2, #1
 80077c8:	dc01      	bgt.n	80077ce <_printf_float+0x3ca>
 80077ca:	07db      	lsls	r3, r3, #31
 80077cc:	d538      	bpl.n	8007840 <_printf_float+0x43c>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4642      	mov	r2, r8
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f ae74 	beq.w	80074c6 <_printf_float+0xc2>
 80077de:	ee18 3a10 	vmov	r3, s16
 80077e2:	4652      	mov	r2, sl
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f ae6b 	beq.w	80074c6 <_printf_float+0xc2>
 80077f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f7f9 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80077fc:	b9d8      	cbnz	r0, 8007836 <_printf_float+0x432>
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	f108 0201 	add.w	r2, r8, #1
 8007804:	3b01      	subs	r3, #1
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	d10e      	bne.n	800782e <_printf_float+0x42a>
 8007810:	e659      	b.n	80074c6 <_printf_float+0xc2>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	f43f ae52 	beq.w	80074c6 <_printf_float+0xc2>
 8007822:	f108 0801 	add.w	r8, r8, #1
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	3b01      	subs	r3, #1
 800782a:	4543      	cmp	r3, r8
 800782c:	dcf1      	bgt.n	8007812 <_printf_float+0x40e>
 800782e:	464b      	mov	r3, r9
 8007830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007834:	e6dc      	b.n	80075f0 <_printf_float+0x1ec>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	f104 0a1a 	add.w	sl, r4, #26
 800783e:	e7f2      	b.n	8007826 <_printf_float+0x422>
 8007840:	2301      	movs	r3, #1
 8007842:	4642      	mov	r2, r8
 8007844:	e7df      	b.n	8007806 <_printf_float+0x402>
 8007846:	2301      	movs	r3, #1
 8007848:	464a      	mov	r2, r9
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae38 	beq.w	80074c6 <_printf_float+0xc2>
 8007856:	f108 0801 	add.w	r8, r8, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	4543      	cmp	r3, r8
 8007862:	dcf0      	bgt.n	8007846 <_printf_float+0x442>
 8007864:	e6fa      	b.n	800765c <_printf_float+0x258>
 8007866:	f04f 0800 	mov.w	r8, #0
 800786a:	f104 0919 	add.w	r9, r4, #25
 800786e:	e7f4      	b.n	800785a <_printf_float+0x456>

08007870 <_printf_common>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	4616      	mov	r6, r2
 8007876:	4699      	mov	r9, r3
 8007878:	688a      	ldr	r2, [r1, #8]
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007880:	4293      	cmp	r3, r2
 8007882:	bfb8      	it	lt
 8007884:	4613      	movlt	r3, r2
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800788c:	4607      	mov	r7, r0
 800788e:	460c      	mov	r4, r1
 8007890:	b10a      	cbz	r2, 8007896 <_printf_common+0x26>
 8007892:	3301      	adds	r3, #1
 8007894:	6033      	str	r3, [r6, #0]
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	0699      	lsls	r1, r3, #26
 800789a:	bf42      	ittt	mi
 800789c:	6833      	ldrmi	r3, [r6, #0]
 800789e:	3302      	addmi	r3, #2
 80078a0:	6033      	strmi	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	f015 0506 	ands.w	r5, r5, #6
 80078a8:	d106      	bne.n	80078b8 <_printf_common+0x48>
 80078aa:	f104 0a19 	add.w	sl, r4, #25
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	6832      	ldr	r2, [r6, #0]
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dc26      	bgt.n	8007906 <_printf_common+0x96>
 80078b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078bc:	1e13      	subs	r3, r2, #0
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	bf18      	it	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	0692      	lsls	r2, r2, #26
 80078c6:	d42b      	bmi.n	8007920 <_printf_common+0xb0>
 80078c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d01e      	beq.n	8007914 <_printf_common+0xa4>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	68e5      	ldr	r5, [r4, #12]
 80078da:	6832      	ldr	r2, [r6, #0]
 80078dc:	f003 0306 	and.w	r3, r3, #6
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	bf08      	it	eq
 80078e4:	1aad      	subeq	r5, r5, r2
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	bf0c      	ite	eq
 80078ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f0:	2500      	movne	r5, #0
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bfc4      	itt	gt
 80078f6:	1a9b      	subgt	r3, r3, r2
 80078f8:	18ed      	addgt	r5, r5, r3
 80078fa:	2600      	movs	r6, #0
 80078fc:	341a      	adds	r4, #26
 80078fe:	42b5      	cmp	r5, r6
 8007900:	d11a      	bne.n	8007938 <_printf_common+0xc8>
 8007902:	2000      	movs	r0, #0
 8007904:	e008      	b.n	8007918 <_printf_common+0xa8>
 8007906:	2301      	movs	r3, #1
 8007908:	4652      	mov	r2, sl
 800790a:	4649      	mov	r1, r9
 800790c:	4638      	mov	r0, r7
 800790e:	47c0      	blx	r8
 8007910:	3001      	adds	r0, #1
 8007912:	d103      	bne.n	800791c <_printf_common+0xac>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791c:	3501      	adds	r5, #1
 800791e:	e7c6      	b.n	80078ae <_printf_common+0x3e>
 8007920:	18e1      	adds	r1, r4, r3
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	2030      	movs	r0, #48	; 0x30
 8007926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800792a:	4422      	add	r2, r4
 800792c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007934:	3302      	adds	r3, #2
 8007936:	e7c7      	b.n	80078c8 <_printf_common+0x58>
 8007938:	2301      	movs	r3, #1
 800793a:	4622      	mov	r2, r4
 800793c:	4649      	mov	r1, r9
 800793e:	4638      	mov	r0, r7
 8007940:	47c0      	blx	r8
 8007942:	3001      	adds	r0, #1
 8007944:	d0e6      	beq.n	8007914 <_printf_common+0xa4>
 8007946:	3601      	adds	r6, #1
 8007948:	e7d9      	b.n	80078fe <_printf_common+0x8e>
	...

0800794c <_printf_i>:
 800794c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	7e0f      	ldrb	r7, [r1, #24]
 8007952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007954:	2f78      	cmp	r7, #120	; 0x78
 8007956:	4691      	mov	r9, r2
 8007958:	4680      	mov	r8, r0
 800795a:	460c      	mov	r4, r1
 800795c:	469a      	mov	sl, r3
 800795e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007962:	d807      	bhi.n	8007974 <_printf_i+0x28>
 8007964:	2f62      	cmp	r7, #98	; 0x62
 8007966:	d80a      	bhi.n	800797e <_printf_i+0x32>
 8007968:	2f00      	cmp	r7, #0
 800796a:	f000 80d8 	beq.w	8007b1e <_printf_i+0x1d2>
 800796e:	2f58      	cmp	r7, #88	; 0x58
 8007970:	f000 80a3 	beq.w	8007aba <_printf_i+0x16e>
 8007974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800797c:	e03a      	b.n	80079f4 <_printf_i+0xa8>
 800797e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007982:	2b15      	cmp	r3, #21
 8007984:	d8f6      	bhi.n	8007974 <_printf_i+0x28>
 8007986:	a101      	add	r1, pc, #4	; (adr r1, 800798c <_printf_i+0x40>)
 8007988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079f9 	.word	0x080079f9
 8007994:	08007975 	.word	0x08007975
 8007998:	08007975 	.word	0x08007975
 800799c:	08007975 	.word	0x08007975
 80079a0:	08007975 	.word	0x08007975
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	08007975 	.word	0x08007975
 80079ac:	08007975 	.word	0x08007975
 80079b0:	08007975 	.word	0x08007975
 80079b4:	08007975 	.word	0x08007975
 80079b8:	08007b05 	.word	0x08007b05
 80079bc:	08007a29 	.word	0x08007a29
 80079c0:	08007ae7 	.word	0x08007ae7
 80079c4:	08007975 	.word	0x08007975
 80079c8:	08007975 	.word	0x08007975
 80079cc:	08007b27 	.word	0x08007b27
 80079d0:	08007975 	.word	0x08007975
 80079d4:	08007a29 	.word	0x08007a29
 80079d8:	08007975 	.word	0x08007975
 80079dc:	08007975 	.word	0x08007975
 80079e0:	08007aef 	.word	0x08007aef
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	602a      	str	r2, [r5, #0]
 80079ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0a3      	b.n	8007b40 <_printf_i+0x1f4>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	6829      	ldr	r1, [r5, #0]
 80079fc:	0606      	lsls	r6, r0, #24
 80079fe:	f101 0304 	add.w	r3, r1, #4
 8007a02:	d50a      	bpl.n	8007a1a <_printf_i+0xce>
 8007a04:	680e      	ldr	r6, [r1, #0]
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	2e00      	cmp	r6, #0
 8007a0a:	da03      	bge.n	8007a14 <_printf_i+0xc8>
 8007a0c:	232d      	movs	r3, #45	; 0x2d
 8007a0e:	4276      	negs	r6, r6
 8007a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a14:	485e      	ldr	r0, [pc, #376]	; (8007b90 <_printf_i+0x244>)
 8007a16:	230a      	movs	r3, #10
 8007a18:	e019      	b.n	8007a4e <_printf_i+0x102>
 8007a1a:	680e      	ldr	r6, [r1, #0]
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a22:	bf18      	it	ne
 8007a24:	b236      	sxthne	r6, r6
 8007a26:	e7ef      	b.n	8007a08 <_printf_i+0xbc>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	6820      	ldr	r0, [r4, #0]
 8007a2c:	1d19      	adds	r1, r3, #4
 8007a2e:	6029      	str	r1, [r5, #0]
 8007a30:	0601      	lsls	r1, r0, #24
 8007a32:	d501      	bpl.n	8007a38 <_printf_i+0xec>
 8007a34:	681e      	ldr	r6, [r3, #0]
 8007a36:	e002      	b.n	8007a3e <_printf_i+0xf2>
 8007a38:	0646      	lsls	r6, r0, #25
 8007a3a:	d5fb      	bpl.n	8007a34 <_printf_i+0xe8>
 8007a3c:	881e      	ldrh	r6, [r3, #0]
 8007a3e:	4854      	ldr	r0, [pc, #336]	; (8007b90 <_printf_i+0x244>)
 8007a40:	2f6f      	cmp	r7, #111	; 0x6f
 8007a42:	bf0c      	ite	eq
 8007a44:	2308      	moveq	r3, #8
 8007a46:	230a      	movne	r3, #10
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a4e:	6865      	ldr	r5, [r4, #4]
 8007a50:	60a5      	str	r5, [r4, #8]
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	bfa2      	ittt	ge
 8007a56:	6821      	ldrge	r1, [r4, #0]
 8007a58:	f021 0104 	bicge.w	r1, r1, #4
 8007a5c:	6021      	strge	r1, [r4, #0]
 8007a5e:	b90e      	cbnz	r6, 8007a64 <_printf_i+0x118>
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	d04d      	beq.n	8007b00 <_printf_i+0x1b4>
 8007a64:	4615      	mov	r5, r2
 8007a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a6e:	5dc7      	ldrb	r7, [r0, r7]
 8007a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a74:	4637      	mov	r7, r6
 8007a76:	42bb      	cmp	r3, r7
 8007a78:	460e      	mov	r6, r1
 8007a7a:	d9f4      	bls.n	8007a66 <_printf_i+0x11a>
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d10b      	bne.n	8007a98 <_printf_i+0x14c>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	07de      	lsls	r6, r3, #31
 8007a84:	d508      	bpl.n	8007a98 <_printf_i+0x14c>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	6861      	ldr	r1, [r4, #4]
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	bfde      	ittt	le
 8007a8e:	2330      	movle	r3, #48	; 0x30
 8007a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a98:	1b52      	subs	r2, r2, r5
 8007a9a:	6122      	str	r2, [r4, #16]
 8007a9c:	f8cd a000 	str.w	sl, [sp]
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	aa03      	add	r2, sp, #12
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	f7ff fee2 	bl	8007870 <_printf_common>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d14c      	bne.n	8007b4a <_printf_i+0x1fe>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b004      	add	sp, #16
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aba:	4835      	ldr	r0, [pc, #212]	; (8007b90 <_printf_i+0x244>)
 8007abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ac0:	6829      	ldr	r1, [r5, #0]
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ac8:	6029      	str	r1, [r5, #0]
 8007aca:	061d      	lsls	r5, r3, #24
 8007acc:	d514      	bpl.n	8007af8 <_printf_i+0x1ac>
 8007ace:	07df      	lsls	r7, r3, #31
 8007ad0:	bf44      	itt	mi
 8007ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ad6:	6023      	strmi	r3, [r4, #0]
 8007ad8:	b91e      	cbnz	r6, 8007ae2 <_printf_i+0x196>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f023 0320 	bic.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	e7b0      	b.n	8007a48 <_printf_i+0xfc>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f043 0320 	orr.w	r3, r3, #32
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	2378      	movs	r3, #120	; 0x78
 8007af0:	4828      	ldr	r0, [pc, #160]	; (8007b94 <_printf_i+0x248>)
 8007af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007af6:	e7e3      	b.n	8007ac0 <_printf_i+0x174>
 8007af8:	0659      	lsls	r1, r3, #25
 8007afa:	bf48      	it	mi
 8007afc:	b2b6      	uxthmi	r6, r6
 8007afe:	e7e6      	b.n	8007ace <_printf_i+0x182>
 8007b00:	4615      	mov	r5, r2
 8007b02:	e7bb      	b.n	8007a7c <_printf_i+0x130>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	6826      	ldr	r6, [r4, #0]
 8007b08:	6961      	ldr	r1, [r4, #20]
 8007b0a:	1d18      	adds	r0, r3, #4
 8007b0c:	6028      	str	r0, [r5, #0]
 8007b0e:	0635      	lsls	r5, r6, #24
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	d501      	bpl.n	8007b18 <_printf_i+0x1cc>
 8007b14:	6019      	str	r1, [r3, #0]
 8007b16:	e002      	b.n	8007b1e <_printf_i+0x1d2>
 8007b18:	0670      	lsls	r0, r6, #25
 8007b1a:	d5fb      	bpl.n	8007b14 <_printf_i+0x1c8>
 8007b1c:	8019      	strh	r1, [r3, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6123      	str	r3, [r4, #16]
 8007b22:	4615      	mov	r5, r2
 8007b24:	e7ba      	b.n	8007a9c <_printf_i+0x150>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	1d1a      	adds	r2, r3, #4
 8007b2a:	602a      	str	r2, [r5, #0]
 8007b2c:	681d      	ldr	r5, [r3, #0]
 8007b2e:	6862      	ldr	r2, [r4, #4]
 8007b30:	2100      	movs	r1, #0
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7f8 fb5c 	bl	80001f0 <memchr>
 8007b38:	b108      	cbz	r0, 8007b3e <_printf_i+0x1f2>
 8007b3a:	1b40      	subs	r0, r0, r5
 8007b3c:	6060      	str	r0, [r4, #4]
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	6123      	str	r3, [r4, #16]
 8007b42:	2300      	movs	r3, #0
 8007b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b48:	e7a8      	b.n	8007a9c <_printf_i+0x150>
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	462a      	mov	r2, r5
 8007b4e:	4649      	mov	r1, r9
 8007b50:	4640      	mov	r0, r8
 8007b52:	47d0      	blx	sl
 8007b54:	3001      	adds	r0, #1
 8007b56:	d0ab      	beq.n	8007ab0 <_printf_i+0x164>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	079b      	lsls	r3, r3, #30
 8007b5c:	d413      	bmi.n	8007b86 <_printf_i+0x23a>
 8007b5e:	68e0      	ldr	r0, [r4, #12]
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	4298      	cmp	r0, r3
 8007b64:	bfb8      	it	lt
 8007b66:	4618      	movlt	r0, r3
 8007b68:	e7a4      	b.n	8007ab4 <_printf_i+0x168>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4640      	mov	r0, r8
 8007b72:	47d0      	blx	sl
 8007b74:	3001      	adds	r0, #1
 8007b76:	d09b      	beq.n	8007ab0 <_printf_i+0x164>
 8007b78:	3501      	adds	r5, #1
 8007b7a:	68e3      	ldr	r3, [r4, #12]
 8007b7c:	9903      	ldr	r1, [sp, #12]
 8007b7e:	1a5b      	subs	r3, r3, r1
 8007b80:	42ab      	cmp	r3, r5
 8007b82:	dcf2      	bgt.n	8007b6a <_printf_i+0x21e>
 8007b84:	e7eb      	b.n	8007b5e <_printf_i+0x212>
 8007b86:	2500      	movs	r5, #0
 8007b88:	f104 0619 	add.w	r6, r4, #25
 8007b8c:	e7f5      	b.n	8007b7a <_printf_i+0x22e>
 8007b8e:	bf00      	nop
 8007b90:	0800a146 	.word	0x0800a146
 8007b94:	0800a157 	.word	0x0800a157

08007b98 <sniprintf>:
 8007b98:	b40c      	push	{r2, r3}
 8007b9a:	b530      	push	{r4, r5, lr}
 8007b9c:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <sniprintf+0x64>)
 8007b9e:	1e0c      	subs	r4, r1, #0
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	b09d      	sub	sp, #116	; 0x74
 8007ba4:	da08      	bge.n	8007bb8 <sniprintf+0x20>
 8007ba6:	238b      	movs	r3, #139	; 0x8b
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	b01d      	add	sp, #116	; 0x74
 8007bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bb4:	b002      	add	sp, #8
 8007bb6:	4770      	bx	lr
 8007bb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007bc0:	bf14      	ite	ne
 8007bc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007bc6:	4623      	moveq	r3, r4
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bd0:	9002      	str	r0, [sp, #8]
 8007bd2:	9006      	str	r0, [sp, #24]
 8007bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007bd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bda:	ab21      	add	r3, sp, #132	; 0x84
 8007bdc:	a902      	add	r1, sp, #8
 8007bde:	4628      	mov	r0, r5
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f001 fb77 	bl	80092d4 <_svfiprintf_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	bfbc      	itt	lt
 8007bea:	238b      	movlt	r3, #139	; 0x8b
 8007bec:	602b      	strlt	r3, [r5, #0]
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d0dd      	beq.n	8007bae <sniprintf+0x16>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e7d9      	b.n	8007bae <sniprintf+0x16>
 8007bfa:	bf00      	nop
 8007bfc:	20000020 	.word	0x20000020

08007c00 <quorem>:
 8007c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	6903      	ldr	r3, [r0, #16]
 8007c06:	690c      	ldr	r4, [r1, #16]
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	f2c0 8081 	blt.w	8007d12 <quorem+0x112>
 8007c10:	3c01      	subs	r4, #1
 8007c12:	f101 0814 	add.w	r8, r1, #20
 8007c16:	f100 0514 	add.w	r5, r0, #20
 8007c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c38:	d331      	bcc.n	8007c9e <quorem+0x9e>
 8007c3a:	f04f 0e00 	mov.w	lr, #0
 8007c3e:	4640      	mov	r0, r8
 8007c40:	46ac      	mov	ip, r5
 8007c42:	46f2      	mov	sl, lr
 8007c44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c48:	b293      	uxth	r3, r2
 8007c4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	ebaa 0303 	sub.w	r3, sl, r3
 8007c58:	f8dc a000 	ldr.w	sl, [ip]
 8007c5c:	0c12      	lsrs	r2, r2, #16
 8007c5e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c62:	fb06 e202 	mla	r2, r6, r2, lr
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	9b00      	ldr	r3, [sp, #0]
 8007c6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c78:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c7c:	4581      	cmp	r9, r0
 8007c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c82:	f84c 3b04 	str.w	r3, [ip], #4
 8007c86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c8a:	d2db      	bcs.n	8007c44 <quorem+0x44>
 8007c8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c90:	b92b      	cbnz	r3, 8007c9e <quorem+0x9e>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	429d      	cmp	r5, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	d32e      	bcc.n	8007cfa <quorem+0xfa>
 8007c9c:	613c      	str	r4, [r7, #16]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f001 f8c4 	bl	8008e2c <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	db24      	blt.n	8007cf2 <quorem+0xf2>
 8007ca8:	3601      	adds	r6, #1
 8007caa:	4628      	mov	r0, r5
 8007cac:	f04f 0c00 	mov.w	ip, #0
 8007cb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cb4:	f8d0 e000 	ldr.w	lr, [r0]
 8007cb8:	b293      	uxth	r3, r2
 8007cba:	ebac 0303 	sub.w	r3, ip, r3
 8007cbe:	0c12      	lsrs	r2, r2, #16
 8007cc0:	fa13 f38e 	uxtah	r3, r3, lr
 8007cc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cd2:	45c1      	cmp	r9, r8
 8007cd4:	f840 3b04 	str.w	r3, [r0], #4
 8007cd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cdc:	d2e8      	bcs.n	8007cb0 <quorem+0xb0>
 8007cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce6:	b922      	cbnz	r2, 8007cf2 <quorem+0xf2>
 8007ce8:	3b04      	subs	r3, #4
 8007cea:	429d      	cmp	r5, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	d30a      	bcc.n	8007d06 <quorem+0x106>
 8007cf0:	613c      	str	r4, [r7, #16]
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	b003      	add	sp, #12
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	3b04      	subs	r3, #4
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	d1cc      	bne.n	8007c9c <quorem+0x9c>
 8007d02:	3c01      	subs	r4, #1
 8007d04:	e7c7      	b.n	8007c96 <quorem+0x96>
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <quorem+0xf0>
 8007d0e:	3c01      	subs	r4, #1
 8007d10:	e7eb      	b.n	8007cea <quorem+0xea>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e7ee      	b.n	8007cf4 <quorem+0xf4>
	...

08007d18 <_dtoa_r>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ed2d 8b04 	vpush	{d8-d9}
 8007d20:	ec57 6b10 	vmov	r6, r7, d0
 8007d24:	b093      	sub	sp, #76	; 0x4c
 8007d26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d2c:	9106      	str	r1, [sp, #24]
 8007d2e:	ee10 aa10 	vmov	sl, s0
 8007d32:	4604      	mov	r4, r0
 8007d34:	9209      	str	r2, [sp, #36]	; 0x24
 8007d36:	930c      	str	r3, [sp, #48]	; 0x30
 8007d38:	46bb      	mov	fp, r7
 8007d3a:	b975      	cbnz	r5, 8007d5a <_dtoa_r+0x42>
 8007d3c:	2010      	movs	r0, #16
 8007d3e:	f000 fddd 	bl	80088fc <malloc>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6260      	str	r0, [r4, #36]	; 0x24
 8007d46:	b920      	cbnz	r0, 8007d52 <_dtoa_r+0x3a>
 8007d48:	4ba7      	ldr	r3, [pc, #668]	; (8007fe8 <_dtoa_r+0x2d0>)
 8007d4a:	21ea      	movs	r1, #234	; 0xea
 8007d4c:	48a7      	ldr	r0, [pc, #668]	; (8007fec <_dtoa_r+0x2d4>)
 8007d4e:	f001 fbd1 	bl	80094f4 <__assert_func>
 8007d52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d56:	6005      	str	r5, [r0, #0]
 8007d58:	60c5      	str	r5, [r0, #12]
 8007d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	b151      	cbz	r1, 8007d76 <_dtoa_r+0x5e>
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	604a      	str	r2, [r1, #4]
 8007d64:	2301      	movs	r3, #1
 8007d66:	4093      	lsls	r3, r2
 8007d68:	608b      	str	r3, [r1, #8]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fe1c 	bl	80089a8 <_Bfree>
 8007d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	1e3b      	subs	r3, r7, #0
 8007d78:	bfaa      	itet	ge
 8007d7a:	2300      	movge	r3, #0
 8007d7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d80:	f8c8 3000 	strge.w	r3, [r8]
 8007d84:	4b9a      	ldr	r3, [pc, #616]	; (8007ff0 <_dtoa_r+0x2d8>)
 8007d86:	bfbc      	itt	lt
 8007d88:	2201      	movlt	r2, #1
 8007d8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d8e:	ea33 030b 	bics.w	r3, r3, fp
 8007d92:	d11b      	bne.n	8007dcc <_dtoa_r+0xb4>
 8007d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007da0:	4333      	orrs	r3, r6
 8007da2:	f000 8592 	beq.w	80088ca <_dtoa_r+0xbb2>
 8007da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da8:	b963      	cbnz	r3, 8007dc4 <_dtoa_r+0xac>
 8007daa:	4b92      	ldr	r3, [pc, #584]	; (8007ff4 <_dtoa_r+0x2dc>)
 8007dac:	e022      	b.n	8007df4 <_dtoa_r+0xdc>
 8007dae:	4b92      	ldr	r3, [pc, #584]	; (8007ff8 <_dtoa_r+0x2e0>)
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	3308      	adds	r3, #8
 8007db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	9801      	ldr	r0, [sp, #4]
 8007dba:	b013      	add	sp, #76	; 0x4c
 8007dbc:	ecbd 8b04 	vpop	{d8-d9}
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ff4 <_dtoa_r+0x2dc>)
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	e7f3      	b.n	8007db4 <_dtoa_r+0x9c>
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	4659      	mov	r1, fp
 8007dd4:	f7f8 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dd8:	ec4b ab19 	vmov	d9, sl, fp
 8007ddc:	4680      	mov	r8, r0
 8007dde:	b158      	cbz	r0, 8007df8 <_dtoa_r+0xe0>
 8007de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de2:	2301      	movs	r3, #1
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 856b 	beq.w	80088c4 <_dtoa_r+0xbac>
 8007dee:	4883      	ldr	r0, [pc, #524]	; (8007ffc <_dtoa_r+0x2e4>)
 8007df0:	6018      	str	r0, [r3, #0]
 8007df2:	1e43      	subs	r3, r0, #1
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	e7df      	b.n	8007db8 <_dtoa_r+0xa0>
 8007df8:	ec4b ab10 	vmov	d0, sl, fp
 8007dfc:	aa10      	add	r2, sp, #64	; 0x40
 8007dfe:	a911      	add	r1, sp, #68	; 0x44
 8007e00:	4620      	mov	r0, r4
 8007e02:	f001 f8b9 	bl	8008f78 <__d2b>
 8007e06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e0a:	ee08 0a10 	vmov	s16, r0
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	f000 8084 	beq.w	8007f1c <_dtoa_r+0x204>
 8007e14:	ee19 3a90 	vmov	r3, s19
 8007e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e20:	4656      	mov	r6, sl
 8007e22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e2e:	4b74      	ldr	r3, [pc, #464]	; (8008000 <_dtoa_r+0x2e8>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fa2f 	bl	8000298 <__aeabi_dsub>
 8007e3a:	a365      	add	r3, pc, #404	; (adr r3, 8007fd0 <_dtoa_r+0x2b8>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fbe2 	bl	8000608 <__aeabi_dmul>
 8007e44:	a364      	add	r3, pc, #400	; (adr r3, 8007fd8 <_dtoa_r+0x2c0>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 fa27 	bl	800029c <__adddf3>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	4628      	mov	r0, r5
 8007e52:	460f      	mov	r7, r1
 8007e54:	f7f8 fb6e 	bl	8000534 <__aeabi_i2d>
 8007e58:	a361      	add	r3, pc, #388	; (adr r3, 8007fe0 <_dtoa_r+0x2c8>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fbd3 	bl	8000608 <__aeabi_dmul>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 fa17 	bl	800029c <__adddf3>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	f7f8 fe79 	bl	8000b68 <__aeabi_d2iz>
 8007e76:	2200      	movs	r2, #0
 8007e78:	9000      	str	r0, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fe34 	bl	8000aec <__aeabi_dcmplt>
 8007e84:	b150      	cbz	r0, 8007e9c <_dtoa_r+0x184>
 8007e86:	9800      	ldr	r0, [sp, #0]
 8007e88:	f7f8 fb54 	bl	8000534 <__aeabi_i2d>
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	463b      	mov	r3, r7
 8007e90:	f7f8 fe22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e94:	b910      	cbnz	r0, 8007e9c <_dtoa_r+0x184>
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	9b00      	ldr	r3, [sp, #0]
 8007e9e:	2b16      	cmp	r3, #22
 8007ea0:	d85a      	bhi.n	8007f58 <_dtoa_r+0x240>
 8007ea2:	9a00      	ldr	r2, [sp, #0]
 8007ea4:	4b57      	ldr	r3, [pc, #348]	; (8008004 <_dtoa_r+0x2ec>)
 8007ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	ec51 0b19 	vmov	r0, r1, d9
 8007eb2:	f7f8 fe1b 	bl	8000aec <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d050      	beq.n	8007f5c <_dtoa_r+0x244>
 8007eba:	9b00      	ldr	r3, [sp, #0]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ec6:	1b5d      	subs	r5, r3, r5
 8007ec8:	1e6b      	subs	r3, r5, #1
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	bf45      	ittet	mi
 8007ece:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ed2:	9304      	strmi	r3, [sp, #16]
 8007ed4:	2300      	movpl	r3, #0
 8007ed6:	2300      	movmi	r3, #0
 8007ed8:	bf4c      	ite	mi
 8007eda:	9305      	strmi	r3, [sp, #20]
 8007edc:	9304      	strpl	r3, [sp, #16]
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	db3d      	blt.n	8007f60 <_dtoa_r+0x248>
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	9a00      	ldr	r2, [sp, #0]
 8007ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8007eea:	4413      	add	r3, r2
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9307      	str	r3, [sp, #28]
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	f200 8089 	bhi.w	800800c <_dtoa_r+0x2f4>
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	bfc4      	itt	gt
 8007efe:	3b04      	subgt	r3, #4
 8007f00:	9306      	strgt	r3, [sp, #24]
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	f1a3 0302 	sub.w	r3, r3, #2
 8007f08:	bfcc      	ite	gt
 8007f0a:	2500      	movgt	r5, #0
 8007f0c:	2501      	movle	r5, #1
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f200 8087 	bhi.w	8008022 <_dtoa_r+0x30a>
 8007f14:	e8df f003 	tbb	[pc, r3]
 8007f18:	59383a2d 	.word	0x59383a2d
 8007f1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f20:	441d      	add	r5, r3
 8007f22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	bfc1      	itttt	gt
 8007f2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f3a:	bfda      	itte	le
 8007f3c:	f1c3 0320 	rsble	r3, r3, #32
 8007f40:	fa06 f003 	lslle.w	r0, r6, r3
 8007f44:	4318      	orrgt	r0, r3
 8007f46:	f7f8 fae5 	bl	8000514 <__aeabi_ui2d>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f52:	3d01      	subs	r5, #1
 8007f54:	930e      	str	r3, [sp, #56]	; 0x38
 8007f56:	e76a      	b.n	8007e2e <_dtoa_r+0x116>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7b2      	b.n	8007ec2 <_dtoa_r+0x1aa>
 8007f5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f5e:	e7b1      	b.n	8007ec4 <_dtoa_r+0x1ac>
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	9a00      	ldr	r2, [sp, #0]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	4253      	negs	r3, r2
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f70:	e7bf      	b.n	8007ef2 <_dtoa_r+0x1da>
 8007f72:	2300      	movs	r3, #0
 8007f74:	9308      	str	r3, [sp, #32]
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc55      	bgt.n	8008028 <_dtoa_r+0x310>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f82:	461a      	mov	r2, r3
 8007f84:	9209      	str	r2, [sp, #36]	; 0x24
 8007f86:	e00c      	b.n	8007fa2 <_dtoa_r+0x28a>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e7f3      	b.n	8007f74 <_dtoa_r+0x25c>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f90:	9308      	str	r3, [sp, #32]
 8007f92:	9b00      	ldr	r3, [sp, #0]
 8007f94:	4413      	add	r3, r2
 8007f96:	9302      	str	r3, [sp, #8]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	bfb8      	it	lt
 8007fa0:	2301      	movlt	r3, #1
 8007fa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6042      	str	r2, [r0, #4]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	f102 0614 	add.w	r6, r2, #20
 8007fae:	429e      	cmp	r6, r3
 8007fb0:	6841      	ldr	r1, [r0, #4]
 8007fb2:	d93d      	bls.n	8008030 <_dtoa_r+0x318>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fcb7 	bl	8008928 <_Balloc>
 8007fba:	9001      	str	r0, [sp, #4]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d13b      	bne.n	8008038 <_dtoa_r+0x320>
 8007fc0:	4b11      	ldr	r3, [pc, #68]	; (8008008 <_dtoa_r+0x2f0>)
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fc8:	e6c0      	b.n	8007d4c <_dtoa_r+0x34>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e7df      	b.n	8007f8e <_dtoa_r+0x276>
 8007fce:	bf00      	nop
 8007fd0:	636f4361 	.word	0x636f4361
 8007fd4:	3fd287a7 	.word	0x3fd287a7
 8007fd8:	8b60c8b3 	.word	0x8b60c8b3
 8007fdc:	3fc68a28 	.word	0x3fc68a28
 8007fe0:	509f79fb 	.word	0x509f79fb
 8007fe4:	3fd34413 	.word	0x3fd34413
 8007fe8:	0800a175 	.word	0x0800a175
 8007fec:	0800a18c 	.word	0x0800a18c
 8007ff0:	7ff00000 	.word	0x7ff00000
 8007ff4:	0800a171 	.word	0x0800a171
 8007ff8:	0800a168 	.word	0x0800a168
 8007ffc:	0800a145 	.word	0x0800a145
 8008000:	3ff80000 	.word	0x3ff80000
 8008004:	0800a280 	.word	0x0800a280
 8008008:	0800a1e7 	.word	0x0800a1e7
 800800c:	2501      	movs	r5, #1
 800800e:	2300      	movs	r3, #0
 8008010:	9306      	str	r3, [sp, #24]
 8008012:	9508      	str	r5, [sp, #32]
 8008014:	f04f 33ff 	mov.w	r3, #4294967295
 8008018:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	2312      	movs	r3, #18
 8008020:	e7b0      	b.n	8007f84 <_dtoa_r+0x26c>
 8008022:	2301      	movs	r3, #1
 8008024:	9308      	str	r3, [sp, #32]
 8008026:	e7f5      	b.n	8008014 <_dtoa_r+0x2fc>
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800802e:	e7b8      	b.n	8007fa2 <_dtoa_r+0x28a>
 8008030:	3101      	adds	r1, #1
 8008032:	6041      	str	r1, [r0, #4]
 8008034:	0052      	lsls	r2, r2, #1
 8008036:	e7b8      	b.n	8007faa <_dtoa_r+0x292>
 8008038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	2b0e      	cmp	r3, #14
 8008042:	f200 809d 	bhi.w	8008180 <_dtoa_r+0x468>
 8008046:	2d00      	cmp	r5, #0
 8008048:	f000 809a 	beq.w	8008180 <_dtoa_r+0x468>
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd32      	ble.n	80080b8 <_dtoa_r+0x3a0>
 8008052:	4ab7      	ldr	r2, [pc, #732]	; (8008330 <_dtoa_r+0x618>)
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800805c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008060:	9b00      	ldr	r3, [sp, #0]
 8008062:	05d8      	lsls	r0, r3, #23
 8008064:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008068:	d516      	bpl.n	8008098 <_dtoa_r+0x380>
 800806a:	4bb2      	ldr	r3, [pc, #712]	; (8008334 <_dtoa_r+0x61c>)
 800806c:	ec51 0b19 	vmov	r0, r1, d9
 8008070:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008074:	f7f8 fbf2 	bl	800085c <__aeabi_ddiv>
 8008078:	f007 070f 	and.w	r7, r7, #15
 800807c:	4682      	mov	sl, r0
 800807e:	468b      	mov	fp, r1
 8008080:	2503      	movs	r5, #3
 8008082:	4eac      	ldr	r6, [pc, #688]	; (8008334 <_dtoa_r+0x61c>)
 8008084:	b957      	cbnz	r7, 800809c <_dtoa_r+0x384>
 8008086:	4642      	mov	r2, r8
 8008088:	464b      	mov	r3, r9
 800808a:	4650      	mov	r0, sl
 800808c:	4659      	mov	r1, fp
 800808e:	f7f8 fbe5 	bl	800085c <__aeabi_ddiv>
 8008092:	4682      	mov	sl, r0
 8008094:	468b      	mov	fp, r1
 8008096:	e028      	b.n	80080ea <_dtoa_r+0x3d2>
 8008098:	2502      	movs	r5, #2
 800809a:	e7f2      	b.n	8008082 <_dtoa_r+0x36a>
 800809c:	07f9      	lsls	r1, r7, #31
 800809e:	d508      	bpl.n	80080b2 <_dtoa_r+0x39a>
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080a8:	f7f8 faae 	bl	8000608 <__aeabi_dmul>
 80080ac:	3501      	adds	r5, #1
 80080ae:	4680      	mov	r8, r0
 80080b0:	4689      	mov	r9, r1
 80080b2:	107f      	asrs	r7, r7, #1
 80080b4:	3608      	adds	r6, #8
 80080b6:	e7e5      	b.n	8008084 <_dtoa_r+0x36c>
 80080b8:	f000 809b 	beq.w	80081f2 <_dtoa_r+0x4da>
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	4f9d      	ldr	r7, [pc, #628]	; (8008334 <_dtoa_r+0x61c>)
 80080c0:	425e      	negs	r6, r3
 80080c2:	4b9b      	ldr	r3, [pc, #620]	; (8008330 <_dtoa_r+0x618>)
 80080c4:	f006 020f 	and.w	r2, r6, #15
 80080c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	ec51 0b19 	vmov	r0, r1, d9
 80080d4:	f7f8 fa98 	bl	8000608 <__aeabi_dmul>
 80080d8:	1136      	asrs	r6, r6, #4
 80080da:	4682      	mov	sl, r0
 80080dc:	468b      	mov	fp, r1
 80080de:	2300      	movs	r3, #0
 80080e0:	2502      	movs	r5, #2
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d17a      	bne.n	80081dc <_dtoa_r+0x4c4>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1d3      	bne.n	8008092 <_dtoa_r+0x37a>
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8082 	beq.w	80081f6 <_dtoa_r+0x4de>
 80080f2:	4b91      	ldr	r3, [pc, #580]	; (8008338 <_dtoa_r+0x620>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	4650      	mov	r0, sl
 80080f8:	4659      	mov	r1, fp
 80080fa:	f7f8 fcf7 	bl	8000aec <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d079      	beq.n	80081f6 <_dtoa_r+0x4de>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d076      	beq.n	80081f6 <_dtoa_r+0x4de>
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	dd36      	ble.n	800817c <_dtoa_r+0x464>
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	1e5f      	subs	r7, r3, #1
 8008116:	2200      	movs	r2, #0
 8008118:	4b88      	ldr	r3, [pc, #544]	; (800833c <_dtoa_r+0x624>)
 800811a:	f7f8 fa75 	bl	8000608 <__aeabi_dmul>
 800811e:	9e02      	ldr	r6, [sp, #8]
 8008120:	4682      	mov	sl, r0
 8008122:	468b      	mov	fp, r1
 8008124:	3501      	adds	r5, #1
 8008126:	4628      	mov	r0, r5
 8008128:	f7f8 fa04 	bl	8000534 <__aeabi_i2d>
 800812c:	4652      	mov	r2, sl
 800812e:	465b      	mov	r3, fp
 8008130:	f7f8 fa6a 	bl	8000608 <__aeabi_dmul>
 8008134:	4b82      	ldr	r3, [pc, #520]	; (8008340 <_dtoa_r+0x628>)
 8008136:	2200      	movs	r2, #0
 8008138:	f7f8 f8b0 	bl	800029c <__adddf3>
 800813c:	46d0      	mov	r8, sl
 800813e:	46d9      	mov	r9, fp
 8008140:	4682      	mov	sl, r0
 8008142:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008146:	2e00      	cmp	r6, #0
 8008148:	d158      	bne.n	80081fc <_dtoa_r+0x4e4>
 800814a:	4b7e      	ldr	r3, [pc, #504]	; (8008344 <_dtoa_r+0x62c>)
 800814c:	2200      	movs	r2, #0
 800814e:	4640      	mov	r0, r8
 8008150:	4649      	mov	r1, r9
 8008152:	f7f8 f8a1 	bl	8000298 <__aeabi_dsub>
 8008156:	4652      	mov	r2, sl
 8008158:	465b      	mov	r3, fp
 800815a:	4680      	mov	r8, r0
 800815c:	4689      	mov	r9, r1
 800815e:	f7f8 fce3 	bl	8000b28 <__aeabi_dcmpgt>
 8008162:	2800      	cmp	r0, #0
 8008164:	f040 8295 	bne.w	8008692 <_dtoa_r+0x97a>
 8008168:	4652      	mov	r2, sl
 800816a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800816e:	4640      	mov	r0, r8
 8008170:	4649      	mov	r1, r9
 8008172:	f7f8 fcbb 	bl	8000aec <__aeabi_dcmplt>
 8008176:	2800      	cmp	r0, #0
 8008178:	f040 8289 	bne.w	800868e <_dtoa_r+0x976>
 800817c:	ec5b ab19 	vmov	sl, fp, d9
 8008180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008182:	2b00      	cmp	r3, #0
 8008184:	f2c0 8148 	blt.w	8008418 <_dtoa_r+0x700>
 8008188:	9a00      	ldr	r2, [sp, #0]
 800818a:	2a0e      	cmp	r2, #14
 800818c:	f300 8144 	bgt.w	8008418 <_dtoa_r+0x700>
 8008190:	4b67      	ldr	r3, [pc, #412]	; (8008330 <_dtoa_r+0x618>)
 8008192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008196:	e9d3 8900 	ldrd	r8, r9, [r3]
 800819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	f280 80d5 	bge.w	800834c <_dtoa_r+0x634>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f300 80d1 	bgt.w	800834c <_dtoa_r+0x634>
 80081aa:	f040 826f 	bne.w	800868c <_dtoa_r+0x974>
 80081ae:	4b65      	ldr	r3, [pc, #404]	; (8008344 <_dtoa_r+0x62c>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	4640      	mov	r0, r8
 80081b4:	4649      	mov	r1, r9
 80081b6:	f7f8 fa27 	bl	8000608 <__aeabi_dmul>
 80081ba:	4652      	mov	r2, sl
 80081bc:	465b      	mov	r3, fp
 80081be:	f7f8 fca9 	bl	8000b14 <__aeabi_dcmpge>
 80081c2:	9e03      	ldr	r6, [sp, #12]
 80081c4:	4637      	mov	r7, r6
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f040 8245 	bne.w	8008656 <_dtoa_r+0x93e>
 80081cc:	9d01      	ldr	r5, [sp, #4]
 80081ce:	2331      	movs	r3, #49	; 0x31
 80081d0:	f805 3b01 	strb.w	r3, [r5], #1
 80081d4:	9b00      	ldr	r3, [sp, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	e240      	b.n	800865e <_dtoa_r+0x946>
 80081dc:	07f2      	lsls	r2, r6, #31
 80081de:	d505      	bpl.n	80081ec <_dtoa_r+0x4d4>
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	f7f8 fa10 	bl	8000608 <__aeabi_dmul>
 80081e8:	3501      	adds	r5, #1
 80081ea:	2301      	movs	r3, #1
 80081ec:	1076      	asrs	r6, r6, #1
 80081ee:	3708      	adds	r7, #8
 80081f0:	e777      	b.n	80080e2 <_dtoa_r+0x3ca>
 80081f2:	2502      	movs	r5, #2
 80081f4:	e779      	b.n	80080ea <_dtoa_r+0x3d2>
 80081f6:	9f00      	ldr	r7, [sp, #0]
 80081f8:	9e03      	ldr	r6, [sp, #12]
 80081fa:	e794      	b.n	8008126 <_dtoa_r+0x40e>
 80081fc:	9901      	ldr	r1, [sp, #4]
 80081fe:	4b4c      	ldr	r3, [pc, #304]	; (8008330 <_dtoa_r+0x618>)
 8008200:	4431      	add	r1, r6
 8008202:	910d      	str	r1, [sp, #52]	; 0x34
 8008204:	9908      	ldr	r1, [sp, #32]
 8008206:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800820a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800820e:	2900      	cmp	r1, #0
 8008210:	d043      	beq.n	800829a <_dtoa_r+0x582>
 8008212:	494d      	ldr	r1, [pc, #308]	; (8008348 <_dtoa_r+0x630>)
 8008214:	2000      	movs	r0, #0
 8008216:	f7f8 fb21 	bl	800085c <__aeabi_ddiv>
 800821a:	4652      	mov	r2, sl
 800821c:	465b      	mov	r3, fp
 800821e:	f7f8 f83b 	bl	8000298 <__aeabi_dsub>
 8008222:	9d01      	ldr	r5, [sp, #4]
 8008224:	4682      	mov	sl, r0
 8008226:	468b      	mov	fp, r1
 8008228:	4649      	mov	r1, r9
 800822a:	4640      	mov	r0, r8
 800822c:	f7f8 fc9c 	bl	8000b68 <__aeabi_d2iz>
 8008230:	4606      	mov	r6, r0
 8008232:	f7f8 f97f 	bl	8000534 <__aeabi_i2d>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	f7f8 f82b 	bl	8000298 <__aeabi_dsub>
 8008242:	3630      	adds	r6, #48	; 0x30
 8008244:	f805 6b01 	strb.w	r6, [r5], #1
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	4680      	mov	r8, r0
 800824e:	4689      	mov	r9, r1
 8008250:	f7f8 fc4c 	bl	8000aec <__aeabi_dcmplt>
 8008254:	2800      	cmp	r0, #0
 8008256:	d163      	bne.n	8008320 <_dtoa_r+0x608>
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	4936      	ldr	r1, [pc, #216]	; (8008338 <_dtoa_r+0x620>)
 800825e:	2000      	movs	r0, #0
 8008260:	f7f8 f81a 	bl	8000298 <__aeabi_dsub>
 8008264:	4652      	mov	r2, sl
 8008266:	465b      	mov	r3, fp
 8008268:	f7f8 fc40 	bl	8000aec <__aeabi_dcmplt>
 800826c:	2800      	cmp	r0, #0
 800826e:	f040 80b5 	bne.w	80083dc <_dtoa_r+0x6c4>
 8008272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008274:	429d      	cmp	r5, r3
 8008276:	d081      	beq.n	800817c <_dtoa_r+0x464>
 8008278:	4b30      	ldr	r3, [pc, #192]	; (800833c <_dtoa_r+0x624>)
 800827a:	2200      	movs	r2, #0
 800827c:	4650      	mov	r0, sl
 800827e:	4659      	mov	r1, fp
 8008280:	f7f8 f9c2 	bl	8000608 <__aeabi_dmul>
 8008284:	4b2d      	ldr	r3, [pc, #180]	; (800833c <_dtoa_r+0x624>)
 8008286:	4682      	mov	sl, r0
 8008288:	468b      	mov	fp, r1
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	2200      	movs	r2, #0
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	4680      	mov	r8, r0
 8008296:	4689      	mov	r9, r1
 8008298:	e7c6      	b.n	8008228 <_dtoa_r+0x510>
 800829a:	4650      	mov	r0, sl
 800829c:	4659      	mov	r1, fp
 800829e:	f7f8 f9b3 	bl	8000608 <__aeabi_dmul>
 80082a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a4:	9d01      	ldr	r5, [sp, #4]
 80082a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a8:	4682      	mov	sl, r0
 80082aa:	468b      	mov	fp, r1
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7f8 fc5a 	bl	8000b68 <__aeabi_d2iz>
 80082b4:	4606      	mov	r6, r0
 80082b6:	f7f8 f93d 	bl	8000534 <__aeabi_i2d>
 80082ba:	3630      	adds	r6, #48	; 0x30
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4640      	mov	r0, r8
 80082c2:	4649      	mov	r1, r9
 80082c4:	f7f7 ffe8 	bl	8000298 <__aeabi_dsub>
 80082c8:	f805 6b01 	strb.w	r6, [r5], #1
 80082cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ce:	429d      	cmp	r5, r3
 80082d0:	4680      	mov	r8, r0
 80082d2:	4689      	mov	r9, r1
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	d124      	bne.n	8008324 <_dtoa_r+0x60c>
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <_dtoa_r+0x630>)
 80082dc:	4650      	mov	r0, sl
 80082de:	4659      	mov	r1, fp
 80082e0:	f7f7 ffdc 	bl	800029c <__adddf3>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f8 fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d173      	bne.n	80083dc <_dtoa_r+0x6c4>
 80082f4:	4652      	mov	r2, sl
 80082f6:	465b      	mov	r3, fp
 80082f8:	4913      	ldr	r1, [pc, #76]	; (8008348 <_dtoa_r+0x630>)
 80082fa:	2000      	movs	r0, #0
 80082fc:	f7f7 ffcc 	bl	8000298 <__aeabi_dsub>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4640      	mov	r0, r8
 8008306:	4649      	mov	r1, r9
 8008308:	f7f8 fbf0 	bl	8000aec <__aeabi_dcmplt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f43f af35 	beq.w	800817c <_dtoa_r+0x464>
 8008312:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008314:	1e6b      	subs	r3, r5, #1
 8008316:	930f      	str	r3, [sp, #60]	; 0x3c
 8008318:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d0f8      	beq.n	8008312 <_dtoa_r+0x5fa>
 8008320:	9700      	str	r7, [sp, #0]
 8008322:	e049      	b.n	80083b8 <_dtoa_r+0x6a0>
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <_dtoa_r+0x624>)
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	4680      	mov	r8, r0
 800832c:	4689      	mov	r9, r1
 800832e:	e7bd      	b.n	80082ac <_dtoa_r+0x594>
 8008330:	0800a280 	.word	0x0800a280
 8008334:	0800a258 	.word	0x0800a258
 8008338:	3ff00000 	.word	0x3ff00000
 800833c:	40240000 	.word	0x40240000
 8008340:	401c0000 	.word	0x401c0000
 8008344:	40140000 	.word	0x40140000
 8008348:	3fe00000 	.word	0x3fe00000
 800834c:	9d01      	ldr	r5, [sp, #4]
 800834e:	4656      	mov	r6, sl
 8008350:	465f      	mov	r7, fp
 8008352:	4642      	mov	r2, r8
 8008354:	464b      	mov	r3, r9
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	f7f8 fa7f 	bl	800085c <__aeabi_ddiv>
 800835e:	f7f8 fc03 	bl	8000b68 <__aeabi_d2iz>
 8008362:	4682      	mov	sl, r0
 8008364:	f7f8 f8e6 	bl	8000534 <__aeabi_i2d>
 8008368:	4642      	mov	r2, r8
 800836a:	464b      	mov	r3, r9
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800837c:	f7f7 ff8c 	bl	8000298 <__aeabi_dsub>
 8008380:	f805 6b01 	strb.w	r6, [r5], #1
 8008384:	9e01      	ldr	r6, [sp, #4]
 8008386:	9f03      	ldr	r7, [sp, #12]
 8008388:	1bae      	subs	r6, r5, r6
 800838a:	42b7      	cmp	r7, r6
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	d135      	bne.n	80083fe <_dtoa_r+0x6e6>
 8008392:	f7f7 ff83 	bl	800029c <__adddf3>
 8008396:	4642      	mov	r2, r8
 8008398:	464b      	mov	r3, r9
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	f7f8 fbc3 	bl	8000b28 <__aeabi_dcmpgt>
 80083a2:	b9d0      	cbnz	r0, 80083da <_dtoa_r+0x6c2>
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80083b0:	b110      	cbz	r0, 80083b8 <_dtoa_r+0x6a0>
 80083b2:	f01a 0f01 	tst.w	sl, #1
 80083b6:	d110      	bne.n	80083da <_dtoa_r+0x6c2>
 80083b8:	4620      	mov	r0, r4
 80083ba:	ee18 1a10 	vmov	r1, s16
 80083be:	f000 faf3 	bl	80089a8 <_Bfree>
 80083c2:	2300      	movs	r3, #0
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	702b      	strb	r3, [r5, #0]
 80083c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ca:	3001      	adds	r0, #1
 80083cc:	6018      	str	r0, [r3, #0]
 80083ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f43f acf1 	beq.w	8007db8 <_dtoa_r+0xa0>
 80083d6:	601d      	str	r5, [r3, #0]
 80083d8:	e4ee      	b.n	8007db8 <_dtoa_r+0xa0>
 80083da:	9f00      	ldr	r7, [sp, #0]
 80083dc:	462b      	mov	r3, r5
 80083de:	461d      	mov	r5, r3
 80083e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083e4:	2a39      	cmp	r2, #57	; 0x39
 80083e6:	d106      	bne.n	80083f6 <_dtoa_r+0x6de>
 80083e8:	9a01      	ldr	r2, [sp, #4]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d1f7      	bne.n	80083de <_dtoa_r+0x6c6>
 80083ee:	9901      	ldr	r1, [sp, #4]
 80083f0:	2230      	movs	r2, #48	; 0x30
 80083f2:	3701      	adds	r7, #1
 80083f4:	700a      	strb	r2, [r1, #0]
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	3201      	adds	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
 80083fc:	e790      	b.n	8008320 <_dtoa_r+0x608>
 80083fe:	4ba6      	ldr	r3, [pc, #664]	; (8008698 <_dtoa_r+0x980>)
 8008400:	2200      	movs	r2, #0
 8008402:	f7f8 f901 	bl	8000608 <__aeabi_dmul>
 8008406:	2200      	movs	r2, #0
 8008408:	2300      	movs	r3, #0
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	f7f8 fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8008412:	2800      	cmp	r0, #0
 8008414:	d09d      	beq.n	8008352 <_dtoa_r+0x63a>
 8008416:	e7cf      	b.n	80083b8 <_dtoa_r+0x6a0>
 8008418:	9a08      	ldr	r2, [sp, #32]
 800841a:	2a00      	cmp	r2, #0
 800841c:	f000 80d7 	beq.w	80085ce <_dtoa_r+0x8b6>
 8008420:	9a06      	ldr	r2, [sp, #24]
 8008422:	2a01      	cmp	r2, #1
 8008424:	f300 80ba 	bgt.w	800859c <_dtoa_r+0x884>
 8008428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800842a:	2a00      	cmp	r2, #0
 800842c:	f000 80b2 	beq.w	8008594 <_dtoa_r+0x87c>
 8008430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008434:	9e07      	ldr	r6, [sp, #28]
 8008436:	9d04      	ldr	r5, [sp, #16]
 8008438:	9a04      	ldr	r2, [sp, #16]
 800843a:	441a      	add	r2, r3
 800843c:	9204      	str	r2, [sp, #16]
 800843e:	9a05      	ldr	r2, [sp, #20]
 8008440:	2101      	movs	r1, #1
 8008442:	441a      	add	r2, r3
 8008444:	4620      	mov	r0, r4
 8008446:	9205      	str	r2, [sp, #20]
 8008448:	f000 fb66 	bl	8008b18 <__i2b>
 800844c:	4607      	mov	r7, r0
 800844e:	2d00      	cmp	r5, #0
 8008450:	dd0c      	ble.n	800846c <_dtoa_r+0x754>
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	dd09      	ble.n	800846c <_dtoa_r+0x754>
 8008458:	42ab      	cmp	r3, r5
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	bfa8      	it	ge
 800845e:	462b      	movge	r3, r5
 8008460:	1ad2      	subs	r2, r2, r3
 8008462:	9204      	str	r2, [sp, #16]
 8008464:	9a05      	ldr	r2, [sp, #20]
 8008466:	1aed      	subs	r5, r5, r3
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	b31b      	cbz	r3, 80084b8 <_dtoa_r+0x7a0>
 8008470:	9b08      	ldr	r3, [sp, #32]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80af 	beq.w	80085d6 <_dtoa_r+0x8be>
 8008478:	2e00      	cmp	r6, #0
 800847a:	dd13      	ble.n	80084a4 <_dtoa_r+0x78c>
 800847c:	4639      	mov	r1, r7
 800847e:	4632      	mov	r2, r6
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fc09 	bl	8008c98 <__pow5mult>
 8008486:	ee18 2a10 	vmov	r2, s16
 800848a:	4601      	mov	r1, r0
 800848c:	4607      	mov	r7, r0
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fb58 	bl	8008b44 <__multiply>
 8008494:	ee18 1a10 	vmov	r1, s16
 8008498:	4680      	mov	r8, r0
 800849a:	4620      	mov	r0, r4
 800849c:	f000 fa84 	bl	80089a8 <_Bfree>
 80084a0:	ee08 8a10 	vmov	s16, r8
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	1b9a      	subs	r2, r3, r6
 80084a8:	d006      	beq.n	80084b8 <_dtoa_r+0x7a0>
 80084aa:	ee18 1a10 	vmov	r1, s16
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fbf2 	bl	8008c98 <__pow5mult>
 80084b4:	ee08 0a10 	vmov	s16, r0
 80084b8:	2101      	movs	r1, #1
 80084ba:	4620      	mov	r0, r4
 80084bc:	f000 fb2c 	bl	8008b18 <__i2b>
 80084c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	4606      	mov	r6, r0
 80084c6:	f340 8088 	ble.w	80085da <_dtoa_r+0x8c2>
 80084ca:	461a      	mov	r2, r3
 80084cc:	4601      	mov	r1, r0
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fbe2 	bl	8008c98 <__pow5mult>
 80084d4:	9b06      	ldr	r3, [sp, #24]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	4606      	mov	r6, r0
 80084da:	f340 8081 	ble.w	80085e0 <_dtoa_r+0x8c8>
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	6933      	ldr	r3, [r6, #16]
 80084e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084e8:	6918      	ldr	r0, [r3, #16]
 80084ea:	f000 fac5 	bl	8008a78 <__hi0bits>
 80084ee:	f1c0 0020 	rsb	r0, r0, #32
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	4418      	add	r0, r3
 80084f6:	f010 001f 	ands.w	r0, r0, #31
 80084fa:	f000 8092 	beq.w	8008622 <_dtoa_r+0x90a>
 80084fe:	f1c0 0320 	rsb	r3, r0, #32
 8008502:	2b04      	cmp	r3, #4
 8008504:	f340 808a 	ble.w	800861c <_dtoa_r+0x904>
 8008508:	f1c0 001c 	rsb	r0, r0, #28
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	4403      	add	r3, r0
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	9b05      	ldr	r3, [sp, #20]
 8008514:	4403      	add	r3, r0
 8008516:	4405      	add	r5, r0
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd07      	ble.n	8008530 <_dtoa_r+0x818>
 8008520:	ee18 1a10 	vmov	r1, s16
 8008524:	461a      	mov	r2, r3
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fc10 	bl	8008d4c <__lshift>
 800852c:	ee08 0a10 	vmov	s16, r0
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	2b00      	cmp	r3, #0
 8008534:	dd05      	ble.n	8008542 <_dtoa_r+0x82a>
 8008536:	4631      	mov	r1, r6
 8008538:	461a      	mov	r2, r3
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fc06 	bl	8008d4c <__lshift>
 8008540:	4606      	mov	r6, r0
 8008542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d06e      	beq.n	8008626 <_dtoa_r+0x90e>
 8008548:	ee18 0a10 	vmov	r0, s16
 800854c:	4631      	mov	r1, r6
 800854e:	f000 fc6d 	bl	8008e2c <__mcmp>
 8008552:	2800      	cmp	r0, #0
 8008554:	da67      	bge.n	8008626 <_dtoa_r+0x90e>
 8008556:	9b00      	ldr	r3, [sp, #0]
 8008558:	3b01      	subs	r3, #1
 800855a:	ee18 1a10 	vmov	r1, s16
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	220a      	movs	r2, #10
 8008562:	2300      	movs	r3, #0
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fa41 	bl	80089ec <__multadd>
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	ee08 0a10 	vmov	s16, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 81b1 	beq.w	80088d8 <_dtoa_r+0xbc0>
 8008576:	2300      	movs	r3, #0
 8008578:	4639      	mov	r1, r7
 800857a:	220a      	movs	r2, #10
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fa35 	bl	80089ec <__multadd>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	4607      	mov	r7, r0
 8008588:	f300 808e 	bgt.w	80086a8 <_dtoa_r+0x990>
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	2b02      	cmp	r3, #2
 8008590:	dc51      	bgt.n	8008636 <_dtoa_r+0x91e>
 8008592:	e089      	b.n	80086a8 <_dtoa_r+0x990>
 8008594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008596:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800859a:	e74b      	b.n	8008434 <_dtoa_r+0x71c>
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	1e5e      	subs	r6, r3, #1
 80085a0:	9b07      	ldr	r3, [sp, #28]
 80085a2:	42b3      	cmp	r3, r6
 80085a4:	bfbf      	itttt	lt
 80085a6:	9b07      	ldrlt	r3, [sp, #28]
 80085a8:	9607      	strlt	r6, [sp, #28]
 80085aa:	1af2      	sublt	r2, r6, r3
 80085ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085ae:	bfb6      	itet	lt
 80085b0:	189b      	addlt	r3, r3, r2
 80085b2:	1b9e      	subge	r6, r3, r6
 80085b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	bfb8      	it	lt
 80085ba:	2600      	movlt	r6, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfb7      	itett	lt
 80085c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80085c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80085c8:	1a9d      	sublt	r5, r3, r2
 80085ca:	2300      	movlt	r3, #0
 80085cc:	e734      	b.n	8008438 <_dtoa_r+0x720>
 80085ce:	9e07      	ldr	r6, [sp, #28]
 80085d0:	9d04      	ldr	r5, [sp, #16]
 80085d2:	9f08      	ldr	r7, [sp, #32]
 80085d4:	e73b      	b.n	800844e <_dtoa_r+0x736>
 80085d6:	9a07      	ldr	r2, [sp, #28]
 80085d8:	e767      	b.n	80084aa <_dtoa_r+0x792>
 80085da:	9b06      	ldr	r3, [sp, #24]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	dc18      	bgt.n	8008612 <_dtoa_r+0x8fa>
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	d115      	bne.n	8008612 <_dtoa_r+0x8fa>
 80085e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085ea:	b993      	cbnz	r3, 8008612 <_dtoa_r+0x8fa>
 80085ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085f0:	0d1b      	lsrs	r3, r3, #20
 80085f2:	051b      	lsls	r3, r3, #20
 80085f4:	b183      	cbz	r3, 8008618 <_dtoa_r+0x900>
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	3301      	adds	r3, #1
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	3301      	adds	r3, #1
 8008600:	9305      	str	r3, [sp, #20]
 8008602:	f04f 0801 	mov.w	r8, #1
 8008606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008608:	2b00      	cmp	r3, #0
 800860a:	f47f af6a 	bne.w	80084e2 <_dtoa_r+0x7ca>
 800860e:	2001      	movs	r0, #1
 8008610:	e76f      	b.n	80084f2 <_dtoa_r+0x7da>
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	e7f6      	b.n	8008606 <_dtoa_r+0x8ee>
 8008618:	4698      	mov	r8, r3
 800861a:	e7f4      	b.n	8008606 <_dtoa_r+0x8ee>
 800861c:	f43f af7d 	beq.w	800851a <_dtoa_r+0x802>
 8008620:	4618      	mov	r0, r3
 8008622:	301c      	adds	r0, #28
 8008624:	e772      	b.n	800850c <_dtoa_r+0x7f4>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc37      	bgt.n	800869c <_dtoa_r+0x984>
 800862c:	9b06      	ldr	r3, [sp, #24]
 800862e:	2b02      	cmp	r3, #2
 8008630:	dd34      	ble.n	800869c <_dtoa_r+0x984>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	9302      	str	r3, [sp, #8]
 8008636:	9b02      	ldr	r3, [sp, #8]
 8008638:	b96b      	cbnz	r3, 8008656 <_dtoa_r+0x93e>
 800863a:	4631      	mov	r1, r6
 800863c:	2205      	movs	r2, #5
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f9d4 	bl	80089ec <__multadd>
 8008644:	4601      	mov	r1, r0
 8008646:	4606      	mov	r6, r0
 8008648:	ee18 0a10 	vmov	r0, s16
 800864c:	f000 fbee 	bl	8008e2c <__mcmp>
 8008650:	2800      	cmp	r0, #0
 8008652:	f73f adbb 	bgt.w	80081cc <_dtoa_r+0x4b4>
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	9d01      	ldr	r5, [sp, #4]
 800865a:	43db      	mvns	r3, r3
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	4631      	mov	r1, r6
 8008664:	4620      	mov	r0, r4
 8008666:	f000 f99f 	bl	80089a8 <_Bfree>
 800866a:	2f00      	cmp	r7, #0
 800866c:	f43f aea4 	beq.w	80083b8 <_dtoa_r+0x6a0>
 8008670:	f1b8 0f00 	cmp.w	r8, #0
 8008674:	d005      	beq.n	8008682 <_dtoa_r+0x96a>
 8008676:	45b8      	cmp	r8, r7
 8008678:	d003      	beq.n	8008682 <_dtoa_r+0x96a>
 800867a:	4641      	mov	r1, r8
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f993 	bl	80089a8 <_Bfree>
 8008682:	4639      	mov	r1, r7
 8008684:	4620      	mov	r0, r4
 8008686:	f000 f98f 	bl	80089a8 <_Bfree>
 800868a:	e695      	b.n	80083b8 <_dtoa_r+0x6a0>
 800868c:	2600      	movs	r6, #0
 800868e:	4637      	mov	r7, r6
 8008690:	e7e1      	b.n	8008656 <_dtoa_r+0x93e>
 8008692:	9700      	str	r7, [sp, #0]
 8008694:	4637      	mov	r7, r6
 8008696:	e599      	b.n	80081cc <_dtoa_r+0x4b4>
 8008698:	40240000 	.word	0x40240000
 800869c:	9b08      	ldr	r3, [sp, #32]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 80ca 	beq.w	8008838 <_dtoa_r+0xb20>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	9302      	str	r3, [sp, #8]
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	dd05      	ble.n	80086b8 <_dtoa_r+0x9a0>
 80086ac:	4639      	mov	r1, r7
 80086ae:	462a      	mov	r2, r5
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fb4b 	bl	8008d4c <__lshift>
 80086b6:	4607      	mov	r7, r0
 80086b8:	f1b8 0f00 	cmp.w	r8, #0
 80086bc:	d05b      	beq.n	8008776 <_dtoa_r+0xa5e>
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 f931 	bl	8008928 <_Balloc>
 80086c6:	4605      	mov	r5, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <_dtoa_r+0x9be>
 80086ca:	4b87      	ldr	r3, [pc, #540]	; (80088e8 <_dtoa_r+0xbd0>)
 80086cc:	4602      	mov	r2, r0
 80086ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086d2:	f7ff bb3b 	b.w	8007d4c <_dtoa_r+0x34>
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	3202      	adds	r2, #2
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	f107 010c 	add.w	r1, r7, #12
 80086e0:	300c      	adds	r0, #12
 80086e2:	f000 f913 	bl	800890c <memcpy>
 80086e6:	2201      	movs	r2, #1
 80086e8:	4629      	mov	r1, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fb2e 	bl	8008d4c <__lshift>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	f103 0901 	add.w	r9, r3, #1
 80086f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80086fa:	4413      	add	r3, r2
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	f00a 0301 	and.w	r3, sl, #1
 8008702:	46b8      	mov	r8, r7
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	4607      	mov	r7, r0
 8008708:	4631      	mov	r1, r6
 800870a:	ee18 0a10 	vmov	r0, s16
 800870e:	f7ff fa77 	bl	8007c00 <quorem>
 8008712:	4641      	mov	r1, r8
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800871a:	ee18 0a10 	vmov	r0, s16
 800871e:	f000 fb85 	bl	8008e2c <__mcmp>
 8008722:	463a      	mov	r2, r7
 8008724:	9003      	str	r0, [sp, #12]
 8008726:	4631      	mov	r1, r6
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fb9b 	bl	8008e64 <__mdiff>
 800872e:	68c2      	ldr	r2, [r0, #12]
 8008730:	f109 3bff 	add.w	fp, r9, #4294967295
 8008734:	4605      	mov	r5, r0
 8008736:	bb02      	cbnz	r2, 800877a <_dtoa_r+0xa62>
 8008738:	4601      	mov	r1, r0
 800873a:	ee18 0a10 	vmov	r0, s16
 800873e:	f000 fb75 	bl	8008e2c <__mcmp>
 8008742:	4602      	mov	r2, r0
 8008744:	4629      	mov	r1, r5
 8008746:	4620      	mov	r0, r4
 8008748:	9207      	str	r2, [sp, #28]
 800874a:	f000 f92d 	bl	80089a8 <_Bfree>
 800874e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008752:	ea43 0102 	orr.w	r1, r3, r2
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	430b      	orrs	r3, r1
 800875a:	464d      	mov	r5, r9
 800875c:	d10f      	bne.n	800877e <_dtoa_r+0xa66>
 800875e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008762:	d02a      	beq.n	80087ba <_dtoa_r+0xaa2>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd02      	ble.n	8008770 <_dtoa_r+0xa58>
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008770:	f88b a000 	strb.w	sl, [fp]
 8008774:	e775      	b.n	8008662 <_dtoa_r+0x94a>
 8008776:	4638      	mov	r0, r7
 8008778:	e7ba      	b.n	80086f0 <_dtoa_r+0x9d8>
 800877a:	2201      	movs	r2, #1
 800877c:	e7e2      	b.n	8008744 <_dtoa_r+0xa2c>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	db04      	blt.n	800878e <_dtoa_r+0xa76>
 8008784:	9906      	ldr	r1, [sp, #24]
 8008786:	430b      	orrs	r3, r1
 8008788:	9904      	ldr	r1, [sp, #16]
 800878a:	430b      	orrs	r3, r1
 800878c:	d122      	bne.n	80087d4 <_dtoa_r+0xabc>
 800878e:	2a00      	cmp	r2, #0
 8008790:	ddee      	ble.n	8008770 <_dtoa_r+0xa58>
 8008792:	ee18 1a10 	vmov	r1, s16
 8008796:	2201      	movs	r2, #1
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fad7 	bl	8008d4c <__lshift>
 800879e:	4631      	mov	r1, r6
 80087a0:	ee08 0a10 	vmov	s16, r0
 80087a4:	f000 fb42 	bl	8008e2c <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dc03      	bgt.n	80087b4 <_dtoa_r+0xa9c>
 80087ac:	d1e0      	bne.n	8008770 <_dtoa_r+0xa58>
 80087ae:	f01a 0f01 	tst.w	sl, #1
 80087b2:	d0dd      	beq.n	8008770 <_dtoa_r+0xa58>
 80087b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087b8:	d1d7      	bne.n	800876a <_dtoa_r+0xa52>
 80087ba:	2339      	movs	r3, #57	; 0x39
 80087bc:	f88b 3000 	strb.w	r3, [fp]
 80087c0:	462b      	mov	r3, r5
 80087c2:	461d      	mov	r5, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087ca:	2a39      	cmp	r2, #57	; 0x39
 80087cc:	d071      	beq.n	80088b2 <_dtoa_r+0xb9a>
 80087ce:	3201      	adds	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e746      	b.n	8008662 <_dtoa_r+0x94a>
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	dd07      	ble.n	80087e8 <_dtoa_r+0xad0>
 80087d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087dc:	d0ed      	beq.n	80087ba <_dtoa_r+0xaa2>
 80087de:	f10a 0301 	add.w	r3, sl, #1
 80087e2:	f88b 3000 	strb.w	r3, [fp]
 80087e6:	e73c      	b.n	8008662 <_dtoa_r+0x94a>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80087ee:	4599      	cmp	r9, r3
 80087f0:	d047      	beq.n	8008882 <_dtoa_r+0xb6a>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f8f6 	bl	80089ec <__multadd>
 8008800:	45b8      	cmp	r8, r7
 8008802:	ee08 0a10 	vmov	s16, r0
 8008806:	f04f 0300 	mov.w	r3, #0
 800880a:	f04f 020a 	mov.w	r2, #10
 800880e:	4641      	mov	r1, r8
 8008810:	4620      	mov	r0, r4
 8008812:	d106      	bne.n	8008822 <_dtoa_r+0xb0a>
 8008814:	f000 f8ea 	bl	80089ec <__multadd>
 8008818:	4680      	mov	r8, r0
 800881a:	4607      	mov	r7, r0
 800881c:	f109 0901 	add.w	r9, r9, #1
 8008820:	e772      	b.n	8008708 <_dtoa_r+0x9f0>
 8008822:	f000 f8e3 	bl	80089ec <__multadd>
 8008826:	4639      	mov	r1, r7
 8008828:	4680      	mov	r8, r0
 800882a:	2300      	movs	r3, #0
 800882c:	220a      	movs	r2, #10
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f8dc 	bl	80089ec <__multadd>
 8008834:	4607      	mov	r7, r0
 8008836:	e7f1      	b.n	800881c <_dtoa_r+0xb04>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	9d01      	ldr	r5, [sp, #4]
 800883e:	ee18 0a10 	vmov	r0, s16
 8008842:	4631      	mov	r1, r6
 8008844:	f7ff f9dc 	bl	8007c00 <quorem>
 8008848:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	f805 ab01 	strb.w	sl, [r5], #1
 8008852:	1aea      	subs	r2, r5, r3
 8008854:	9b02      	ldr	r3, [sp, #8]
 8008856:	4293      	cmp	r3, r2
 8008858:	dd09      	ble.n	800886e <_dtoa_r+0xb56>
 800885a:	ee18 1a10 	vmov	r1, s16
 800885e:	2300      	movs	r3, #0
 8008860:	220a      	movs	r2, #10
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f8c2 	bl	80089ec <__multadd>
 8008868:	ee08 0a10 	vmov	s16, r0
 800886c:	e7e7      	b.n	800883e <_dtoa_r+0xb26>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfc8      	it	gt
 8008874:	461d      	movgt	r5, r3
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	bfd8      	it	le
 800887a:	2501      	movle	r5, #1
 800887c:	441d      	add	r5, r3
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	ee18 1a10 	vmov	r1, s16
 8008886:	2201      	movs	r2, #1
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fa5f 	bl	8008d4c <__lshift>
 800888e:	4631      	mov	r1, r6
 8008890:	ee08 0a10 	vmov	s16, r0
 8008894:	f000 faca 	bl	8008e2c <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	dc91      	bgt.n	80087c0 <_dtoa_r+0xaa8>
 800889c:	d102      	bne.n	80088a4 <_dtoa_r+0xb8c>
 800889e:	f01a 0f01 	tst.w	sl, #1
 80088a2:	d18d      	bne.n	80087c0 <_dtoa_r+0xaa8>
 80088a4:	462b      	mov	r3, r5
 80088a6:	461d      	mov	r5, r3
 80088a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ac:	2a30      	cmp	r2, #48	; 0x30
 80088ae:	d0fa      	beq.n	80088a6 <_dtoa_r+0xb8e>
 80088b0:	e6d7      	b.n	8008662 <_dtoa_r+0x94a>
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d184      	bne.n	80087c2 <_dtoa_r+0xaaa>
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	2331      	movs	r3, #49	; 0x31
 80088c0:	7013      	strb	r3, [r2, #0]
 80088c2:	e6ce      	b.n	8008662 <_dtoa_r+0x94a>
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <_dtoa_r+0xbd4>)
 80088c6:	f7ff ba95 	b.w	8007df4 <_dtoa_r+0xdc>
 80088ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f aa6e 	bne.w	8007dae <_dtoa_r+0x96>
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <_dtoa_r+0xbd8>)
 80088d4:	f7ff ba8e 	b.w	8007df4 <_dtoa_r+0xdc>
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dcae      	bgt.n	800883c <_dtoa_r+0xb24>
 80088de:	9b06      	ldr	r3, [sp, #24]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f73f aea8 	bgt.w	8008636 <_dtoa_r+0x91e>
 80088e6:	e7a9      	b.n	800883c <_dtoa_r+0xb24>
 80088e8:	0800a1e7 	.word	0x0800a1e7
 80088ec:	0800a144 	.word	0x0800a144
 80088f0:	0800a168 	.word	0x0800a168

080088f4 <_localeconv_r>:
 80088f4:	4800      	ldr	r0, [pc, #0]	; (80088f8 <_localeconv_r+0x4>)
 80088f6:	4770      	bx	lr
 80088f8:	20000174 	.word	0x20000174

080088fc <malloc>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <malloc+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f000 bc17 	b.w	8009134 <_malloc_r>
 8008906:	bf00      	nop
 8008908:	20000020 	.word	0x20000020

0800890c <memcpy>:
 800890c:	440a      	add	r2, r1
 800890e:	4291      	cmp	r1, r2
 8008910:	f100 33ff 	add.w	r3, r0, #4294967295
 8008914:	d100      	bne.n	8008918 <memcpy+0xc>
 8008916:	4770      	bx	lr
 8008918:	b510      	push	{r4, lr}
 800891a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008922:	4291      	cmp	r1, r2
 8008924:	d1f9      	bne.n	800891a <memcpy+0xe>
 8008926:	bd10      	pop	{r4, pc}

08008928 <_Balloc>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Balloc+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff ffe2 	bl	80088fc <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	6260      	str	r0, [r4, #36]	; 0x24
 800893c:	b920      	cbnz	r0, 8008948 <_Balloc+0x20>
 800893e:	4b18      	ldr	r3, [pc, #96]	; (80089a0 <_Balloc+0x78>)
 8008940:	4818      	ldr	r0, [pc, #96]	; (80089a4 <_Balloc+0x7c>)
 8008942:	2166      	movs	r1, #102	; 0x66
 8008944:	f000 fdd6 	bl	80094f4 <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008952:	68f3      	ldr	r3, [r6, #12]
 8008954:	b183      	cbz	r3, 8008978 <_Balloc+0x50>
 8008956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800895e:	b9b8      	cbnz	r0, 8008990 <_Balloc+0x68>
 8008960:	2101      	movs	r1, #1
 8008962:	fa01 f605 	lsl.w	r6, r1, r5
 8008966:	1d72      	adds	r2, r6, #5
 8008968:	0092      	lsls	r2, r2, #2
 800896a:	4620      	mov	r0, r4
 800896c:	f000 fb60 	bl	8009030 <_calloc_r>
 8008970:	b160      	cbz	r0, 800898c <_Balloc+0x64>
 8008972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008976:	e00e      	b.n	8008996 <_Balloc+0x6e>
 8008978:	2221      	movs	r2, #33	; 0x21
 800897a:	2104      	movs	r1, #4
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fb57 	bl	8009030 <_calloc_r>
 8008982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008984:	60f0      	str	r0, [r6, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e4      	bne.n	8008956 <_Balloc+0x2e>
 800898c:	2000      	movs	r0, #0
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	6802      	ldr	r2, [r0, #0]
 8008992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008996:	2300      	movs	r3, #0
 8008998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800899c:	e7f7      	b.n	800898e <_Balloc+0x66>
 800899e:	bf00      	nop
 80089a0:	0800a175 	.word	0x0800a175
 80089a4:	0800a1f8 	.word	0x0800a1f8

080089a8 <_Bfree>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089ac:	4605      	mov	r5, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	b976      	cbnz	r6, 80089d0 <_Bfree+0x28>
 80089b2:	2010      	movs	r0, #16
 80089b4:	f7ff ffa2 	bl	80088fc <malloc>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6268      	str	r0, [r5, #36]	; 0x24
 80089bc:	b920      	cbnz	r0, 80089c8 <_Bfree+0x20>
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <_Bfree+0x3c>)
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <_Bfree+0x40>)
 80089c2:	218a      	movs	r1, #138	; 0x8a
 80089c4:	f000 fd96 	bl	80094f4 <__assert_func>
 80089c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089cc:	6006      	str	r6, [r0, #0]
 80089ce:	60c6      	str	r6, [r0, #12]
 80089d0:	b13c      	cbz	r4, 80089e2 <_Bfree+0x3a>
 80089d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089d4:	6862      	ldr	r2, [r4, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089dc:	6021      	str	r1, [r4, #0]
 80089de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	0800a175 	.word	0x0800a175
 80089e8:	0800a1f8 	.word	0x0800a1f8

080089ec <__multadd>:
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	690d      	ldr	r5, [r1, #16]
 80089f2:	4607      	mov	r7, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	461e      	mov	r6, r3
 80089f8:	f101 0c14 	add.w	ip, r1, #20
 80089fc:	2000      	movs	r0, #0
 80089fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008a02:	b299      	uxth	r1, r3
 8008a04:	fb02 6101 	mla	r1, r2, r1, r6
 8008a08:	0c1e      	lsrs	r6, r3, #16
 8008a0a:	0c0b      	lsrs	r3, r1, #16
 8008a0c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a10:	b289      	uxth	r1, r1
 8008a12:	3001      	adds	r0, #1
 8008a14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a18:	4285      	cmp	r5, r0
 8008a1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a22:	dcec      	bgt.n	80089fe <__multadd+0x12>
 8008a24:	b30e      	cbz	r6, 8008a6a <__multadd+0x7e>
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dc19      	bgt.n	8008a60 <__multadd+0x74>
 8008a2c:	6861      	ldr	r1, [r4, #4]
 8008a2e:	4638      	mov	r0, r7
 8008a30:	3101      	adds	r1, #1
 8008a32:	f7ff ff79 	bl	8008928 <_Balloc>
 8008a36:	4680      	mov	r8, r0
 8008a38:	b928      	cbnz	r0, 8008a46 <__multadd+0x5a>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <__multadd+0x84>)
 8008a3e:	480d      	ldr	r0, [pc, #52]	; (8008a74 <__multadd+0x88>)
 8008a40:	21b5      	movs	r1, #181	; 0xb5
 8008a42:	f000 fd57 	bl	80094f4 <__assert_func>
 8008a46:	6922      	ldr	r2, [r4, #16]
 8008a48:	3202      	adds	r2, #2
 8008a4a:	f104 010c 	add.w	r1, r4, #12
 8008a4e:	0092      	lsls	r2, r2, #2
 8008a50:	300c      	adds	r0, #12
 8008a52:	f7ff ff5b 	bl	800890c <memcpy>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff ffa5 	bl	80089a8 <_Bfree>
 8008a5e:	4644      	mov	r4, r8
 8008a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a64:	3501      	adds	r5, #1
 8008a66:	615e      	str	r6, [r3, #20]
 8008a68:	6125      	str	r5, [r4, #16]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a70:	0800a1e7 	.word	0x0800a1e7
 8008a74:	0800a1f8 	.word	0x0800a1f8

08008a78 <__hi0bits>:
 8008a78:	0c03      	lsrs	r3, r0, #16
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	b9d3      	cbnz	r3, 8008ab4 <__hi0bits+0x3c>
 8008a7e:	0400      	lsls	r0, r0, #16
 8008a80:	2310      	movs	r3, #16
 8008a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a86:	bf04      	itt	eq
 8008a88:	0200      	lsleq	r0, r0, #8
 8008a8a:	3308      	addeq	r3, #8
 8008a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a90:	bf04      	itt	eq
 8008a92:	0100      	lsleq	r0, r0, #4
 8008a94:	3304      	addeq	r3, #4
 8008a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a9a:	bf04      	itt	eq
 8008a9c:	0080      	lsleq	r0, r0, #2
 8008a9e:	3302      	addeq	r3, #2
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	db05      	blt.n	8008ab0 <__hi0bits+0x38>
 8008aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008aa8:	f103 0301 	add.w	r3, r3, #1
 8008aac:	bf08      	it	eq
 8008aae:	2320      	moveq	r3, #32
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	4770      	bx	lr
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e7e4      	b.n	8008a82 <__hi0bits+0xa>

08008ab8 <__lo0bits>:
 8008ab8:	6803      	ldr	r3, [r0, #0]
 8008aba:	f013 0207 	ands.w	r2, r3, #7
 8008abe:	4601      	mov	r1, r0
 8008ac0:	d00b      	beq.n	8008ada <__lo0bits+0x22>
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d423      	bmi.n	8008b0e <__lo0bits+0x56>
 8008ac6:	0798      	lsls	r0, r3, #30
 8008ac8:	bf49      	itett	mi
 8008aca:	085b      	lsrmi	r3, r3, #1
 8008acc:	089b      	lsrpl	r3, r3, #2
 8008ace:	2001      	movmi	r0, #1
 8008ad0:	600b      	strmi	r3, [r1, #0]
 8008ad2:	bf5c      	itt	pl
 8008ad4:	600b      	strpl	r3, [r1, #0]
 8008ad6:	2002      	movpl	r0, #2
 8008ad8:	4770      	bx	lr
 8008ada:	b298      	uxth	r0, r3
 8008adc:	b9a8      	cbnz	r0, 8008b0a <__lo0bits+0x52>
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	2010      	movs	r0, #16
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	b90a      	cbnz	r2, 8008aea <__lo0bits+0x32>
 8008ae6:	3008      	adds	r0, #8
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	071a      	lsls	r2, r3, #28
 8008aec:	bf04      	itt	eq
 8008aee:	091b      	lsreq	r3, r3, #4
 8008af0:	3004      	addeq	r0, #4
 8008af2:	079a      	lsls	r2, r3, #30
 8008af4:	bf04      	itt	eq
 8008af6:	089b      	lsreq	r3, r3, #2
 8008af8:	3002      	addeq	r0, #2
 8008afa:	07da      	lsls	r2, r3, #31
 8008afc:	d403      	bmi.n	8008b06 <__lo0bits+0x4e>
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	f100 0001 	add.w	r0, r0, #1
 8008b04:	d005      	beq.n	8008b12 <__lo0bits+0x5a>
 8008b06:	600b      	str	r3, [r1, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	e7e9      	b.n	8008ae2 <__lo0bits+0x2a>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	4770      	bx	lr
 8008b12:	2020      	movs	r0, #32
 8008b14:	4770      	bx	lr
	...

08008b18 <__i2b>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	f7ff ff03 	bl	8008928 <_Balloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <__i2b+0x1a>
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <__i2b+0x24>)
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <__i2b+0x28>)
 8008b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b2e:	f000 fce1 	bl	80094f4 <__assert_func>
 8008b32:	2301      	movs	r3, #1
 8008b34:	6144      	str	r4, [r0, #20]
 8008b36:	6103      	str	r3, [r0, #16]
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800a1e7 	.word	0x0800a1e7
 8008b40:	0800a1f8 	.word	0x0800a1f8

08008b44 <__multiply>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	4691      	mov	r9, r2
 8008b4a:	690a      	ldr	r2, [r1, #16]
 8008b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	bfb8      	it	lt
 8008b54:	460b      	movlt	r3, r1
 8008b56:	460c      	mov	r4, r1
 8008b58:	bfbc      	itt	lt
 8008b5a:	464c      	movlt	r4, r9
 8008b5c:	4699      	movlt	r9, r3
 8008b5e:	6927      	ldr	r7, [r4, #16]
 8008b60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	6861      	ldr	r1, [r4, #4]
 8008b68:	eb07 060a 	add.w	r6, r7, sl
 8008b6c:	42b3      	cmp	r3, r6
 8008b6e:	b085      	sub	sp, #20
 8008b70:	bfb8      	it	lt
 8008b72:	3101      	addlt	r1, #1
 8008b74:	f7ff fed8 	bl	8008928 <_Balloc>
 8008b78:	b930      	cbnz	r0, 8008b88 <__multiply+0x44>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b44      	ldr	r3, [pc, #272]	; (8008c90 <__multiply+0x14c>)
 8008b7e:	4845      	ldr	r0, [pc, #276]	; (8008c94 <__multiply+0x150>)
 8008b80:	f240 115d 	movw	r1, #349	; 0x15d
 8008b84:	f000 fcb6 	bl	80094f4 <__assert_func>
 8008b88:	f100 0514 	add.w	r5, r0, #20
 8008b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b90:	462b      	mov	r3, r5
 8008b92:	2200      	movs	r2, #0
 8008b94:	4543      	cmp	r3, r8
 8008b96:	d321      	bcc.n	8008bdc <__multiply+0x98>
 8008b98:	f104 0314 	add.w	r3, r4, #20
 8008b9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ba0:	f109 0314 	add.w	r3, r9, #20
 8008ba4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ba8:	9202      	str	r2, [sp, #8]
 8008baa:	1b3a      	subs	r2, r7, r4
 8008bac:	3a15      	subs	r2, #21
 8008bae:	f022 0203 	bic.w	r2, r2, #3
 8008bb2:	3204      	adds	r2, #4
 8008bb4:	f104 0115 	add.w	r1, r4, #21
 8008bb8:	428f      	cmp	r7, r1
 8008bba:	bf38      	it	cc
 8008bbc:	2204      	movcc	r2, #4
 8008bbe:	9201      	str	r2, [sp, #4]
 8008bc0:	9a02      	ldr	r2, [sp, #8]
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d80c      	bhi.n	8008be2 <__multiply+0x9e>
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	dd03      	ble.n	8008bd4 <__multiply+0x90>
 8008bcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d05a      	beq.n	8008c8a <__multiply+0x146>
 8008bd4:	6106      	str	r6, [r0, #16]
 8008bd6:	b005      	add	sp, #20
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	f843 2b04 	str.w	r2, [r3], #4
 8008be0:	e7d8      	b.n	8008b94 <__multiply+0x50>
 8008be2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008be6:	f1ba 0f00 	cmp.w	sl, #0
 8008bea:	d024      	beq.n	8008c36 <__multiply+0xf2>
 8008bec:	f104 0e14 	add.w	lr, r4, #20
 8008bf0:	46a9      	mov	r9, r5
 8008bf2:	f04f 0c00 	mov.w	ip, #0
 8008bf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bfa:	f8d9 1000 	ldr.w	r1, [r9]
 8008bfe:	fa1f fb82 	uxth.w	fp, r2
 8008c02:	b289      	uxth	r1, r1
 8008c04:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c10:	4461      	add	r1, ip
 8008c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c16:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c1e:	b289      	uxth	r1, r1
 8008c20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c24:	4577      	cmp	r7, lr
 8008c26:	f849 1b04 	str.w	r1, [r9], #4
 8008c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c2e:	d8e2      	bhi.n	8008bf6 <__multiply+0xb2>
 8008c30:	9a01      	ldr	r2, [sp, #4]
 8008c32:	f845 c002 	str.w	ip, [r5, r2]
 8008c36:	9a03      	ldr	r2, [sp, #12]
 8008c38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	f1b9 0f00 	cmp.w	r9, #0
 8008c42:	d020      	beq.n	8008c86 <__multiply+0x142>
 8008c44:	6829      	ldr	r1, [r5, #0]
 8008c46:	f104 0c14 	add.w	ip, r4, #20
 8008c4a:	46ae      	mov	lr, r5
 8008c4c:	f04f 0a00 	mov.w	sl, #0
 8008c50:	f8bc b000 	ldrh.w	fp, [ip]
 8008c54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c58:	fb09 220b 	mla	r2, r9, fp, r2
 8008c5c:	4492      	add	sl, r2
 8008c5e:	b289      	uxth	r1, r1
 8008c60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c64:	f84e 1b04 	str.w	r1, [lr], #4
 8008c68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c6c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c70:	0c12      	lsrs	r2, r2, #16
 8008c72:	fb09 1102 	mla	r1, r9, r2, r1
 8008c76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c7a:	4567      	cmp	r7, ip
 8008c7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c80:	d8e6      	bhi.n	8008c50 <__multiply+0x10c>
 8008c82:	9a01      	ldr	r2, [sp, #4]
 8008c84:	50a9      	str	r1, [r5, r2]
 8008c86:	3504      	adds	r5, #4
 8008c88:	e79a      	b.n	8008bc0 <__multiply+0x7c>
 8008c8a:	3e01      	subs	r6, #1
 8008c8c:	e79c      	b.n	8008bc8 <__multiply+0x84>
 8008c8e:	bf00      	nop
 8008c90:	0800a1e7 	.word	0x0800a1e7
 8008c94:	0800a1f8 	.word	0x0800a1f8

08008c98 <__pow5mult>:
 8008c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	f012 0203 	ands.w	r2, r2, #3
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	d007      	beq.n	8008cb8 <__pow5mult+0x20>
 8008ca8:	4c25      	ldr	r4, [pc, #148]	; (8008d40 <__pow5mult+0xa8>)
 8008caa:	3a01      	subs	r2, #1
 8008cac:	2300      	movs	r3, #0
 8008cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cb2:	f7ff fe9b 	bl	80089ec <__multadd>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	10ad      	asrs	r5, r5, #2
 8008cba:	d03d      	beq.n	8008d38 <__pow5mult+0xa0>
 8008cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cbe:	b97c      	cbnz	r4, 8008ce0 <__pow5mult+0x48>
 8008cc0:	2010      	movs	r0, #16
 8008cc2:	f7ff fe1b 	bl	80088fc <malloc>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	6270      	str	r0, [r6, #36]	; 0x24
 8008cca:	b928      	cbnz	r0, 8008cd8 <__pow5mult+0x40>
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <__pow5mult+0xac>)
 8008cce:	481e      	ldr	r0, [pc, #120]	; (8008d48 <__pow5mult+0xb0>)
 8008cd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cd4:	f000 fc0e 	bl	80094f4 <__assert_func>
 8008cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cdc:	6004      	str	r4, [r0, #0]
 8008cde:	60c4      	str	r4, [r0, #12]
 8008ce0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ce8:	b94c      	cbnz	r4, 8008cfe <__pow5mult+0x66>
 8008cea:	f240 2171 	movw	r1, #625	; 0x271
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7ff ff12 	bl	8008b18 <__i2b>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	07eb      	lsls	r3, r5, #31
 8008d04:	d50a      	bpl.n	8008d1c <__pow5mult+0x84>
 8008d06:	4639      	mov	r1, r7
 8008d08:	4622      	mov	r2, r4
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7ff ff1a 	bl	8008b44 <__multiply>
 8008d10:	4639      	mov	r1, r7
 8008d12:	4680      	mov	r8, r0
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff fe47 	bl	80089a8 <_Bfree>
 8008d1a:	4647      	mov	r7, r8
 8008d1c:	106d      	asrs	r5, r5, #1
 8008d1e:	d00b      	beq.n	8008d38 <__pow5mult+0xa0>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	b938      	cbnz	r0, 8008d34 <__pow5mult+0x9c>
 8008d24:	4622      	mov	r2, r4
 8008d26:	4621      	mov	r1, r4
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f7ff ff0b 	bl	8008b44 <__multiply>
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	f8c0 9000 	str.w	r9, [r0]
 8008d34:	4604      	mov	r4, r0
 8008d36:	e7e4      	b.n	8008d02 <__pow5mult+0x6a>
 8008d38:	4638      	mov	r0, r7
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	bf00      	nop
 8008d40:	0800a348 	.word	0x0800a348
 8008d44:	0800a175 	.word	0x0800a175
 8008d48:	0800a1f8 	.word	0x0800a1f8

08008d4c <__lshift>:
 8008d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	6849      	ldr	r1, [r1, #4]
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	4691      	mov	r9, r2
 8008d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d64:	f108 0601 	add.w	r6, r8, #1
 8008d68:	42b3      	cmp	r3, r6
 8008d6a:	db0b      	blt.n	8008d84 <__lshift+0x38>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff fddb 	bl	8008928 <_Balloc>
 8008d72:	4605      	mov	r5, r0
 8008d74:	b948      	cbnz	r0, 8008d8a <__lshift+0x3e>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <__lshift+0xd8>)
 8008d7a:	482b      	ldr	r0, [pc, #172]	; (8008e28 <__lshift+0xdc>)
 8008d7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d80:	f000 fbb8 	bl	80094f4 <__assert_func>
 8008d84:	3101      	adds	r1, #1
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	e7ee      	b.n	8008d68 <__lshift+0x1c>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f100 0114 	add.w	r1, r0, #20
 8008d90:	f100 0210 	add.w	r2, r0, #16
 8008d94:	4618      	mov	r0, r3
 8008d96:	4553      	cmp	r3, sl
 8008d98:	db37      	blt.n	8008e0a <__lshift+0xbe>
 8008d9a:	6920      	ldr	r0, [r4, #16]
 8008d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da0:	f104 0314 	add.w	r3, r4, #20
 8008da4:	f019 091f 	ands.w	r9, r9, #31
 8008da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008db0:	d02f      	beq.n	8008e12 <__lshift+0xc6>
 8008db2:	f1c9 0e20 	rsb	lr, r9, #32
 8008db6:	468a      	mov	sl, r1
 8008db8:	f04f 0c00 	mov.w	ip, #0
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	fa02 f209 	lsl.w	r2, r2, r9
 8008dc2:	ea42 020c 	orr.w	r2, r2, ip
 8008dc6:	f84a 2b04 	str.w	r2, [sl], #4
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008dd4:	d8f2      	bhi.n	8008dbc <__lshift+0x70>
 8008dd6:	1b03      	subs	r3, r0, r4
 8008dd8:	3b15      	subs	r3, #21
 8008dda:	f023 0303 	bic.w	r3, r3, #3
 8008dde:	3304      	adds	r3, #4
 8008de0:	f104 0215 	add.w	r2, r4, #21
 8008de4:	4290      	cmp	r0, r2
 8008de6:	bf38      	it	cc
 8008de8:	2304      	movcc	r3, #4
 8008dea:	f841 c003 	str.w	ip, [r1, r3]
 8008dee:	f1bc 0f00 	cmp.w	ip, #0
 8008df2:	d001      	beq.n	8008df8 <__lshift+0xac>
 8008df4:	f108 0602 	add.w	r6, r8, #2
 8008df8:	3e01      	subs	r6, #1
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	612e      	str	r6, [r5, #16]
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f7ff fdd2 	bl	80089a8 <_Bfree>
 8008e04:	4628      	mov	r0, r5
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e0e:	3301      	adds	r3, #1
 8008e10:	e7c1      	b.n	8008d96 <__lshift+0x4a>
 8008e12:	3904      	subs	r1, #4
 8008e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e1c:	4298      	cmp	r0, r3
 8008e1e:	d8f9      	bhi.n	8008e14 <__lshift+0xc8>
 8008e20:	e7ea      	b.n	8008df8 <__lshift+0xac>
 8008e22:	bf00      	nop
 8008e24:	0800a1e7 	.word	0x0800a1e7
 8008e28:	0800a1f8 	.word	0x0800a1f8

08008e2c <__mcmp>:
 8008e2c:	b530      	push	{r4, r5, lr}
 8008e2e:	6902      	ldr	r2, [r0, #16]
 8008e30:	690c      	ldr	r4, [r1, #16]
 8008e32:	1b12      	subs	r2, r2, r4
 8008e34:	d10e      	bne.n	8008e54 <__mcmp+0x28>
 8008e36:	f100 0314 	add.w	r3, r0, #20
 8008e3a:	3114      	adds	r1, #20
 8008e3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d003      	beq.n	8008e58 <__mcmp+0x2c>
 8008e50:	d305      	bcc.n	8008e5e <__mcmp+0x32>
 8008e52:	2201      	movs	r2, #1
 8008e54:	4610      	mov	r0, r2
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	d3f3      	bcc.n	8008e44 <__mcmp+0x18>
 8008e5c:	e7fa      	b.n	8008e54 <__mcmp+0x28>
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e62:	e7f7      	b.n	8008e54 <__mcmp+0x28>

08008e64 <__mdiff>:
 8008e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4620      	mov	r0, r4
 8008e70:	4690      	mov	r8, r2
 8008e72:	f7ff ffdb 	bl	8008e2c <__mcmp>
 8008e76:	1e05      	subs	r5, r0, #0
 8008e78:	d110      	bne.n	8008e9c <__mdiff+0x38>
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff fd53 	bl	8008928 <_Balloc>
 8008e82:	b930      	cbnz	r0, 8008e92 <__mdiff+0x2e>
 8008e84:	4b3a      	ldr	r3, [pc, #232]	; (8008f70 <__mdiff+0x10c>)
 8008e86:	4602      	mov	r2, r0
 8008e88:	f240 2132 	movw	r1, #562	; 0x232
 8008e8c:	4839      	ldr	r0, [pc, #228]	; (8008f74 <__mdiff+0x110>)
 8008e8e:	f000 fb31 	bl	80094f4 <__assert_func>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	bfa4      	itt	ge
 8008e9e:	4643      	movge	r3, r8
 8008ea0:	46a0      	movge	r8, r4
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ea8:	bfa6      	itte	ge
 8008eaa:	461c      	movge	r4, r3
 8008eac:	2500      	movge	r5, #0
 8008eae:	2501      	movlt	r5, #1
 8008eb0:	f7ff fd3a 	bl	8008928 <_Balloc>
 8008eb4:	b920      	cbnz	r0, 8008ec0 <__mdiff+0x5c>
 8008eb6:	4b2e      	ldr	r3, [pc, #184]	; (8008f70 <__mdiff+0x10c>)
 8008eb8:	4602      	mov	r2, r0
 8008eba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ebe:	e7e5      	b.n	8008e8c <__mdiff+0x28>
 8008ec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ec4:	6926      	ldr	r6, [r4, #16]
 8008ec6:	60c5      	str	r5, [r0, #12]
 8008ec8:	f104 0914 	add.w	r9, r4, #20
 8008ecc:	f108 0514 	add.w	r5, r8, #20
 8008ed0:	f100 0e14 	add.w	lr, r0, #20
 8008ed4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008edc:	f108 0210 	add.w	r2, r8, #16
 8008ee0:	46f2      	mov	sl, lr
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008eec:	fa1f f883 	uxth.w	r8, r3
 8008ef0:	fa11 f18b 	uxtah	r1, r1, fp
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	eba1 0808 	sub.w	r8, r1, r8
 8008efa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008efe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f02:	fa1f f888 	uxth.w	r8, r8
 8008f06:	1419      	asrs	r1, r3, #16
 8008f08:	454e      	cmp	r6, r9
 8008f0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f0e:	f84a 3b04 	str.w	r3, [sl], #4
 8008f12:	d8e7      	bhi.n	8008ee4 <__mdiff+0x80>
 8008f14:	1b33      	subs	r3, r6, r4
 8008f16:	3b15      	subs	r3, #21
 8008f18:	f023 0303 	bic.w	r3, r3, #3
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	3415      	adds	r4, #21
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	bf38      	it	cc
 8008f24:	2304      	movcc	r3, #4
 8008f26:	441d      	add	r5, r3
 8008f28:	4473      	add	r3, lr
 8008f2a:	469e      	mov	lr, r3
 8008f2c:	462e      	mov	r6, r5
 8008f2e:	4566      	cmp	r6, ip
 8008f30:	d30e      	bcc.n	8008f50 <__mdiff+0xec>
 8008f32:	f10c 0203 	add.w	r2, ip, #3
 8008f36:	1b52      	subs	r2, r2, r5
 8008f38:	f022 0203 	bic.w	r2, r2, #3
 8008f3c:	3d03      	subs	r5, #3
 8008f3e:	45ac      	cmp	ip, r5
 8008f40:	bf38      	it	cc
 8008f42:	2200      	movcc	r2, #0
 8008f44:	441a      	add	r2, r3
 8008f46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f4a:	b17b      	cbz	r3, 8008f6c <__mdiff+0x108>
 8008f4c:	6107      	str	r7, [r0, #16]
 8008f4e:	e7a3      	b.n	8008e98 <__mdiff+0x34>
 8008f50:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f54:	fa11 f288 	uxtah	r2, r1, r8
 8008f58:	1414      	asrs	r4, r2, #16
 8008f5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f5e:	b292      	uxth	r2, r2
 8008f60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f64:	f84e 2b04 	str.w	r2, [lr], #4
 8008f68:	1421      	asrs	r1, r4, #16
 8008f6a:	e7e0      	b.n	8008f2e <__mdiff+0xca>
 8008f6c:	3f01      	subs	r7, #1
 8008f6e:	e7ea      	b.n	8008f46 <__mdiff+0xe2>
 8008f70:	0800a1e7 	.word	0x0800a1e7
 8008f74:	0800a1f8 	.word	0x0800a1f8

08008f78 <__d2b>:
 8008f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	2101      	movs	r1, #1
 8008f80:	ec57 6b10 	vmov	r6, r7, d0
 8008f84:	4690      	mov	r8, r2
 8008f86:	f7ff fccf 	bl	8008928 <_Balloc>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	b930      	cbnz	r0, 8008f9c <__d2b+0x24>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <__d2b+0xb0>)
 8008f92:	4826      	ldr	r0, [pc, #152]	; (800902c <__d2b+0xb4>)
 8008f94:	f240 310a 	movw	r1, #778	; 0x30a
 8008f98:	f000 faac 	bl	80094f4 <__assert_func>
 8008f9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fa4:	bb35      	cbnz	r5, 8008ff4 <__d2b+0x7c>
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	d028      	beq.n	8008ffe <__d2b+0x86>
 8008fac:	4668      	mov	r0, sp
 8008fae:	9600      	str	r6, [sp, #0]
 8008fb0:	f7ff fd82 	bl	8008ab8 <__lo0bits>
 8008fb4:	9900      	ldr	r1, [sp, #0]
 8008fb6:	b300      	cbz	r0, 8008ffa <__d2b+0x82>
 8008fb8:	9a01      	ldr	r2, [sp, #4]
 8008fba:	f1c0 0320 	rsb	r3, r0, #32
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	40c2      	lsrs	r2, r0
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	61a3      	str	r3, [r4, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf14      	ite	ne
 8008fd2:	2202      	movne	r2, #2
 8008fd4:	2201      	moveq	r2, #1
 8008fd6:	6122      	str	r2, [r4, #16]
 8008fd8:	b1d5      	cbz	r5, 8009010 <__d2b+0x98>
 8008fda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fde:	4405      	add	r5, r0
 8008fe0:	f8c9 5000 	str.w	r5, [r9]
 8008fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fe8:	f8c8 0000 	str.w	r0, [r8]
 8008fec:	4620      	mov	r0, r4
 8008fee:	b003      	add	sp, #12
 8008ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff8:	e7d5      	b.n	8008fa6 <__d2b+0x2e>
 8008ffa:	6161      	str	r1, [r4, #20]
 8008ffc:	e7e5      	b.n	8008fca <__d2b+0x52>
 8008ffe:	a801      	add	r0, sp, #4
 8009000:	f7ff fd5a 	bl	8008ab8 <__lo0bits>
 8009004:	9b01      	ldr	r3, [sp, #4]
 8009006:	6163      	str	r3, [r4, #20]
 8009008:	2201      	movs	r2, #1
 800900a:	6122      	str	r2, [r4, #16]
 800900c:	3020      	adds	r0, #32
 800900e:	e7e3      	b.n	8008fd8 <__d2b+0x60>
 8009010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009018:	f8c9 0000 	str.w	r0, [r9]
 800901c:	6918      	ldr	r0, [r3, #16]
 800901e:	f7ff fd2b 	bl	8008a78 <__hi0bits>
 8009022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009026:	e7df      	b.n	8008fe8 <__d2b+0x70>
 8009028:	0800a1e7 	.word	0x0800a1e7
 800902c:	0800a1f8 	.word	0x0800a1f8

08009030 <_calloc_r>:
 8009030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009032:	fba1 2402 	umull	r2, r4, r1, r2
 8009036:	b94c      	cbnz	r4, 800904c <_calloc_r+0x1c>
 8009038:	4611      	mov	r1, r2
 800903a:	9201      	str	r2, [sp, #4]
 800903c:	f000 f87a 	bl	8009134 <_malloc_r>
 8009040:	9a01      	ldr	r2, [sp, #4]
 8009042:	4605      	mov	r5, r0
 8009044:	b930      	cbnz	r0, 8009054 <_calloc_r+0x24>
 8009046:	4628      	mov	r0, r5
 8009048:	b003      	add	sp, #12
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	220c      	movs	r2, #12
 800904e:	6002      	str	r2, [r0, #0]
 8009050:	2500      	movs	r5, #0
 8009052:	e7f8      	b.n	8009046 <_calloc_r+0x16>
 8009054:	4621      	mov	r1, r4
 8009056:	f7fe f92d 	bl	80072b4 <memset>
 800905a:	e7f4      	b.n	8009046 <_calloc_r+0x16>

0800905c <_free_r>:
 800905c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905e:	2900      	cmp	r1, #0
 8009060:	d044      	beq.n	80090ec <_free_r+0x90>
 8009062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009066:	9001      	str	r0, [sp, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	f1a1 0404 	sub.w	r4, r1, #4
 800906e:	bfb8      	it	lt
 8009070:	18e4      	addlt	r4, r4, r3
 8009072:	f000 fa9b 	bl	80095ac <__malloc_lock>
 8009076:	4a1e      	ldr	r2, [pc, #120]	; (80090f0 <_free_r+0x94>)
 8009078:	9801      	ldr	r0, [sp, #4]
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	b933      	cbnz	r3, 800908c <_free_r+0x30>
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	b003      	add	sp, #12
 8009084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009088:	f000 ba96 	b.w	80095b8 <__malloc_unlock>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d908      	bls.n	80090a2 <_free_r+0x46>
 8009090:	6825      	ldr	r5, [r4, #0]
 8009092:	1961      	adds	r1, r4, r5
 8009094:	428b      	cmp	r3, r1
 8009096:	bf01      	itttt	eq
 8009098:	6819      	ldreq	r1, [r3, #0]
 800909a:	685b      	ldreq	r3, [r3, #4]
 800909c:	1949      	addeq	r1, r1, r5
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	e7ed      	b.n	800907e <_free_r+0x22>
 80090a2:	461a      	mov	r2, r3
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b10b      	cbz	r3, 80090ac <_free_r+0x50>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x46>
 80090ac:	6811      	ldr	r1, [r2, #0]
 80090ae:	1855      	adds	r5, r2, r1
 80090b0:	42a5      	cmp	r5, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x70>
 80090b4:	6824      	ldr	r4, [r4, #0]
 80090b6:	4421      	add	r1, r4
 80090b8:	1854      	adds	r4, r2, r1
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	d1e0      	bne.n	8009082 <_free_r+0x26>
 80090c0:	681c      	ldr	r4, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	6053      	str	r3, [r2, #4]
 80090c6:	4421      	add	r1, r4
 80090c8:	6011      	str	r1, [r2, #0]
 80090ca:	e7da      	b.n	8009082 <_free_r+0x26>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x78>
 80090ce:	230c      	movs	r3, #12
 80090d0:	6003      	str	r3, [r0, #0]
 80090d2:	e7d6      	b.n	8009082 <_free_r+0x26>
 80090d4:	6825      	ldr	r5, [r4, #0]
 80090d6:	1961      	adds	r1, r4, r5
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf04      	itt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	bf04      	itt	eq
 80090e4:	1949      	addeq	r1, r1, r5
 80090e6:	6021      	streq	r1, [r4, #0]
 80090e8:	6054      	str	r4, [r2, #4]
 80090ea:	e7ca      	b.n	8009082 <_free_r+0x26>
 80090ec:	b003      	add	sp, #12
 80090ee:	bd30      	pop	{r4, r5, pc}
 80090f0:	200003c0 	.word	0x200003c0

080090f4 <sbrk_aligned>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4e0e      	ldr	r6, [pc, #56]	; (8009130 <sbrk_aligned+0x3c>)
 80090f8:	460c      	mov	r4, r1
 80090fa:	6831      	ldr	r1, [r6, #0]
 80090fc:	4605      	mov	r5, r0
 80090fe:	b911      	cbnz	r1, 8009106 <sbrk_aligned+0x12>
 8009100:	f000 f9e8 	bl	80094d4 <_sbrk_r>
 8009104:	6030      	str	r0, [r6, #0]
 8009106:	4621      	mov	r1, r4
 8009108:	4628      	mov	r0, r5
 800910a:	f000 f9e3 	bl	80094d4 <_sbrk_r>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d00a      	beq.n	8009128 <sbrk_aligned+0x34>
 8009112:	1cc4      	adds	r4, r0, #3
 8009114:	f024 0403 	bic.w	r4, r4, #3
 8009118:	42a0      	cmp	r0, r4
 800911a:	d007      	beq.n	800912c <sbrk_aligned+0x38>
 800911c:	1a21      	subs	r1, r4, r0
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f9d8 	bl	80094d4 <_sbrk_r>
 8009124:	3001      	adds	r0, #1
 8009126:	d101      	bne.n	800912c <sbrk_aligned+0x38>
 8009128:	f04f 34ff 	mov.w	r4, #4294967295
 800912c:	4620      	mov	r0, r4
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	200003c4 	.word	0x200003c4

08009134 <_malloc_r>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	1ccd      	adds	r5, r1, #3
 800913a:	f025 0503 	bic.w	r5, r5, #3
 800913e:	3508      	adds	r5, #8
 8009140:	2d0c      	cmp	r5, #12
 8009142:	bf38      	it	cc
 8009144:	250c      	movcc	r5, #12
 8009146:	2d00      	cmp	r5, #0
 8009148:	4607      	mov	r7, r0
 800914a:	db01      	blt.n	8009150 <_malloc_r+0x1c>
 800914c:	42a9      	cmp	r1, r5
 800914e:	d905      	bls.n	800915c <_malloc_r+0x28>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	2600      	movs	r6, #0
 8009156:	4630      	mov	r0, r6
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	4e2e      	ldr	r6, [pc, #184]	; (8009218 <_malloc_r+0xe4>)
 800915e:	f000 fa25 	bl	80095ac <__malloc_lock>
 8009162:	6833      	ldr	r3, [r6, #0]
 8009164:	461c      	mov	r4, r3
 8009166:	bb34      	cbnz	r4, 80091b6 <_malloc_r+0x82>
 8009168:	4629      	mov	r1, r5
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff ffc2 	bl	80090f4 <sbrk_aligned>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	4604      	mov	r4, r0
 8009174:	d14d      	bne.n	8009212 <_malloc_r+0xde>
 8009176:	6834      	ldr	r4, [r6, #0]
 8009178:	4626      	mov	r6, r4
 800917a:	2e00      	cmp	r6, #0
 800917c:	d140      	bne.n	8009200 <_malloc_r+0xcc>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4631      	mov	r1, r6
 8009182:	4638      	mov	r0, r7
 8009184:	eb04 0803 	add.w	r8, r4, r3
 8009188:	f000 f9a4 	bl	80094d4 <_sbrk_r>
 800918c:	4580      	cmp	r8, r0
 800918e:	d13a      	bne.n	8009206 <_malloc_r+0xd2>
 8009190:	6821      	ldr	r1, [r4, #0]
 8009192:	3503      	adds	r5, #3
 8009194:	1a6d      	subs	r5, r5, r1
 8009196:	f025 0503 	bic.w	r5, r5, #3
 800919a:	3508      	adds	r5, #8
 800919c:	2d0c      	cmp	r5, #12
 800919e:	bf38      	it	cc
 80091a0:	250c      	movcc	r5, #12
 80091a2:	4629      	mov	r1, r5
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff ffa5 	bl	80090f4 <sbrk_aligned>
 80091aa:	3001      	adds	r0, #1
 80091ac:	d02b      	beq.n	8009206 <_malloc_r+0xd2>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	442b      	add	r3, r5
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	e00e      	b.n	80091d4 <_malloc_r+0xa0>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	1b52      	subs	r2, r2, r5
 80091ba:	d41e      	bmi.n	80091fa <_malloc_r+0xc6>
 80091bc:	2a0b      	cmp	r2, #11
 80091be:	d916      	bls.n	80091ee <_malloc_r+0xba>
 80091c0:	1961      	adds	r1, r4, r5
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	6025      	str	r5, [r4, #0]
 80091c6:	bf18      	it	ne
 80091c8:	6059      	strne	r1, [r3, #4]
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	bf08      	it	eq
 80091ce:	6031      	streq	r1, [r6, #0]
 80091d0:	5162      	str	r2, [r4, r5]
 80091d2:	604b      	str	r3, [r1, #4]
 80091d4:	4638      	mov	r0, r7
 80091d6:	f104 060b 	add.w	r6, r4, #11
 80091da:	f000 f9ed 	bl	80095b8 <__malloc_unlock>
 80091de:	f026 0607 	bic.w	r6, r6, #7
 80091e2:	1d23      	adds	r3, r4, #4
 80091e4:	1af2      	subs	r2, r6, r3
 80091e6:	d0b6      	beq.n	8009156 <_malloc_r+0x22>
 80091e8:	1b9b      	subs	r3, r3, r6
 80091ea:	50a3      	str	r3, [r4, r2]
 80091ec:	e7b3      	b.n	8009156 <_malloc_r+0x22>
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	bf0c      	ite	eq
 80091f4:	6032      	streq	r2, [r6, #0]
 80091f6:	605a      	strne	r2, [r3, #4]
 80091f8:	e7ec      	b.n	80091d4 <_malloc_r+0xa0>
 80091fa:	4623      	mov	r3, r4
 80091fc:	6864      	ldr	r4, [r4, #4]
 80091fe:	e7b2      	b.n	8009166 <_malloc_r+0x32>
 8009200:	4634      	mov	r4, r6
 8009202:	6876      	ldr	r6, [r6, #4]
 8009204:	e7b9      	b.n	800917a <_malloc_r+0x46>
 8009206:	230c      	movs	r3, #12
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	4638      	mov	r0, r7
 800920c:	f000 f9d4 	bl	80095b8 <__malloc_unlock>
 8009210:	e7a1      	b.n	8009156 <_malloc_r+0x22>
 8009212:	6025      	str	r5, [r4, #0]
 8009214:	e7de      	b.n	80091d4 <_malloc_r+0xa0>
 8009216:	bf00      	nop
 8009218:	200003c0 	.word	0x200003c0

0800921c <__ssputs_r>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	688e      	ldr	r6, [r1, #8]
 8009222:	429e      	cmp	r6, r3
 8009224:	4682      	mov	sl, r0
 8009226:	460c      	mov	r4, r1
 8009228:	4690      	mov	r8, r2
 800922a:	461f      	mov	r7, r3
 800922c:	d838      	bhi.n	80092a0 <__ssputs_r+0x84>
 800922e:	898a      	ldrh	r2, [r1, #12]
 8009230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009234:	d032      	beq.n	800929c <__ssputs_r+0x80>
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	6909      	ldr	r1, [r1, #16]
 800923a:	eba5 0901 	sub.w	r9, r5, r1
 800923e:	6965      	ldr	r5, [r4, #20]
 8009240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009248:	3301      	adds	r3, #1
 800924a:	444b      	add	r3, r9
 800924c:	106d      	asrs	r5, r5, #1
 800924e:	429d      	cmp	r5, r3
 8009250:	bf38      	it	cc
 8009252:	461d      	movcc	r5, r3
 8009254:	0553      	lsls	r3, r2, #21
 8009256:	d531      	bpl.n	80092bc <__ssputs_r+0xa0>
 8009258:	4629      	mov	r1, r5
 800925a:	f7ff ff6b 	bl	8009134 <_malloc_r>
 800925e:	4606      	mov	r6, r0
 8009260:	b950      	cbnz	r0, 8009278 <__ssputs_r+0x5c>
 8009262:	230c      	movs	r3, #12
 8009264:	f8ca 3000 	str.w	r3, [sl]
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	464a      	mov	r2, r9
 800927c:	f7ff fb46 	bl	800890c <memcpy>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	6126      	str	r6, [r4, #16]
 800928e:	6165      	str	r5, [r4, #20]
 8009290:	444e      	add	r6, r9
 8009292:	eba5 0509 	sub.w	r5, r5, r9
 8009296:	6026      	str	r6, [r4, #0]
 8009298:	60a5      	str	r5, [r4, #8]
 800929a:	463e      	mov	r6, r7
 800929c:	42be      	cmp	r6, r7
 800929e:	d900      	bls.n	80092a2 <__ssputs_r+0x86>
 80092a0:	463e      	mov	r6, r7
 80092a2:	6820      	ldr	r0, [r4, #0]
 80092a4:	4632      	mov	r2, r6
 80092a6:	4641      	mov	r1, r8
 80092a8:	f000 f966 	bl	8009578 <memmove>
 80092ac:	68a3      	ldr	r3, [r4, #8]
 80092ae:	1b9b      	subs	r3, r3, r6
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	4433      	add	r3, r6
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7db      	b.n	8009274 <__ssputs_r+0x58>
 80092bc:	462a      	mov	r2, r5
 80092be:	f000 f981 	bl	80095c4 <_realloc_r>
 80092c2:	4606      	mov	r6, r0
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d1e1      	bne.n	800928c <__ssputs_r+0x70>
 80092c8:	6921      	ldr	r1, [r4, #16]
 80092ca:	4650      	mov	r0, sl
 80092cc:	f7ff fec6 	bl	800905c <_free_r>
 80092d0:	e7c7      	b.n	8009262 <__ssputs_r+0x46>
	...

080092d4 <_svfiprintf_r>:
 80092d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4698      	mov	r8, r3
 80092da:	898b      	ldrh	r3, [r1, #12]
 80092dc:	061b      	lsls	r3, r3, #24
 80092de:	b09d      	sub	sp, #116	; 0x74
 80092e0:	4607      	mov	r7, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	4614      	mov	r4, r2
 80092e6:	d50e      	bpl.n	8009306 <_svfiprintf_r+0x32>
 80092e8:	690b      	ldr	r3, [r1, #16]
 80092ea:	b963      	cbnz	r3, 8009306 <_svfiprintf_r+0x32>
 80092ec:	2140      	movs	r1, #64	; 0x40
 80092ee:	f7ff ff21 	bl	8009134 <_malloc_r>
 80092f2:	6028      	str	r0, [r5, #0]
 80092f4:	6128      	str	r0, [r5, #16]
 80092f6:	b920      	cbnz	r0, 8009302 <_svfiprintf_r+0x2e>
 80092f8:	230c      	movs	r3, #12
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e0d1      	b.n	80094a6 <_svfiprintf_r+0x1d2>
 8009302:	2340      	movs	r3, #64	; 0x40
 8009304:	616b      	str	r3, [r5, #20]
 8009306:	2300      	movs	r3, #0
 8009308:	9309      	str	r3, [sp, #36]	; 0x24
 800930a:	2320      	movs	r3, #32
 800930c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009310:	f8cd 800c 	str.w	r8, [sp, #12]
 8009314:	2330      	movs	r3, #48	; 0x30
 8009316:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094c0 <_svfiprintf_r+0x1ec>
 800931a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800931e:	f04f 0901 	mov.w	r9, #1
 8009322:	4623      	mov	r3, r4
 8009324:	469a      	mov	sl, r3
 8009326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800932a:	b10a      	cbz	r2, 8009330 <_svfiprintf_r+0x5c>
 800932c:	2a25      	cmp	r2, #37	; 0x25
 800932e:	d1f9      	bne.n	8009324 <_svfiprintf_r+0x50>
 8009330:	ebba 0b04 	subs.w	fp, sl, r4
 8009334:	d00b      	beq.n	800934e <_svfiprintf_r+0x7a>
 8009336:	465b      	mov	r3, fp
 8009338:	4622      	mov	r2, r4
 800933a:	4629      	mov	r1, r5
 800933c:	4638      	mov	r0, r7
 800933e:	f7ff ff6d 	bl	800921c <__ssputs_r>
 8009342:	3001      	adds	r0, #1
 8009344:	f000 80aa 	beq.w	800949c <_svfiprintf_r+0x1c8>
 8009348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800934a:	445a      	add	r2, fp
 800934c:	9209      	str	r2, [sp, #36]	; 0x24
 800934e:	f89a 3000 	ldrb.w	r3, [sl]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80a2 	beq.w	800949c <_svfiprintf_r+0x1c8>
 8009358:	2300      	movs	r3, #0
 800935a:	f04f 32ff 	mov.w	r2, #4294967295
 800935e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009362:	f10a 0a01 	add.w	sl, sl, #1
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800936e:	931a      	str	r3, [sp, #104]	; 0x68
 8009370:	4654      	mov	r4, sl
 8009372:	2205      	movs	r2, #5
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	4851      	ldr	r0, [pc, #324]	; (80094c0 <_svfiprintf_r+0x1ec>)
 800937a:	f7f6 ff39 	bl	80001f0 <memchr>
 800937e:	9a04      	ldr	r2, [sp, #16]
 8009380:	b9d8      	cbnz	r0, 80093ba <_svfiprintf_r+0xe6>
 8009382:	06d0      	lsls	r0, r2, #27
 8009384:	bf44      	itt	mi
 8009386:	2320      	movmi	r3, #32
 8009388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800938c:	0711      	lsls	r1, r2, #28
 800938e:	bf44      	itt	mi
 8009390:	232b      	movmi	r3, #43	; 0x2b
 8009392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009396:	f89a 3000 	ldrb.w	r3, [sl]
 800939a:	2b2a      	cmp	r3, #42	; 0x2a
 800939c:	d015      	beq.n	80093ca <_svfiprintf_r+0xf6>
 800939e:	9a07      	ldr	r2, [sp, #28]
 80093a0:	4654      	mov	r4, sl
 80093a2:	2000      	movs	r0, #0
 80093a4:	f04f 0c0a 	mov.w	ip, #10
 80093a8:	4621      	mov	r1, r4
 80093aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ae:	3b30      	subs	r3, #48	; 0x30
 80093b0:	2b09      	cmp	r3, #9
 80093b2:	d94e      	bls.n	8009452 <_svfiprintf_r+0x17e>
 80093b4:	b1b0      	cbz	r0, 80093e4 <_svfiprintf_r+0x110>
 80093b6:	9207      	str	r2, [sp, #28]
 80093b8:	e014      	b.n	80093e4 <_svfiprintf_r+0x110>
 80093ba:	eba0 0308 	sub.w	r3, r0, r8
 80093be:	fa09 f303 	lsl.w	r3, r9, r3
 80093c2:	4313      	orrs	r3, r2
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	46a2      	mov	sl, r4
 80093c8:	e7d2      	b.n	8009370 <_svfiprintf_r+0x9c>
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	1d19      	adds	r1, r3, #4
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	9103      	str	r1, [sp, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bfbb      	ittet	lt
 80093d6:	425b      	neglt	r3, r3
 80093d8:	f042 0202 	orrlt.w	r2, r2, #2
 80093dc:	9307      	strge	r3, [sp, #28]
 80093de:	9307      	strlt	r3, [sp, #28]
 80093e0:	bfb8      	it	lt
 80093e2:	9204      	strlt	r2, [sp, #16]
 80093e4:	7823      	ldrb	r3, [r4, #0]
 80093e6:	2b2e      	cmp	r3, #46	; 0x2e
 80093e8:	d10c      	bne.n	8009404 <_svfiprintf_r+0x130>
 80093ea:	7863      	ldrb	r3, [r4, #1]
 80093ec:	2b2a      	cmp	r3, #42	; 0x2a
 80093ee:	d135      	bne.n	800945c <_svfiprintf_r+0x188>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	1d1a      	adds	r2, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	9203      	str	r2, [sp, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfb8      	it	lt
 80093fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009400:	3402      	adds	r4, #2
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094d0 <_svfiprintf_r+0x1fc>
 8009408:	7821      	ldrb	r1, [r4, #0]
 800940a:	2203      	movs	r2, #3
 800940c:	4650      	mov	r0, sl
 800940e:	f7f6 feef 	bl	80001f0 <memchr>
 8009412:	b140      	cbz	r0, 8009426 <_svfiprintf_r+0x152>
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	eba0 000a 	sub.w	r0, r0, sl
 800941a:	fa03 f000 	lsl.w	r0, r3, r0
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	4303      	orrs	r3, r0
 8009422:	3401      	adds	r4, #1
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4826      	ldr	r0, [pc, #152]	; (80094c4 <_svfiprintf_r+0x1f0>)
 800942c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009430:	2206      	movs	r2, #6
 8009432:	f7f6 fedd 	bl	80001f0 <memchr>
 8009436:	2800      	cmp	r0, #0
 8009438:	d038      	beq.n	80094ac <_svfiprintf_r+0x1d8>
 800943a:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <_svfiprintf_r+0x1f4>)
 800943c:	bb1b      	cbnz	r3, 8009486 <_svfiprintf_r+0x1b2>
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	3307      	adds	r3, #7
 8009442:	f023 0307 	bic.w	r3, r3, #7
 8009446:	3308      	adds	r3, #8
 8009448:	9303      	str	r3, [sp, #12]
 800944a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944c:	4433      	add	r3, r6
 800944e:	9309      	str	r3, [sp, #36]	; 0x24
 8009450:	e767      	b.n	8009322 <_svfiprintf_r+0x4e>
 8009452:	fb0c 3202 	mla	r2, ip, r2, r3
 8009456:	460c      	mov	r4, r1
 8009458:	2001      	movs	r0, #1
 800945a:	e7a5      	b.n	80093a8 <_svfiprintf_r+0xd4>
 800945c:	2300      	movs	r3, #0
 800945e:	3401      	adds	r4, #1
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	4619      	mov	r1, r3
 8009464:	f04f 0c0a 	mov.w	ip, #10
 8009468:	4620      	mov	r0, r4
 800946a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946e:	3a30      	subs	r2, #48	; 0x30
 8009470:	2a09      	cmp	r2, #9
 8009472:	d903      	bls.n	800947c <_svfiprintf_r+0x1a8>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0c5      	beq.n	8009404 <_svfiprintf_r+0x130>
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	e7c3      	b.n	8009404 <_svfiprintf_r+0x130>
 800947c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009480:	4604      	mov	r4, r0
 8009482:	2301      	movs	r3, #1
 8009484:	e7f0      	b.n	8009468 <_svfiprintf_r+0x194>
 8009486:	ab03      	add	r3, sp, #12
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	462a      	mov	r2, r5
 800948c:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <_svfiprintf_r+0x1f8>)
 800948e:	a904      	add	r1, sp, #16
 8009490:	4638      	mov	r0, r7
 8009492:	f7fd ffb7 	bl	8007404 <_printf_float>
 8009496:	1c42      	adds	r2, r0, #1
 8009498:	4606      	mov	r6, r0
 800949a:	d1d6      	bne.n	800944a <_svfiprintf_r+0x176>
 800949c:	89ab      	ldrh	r3, [r5, #12]
 800949e:	065b      	lsls	r3, r3, #25
 80094a0:	f53f af2c 	bmi.w	80092fc <_svfiprintf_r+0x28>
 80094a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a6:	b01d      	add	sp, #116	; 0x74
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	ab03      	add	r3, sp, #12
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	462a      	mov	r2, r5
 80094b2:	4b06      	ldr	r3, [pc, #24]	; (80094cc <_svfiprintf_r+0x1f8>)
 80094b4:	a904      	add	r1, sp, #16
 80094b6:	4638      	mov	r0, r7
 80094b8:	f7fe fa48 	bl	800794c <_printf_i>
 80094bc:	e7eb      	b.n	8009496 <_svfiprintf_r+0x1c2>
 80094be:	bf00      	nop
 80094c0:	0800a354 	.word	0x0800a354
 80094c4:	0800a35e 	.word	0x0800a35e
 80094c8:	08007405 	.word	0x08007405
 80094cc:	0800921d 	.word	0x0800921d
 80094d0:	0800a35a 	.word	0x0800a35a

080094d4 <_sbrk_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_sbrk_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f8 fa68 	bl	80019b4 <_sbrk>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_sbrk_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_sbrk_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200003c8 	.word	0x200003c8

080094f4 <__assert_func>:
 80094f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094f6:	4614      	mov	r4, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <__assert_func+0x2c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4605      	mov	r5, r0
 8009500:	68d8      	ldr	r0, [r3, #12]
 8009502:	b14c      	cbz	r4, 8009518 <__assert_func+0x24>
 8009504:	4b07      	ldr	r3, [pc, #28]	; (8009524 <__assert_func+0x30>)
 8009506:	9100      	str	r1, [sp, #0]
 8009508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800950c:	4906      	ldr	r1, [pc, #24]	; (8009528 <__assert_func+0x34>)
 800950e:	462b      	mov	r3, r5
 8009510:	f000 f80e 	bl	8009530 <fiprintf>
 8009514:	f000 faac 	bl	8009a70 <abort>
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <__assert_func+0x38>)
 800951a:	461c      	mov	r4, r3
 800951c:	e7f3      	b.n	8009506 <__assert_func+0x12>
 800951e:	bf00      	nop
 8009520:	20000020 	.word	0x20000020
 8009524:	0800a365 	.word	0x0800a365
 8009528:	0800a372 	.word	0x0800a372
 800952c:	0800a3a0 	.word	0x0800a3a0

08009530 <fiprintf>:
 8009530:	b40e      	push	{r1, r2, r3}
 8009532:	b503      	push	{r0, r1, lr}
 8009534:	4601      	mov	r1, r0
 8009536:	ab03      	add	r3, sp, #12
 8009538:	4805      	ldr	r0, [pc, #20]	; (8009550 <fiprintf+0x20>)
 800953a:	f853 2b04 	ldr.w	r2, [r3], #4
 800953e:	6800      	ldr	r0, [r0, #0]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	f000 f897 	bl	8009674 <_vfiprintf_r>
 8009546:	b002      	add	sp, #8
 8009548:	f85d eb04 	ldr.w	lr, [sp], #4
 800954c:	b003      	add	sp, #12
 800954e:	4770      	bx	lr
 8009550:	20000020 	.word	0x20000020

08009554 <__ascii_mbtowc>:
 8009554:	b082      	sub	sp, #8
 8009556:	b901      	cbnz	r1, 800955a <__ascii_mbtowc+0x6>
 8009558:	a901      	add	r1, sp, #4
 800955a:	b142      	cbz	r2, 800956e <__ascii_mbtowc+0x1a>
 800955c:	b14b      	cbz	r3, 8009572 <__ascii_mbtowc+0x1e>
 800955e:	7813      	ldrb	r3, [r2, #0]
 8009560:	600b      	str	r3, [r1, #0]
 8009562:	7812      	ldrb	r2, [r2, #0]
 8009564:	1e10      	subs	r0, r2, #0
 8009566:	bf18      	it	ne
 8009568:	2001      	movne	r0, #1
 800956a:	b002      	add	sp, #8
 800956c:	4770      	bx	lr
 800956e:	4610      	mov	r0, r2
 8009570:	e7fb      	b.n	800956a <__ascii_mbtowc+0x16>
 8009572:	f06f 0001 	mvn.w	r0, #1
 8009576:	e7f8      	b.n	800956a <__ascii_mbtowc+0x16>

08009578 <memmove>:
 8009578:	4288      	cmp	r0, r1
 800957a:	b510      	push	{r4, lr}
 800957c:	eb01 0402 	add.w	r4, r1, r2
 8009580:	d902      	bls.n	8009588 <memmove+0x10>
 8009582:	4284      	cmp	r4, r0
 8009584:	4623      	mov	r3, r4
 8009586:	d807      	bhi.n	8009598 <memmove+0x20>
 8009588:	1e43      	subs	r3, r0, #1
 800958a:	42a1      	cmp	r1, r4
 800958c:	d008      	beq.n	80095a0 <memmove+0x28>
 800958e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009596:	e7f8      	b.n	800958a <memmove+0x12>
 8009598:	4402      	add	r2, r0
 800959a:	4601      	mov	r1, r0
 800959c:	428a      	cmp	r2, r1
 800959e:	d100      	bne.n	80095a2 <memmove+0x2a>
 80095a0:	bd10      	pop	{r4, pc}
 80095a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095aa:	e7f7      	b.n	800959c <memmove+0x24>

080095ac <__malloc_lock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__malloc_lock+0x8>)
 80095ae:	f000 bc1f 	b.w	8009df0 <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	200003cc 	.word	0x200003cc

080095b8 <__malloc_unlock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__malloc_unlock+0x8>)
 80095ba:	f000 bc1a 	b.w	8009df2 <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	200003cc 	.word	0x200003cc

080095c4 <_realloc_r>:
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	4680      	mov	r8, r0
 80095ca:	4614      	mov	r4, r2
 80095cc:	460e      	mov	r6, r1
 80095ce:	b921      	cbnz	r1, 80095da <_realloc_r+0x16>
 80095d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d4:	4611      	mov	r1, r2
 80095d6:	f7ff bdad 	b.w	8009134 <_malloc_r>
 80095da:	b92a      	cbnz	r2, 80095e8 <_realloc_r+0x24>
 80095dc:	f7ff fd3e 	bl	800905c <_free_r>
 80095e0:	4625      	mov	r5, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	f000 fc6a 	bl	8009ec0 <_malloc_usable_size_r>
 80095ec:	4284      	cmp	r4, r0
 80095ee:	4607      	mov	r7, r0
 80095f0:	d802      	bhi.n	80095f8 <_realloc_r+0x34>
 80095f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095f6:	d812      	bhi.n	800961e <_realloc_r+0x5a>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7ff fd9a 	bl	8009134 <_malloc_r>
 8009600:	4605      	mov	r5, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	d0ed      	beq.n	80095e2 <_realloc_r+0x1e>
 8009606:	42bc      	cmp	r4, r7
 8009608:	4622      	mov	r2, r4
 800960a:	4631      	mov	r1, r6
 800960c:	bf28      	it	cs
 800960e:	463a      	movcs	r2, r7
 8009610:	f7ff f97c 	bl	800890c <memcpy>
 8009614:	4631      	mov	r1, r6
 8009616:	4640      	mov	r0, r8
 8009618:	f7ff fd20 	bl	800905c <_free_r>
 800961c:	e7e1      	b.n	80095e2 <_realloc_r+0x1e>
 800961e:	4635      	mov	r5, r6
 8009620:	e7df      	b.n	80095e2 <_realloc_r+0x1e>

08009622 <__sfputc_r>:
 8009622:	6893      	ldr	r3, [r2, #8]
 8009624:	3b01      	subs	r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	b410      	push	{r4}
 800962a:	6093      	str	r3, [r2, #8]
 800962c:	da08      	bge.n	8009640 <__sfputc_r+0x1e>
 800962e:	6994      	ldr	r4, [r2, #24]
 8009630:	42a3      	cmp	r3, r4
 8009632:	db01      	blt.n	8009638 <__sfputc_r+0x16>
 8009634:	290a      	cmp	r1, #10
 8009636:	d103      	bne.n	8009640 <__sfputc_r+0x1e>
 8009638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800963c:	f000 b94a 	b.w	80098d4 <__swbuf_r>
 8009640:	6813      	ldr	r3, [r2, #0]
 8009642:	1c58      	adds	r0, r3, #1
 8009644:	6010      	str	r0, [r2, #0]
 8009646:	7019      	strb	r1, [r3, #0]
 8009648:	4608      	mov	r0, r1
 800964a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800964e:	4770      	bx	lr

08009650 <__sfputs_r>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	4606      	mov	r6, r0
 8009654:	460f      	mov	r7, r1
 8009656:	4614      	mov	r4, r2
 8009658:	18d5      	adds	r5, r2, r3
 800965a:	42ac      	cmp	r4, r5
 800965c:	d101      	bne.n	8009662 <__sfputs_r+0x12>
 800965e:	2000      	movs	r0, #0
 8009660:	e007      	b.n	8009672 <__sfputs_r+0x22>
 8009662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009666:	463a      	mov	r2, r7
 8009668:	4630      	mov	r0, r6
 800966a:	f7ff ffda 	bl	8009622 <__sfputc_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d1f3      	bne.n	800965a <__sfputs_r+0xa>
 8009672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009674 <_vfiprintf_r>:
 8009674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	460d      	mov	r5, r1
 800967a:	b09d      	sub	sp, #116	; 0x74
 800967c:	4614      	mov	r4, r2
 800967e:	4698      	mov	r8, r3
 8009680:	4606      	mov	r6, r0
 8009682:	b118      	cbz	r0, 800968c <_vfiprintf_r+0x18>
 8009684:	6983      	ldr	r3, [r0, #24]
 8009686:	b90b      	cbnz	r3, 800968c <_vfiprintf_r+0x18>
 8009688:	f000 fb14 	bl	8009cb4 <__sinit>
 800968c:	4b89      	ldr	r3, [pc, #548]	; (80098b4 <_vfiprintf_r+0x240>)
 800968e:	429d      	cmp	r5, r3
 8009690:	d11b      	bne.n	80096ca <_vfiprintf_r+0x56>
 8009692:	6875      	ldr	r5, [r6, #4]
 8009694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009696:	07d9      	lsls	r1, r3, #31
 8009698:	d405      	bmi.n	80096a6 <_vfiprintf_r+0x32>
 800969a:	89ab      	ldrh	r3, [r5, #12]
 800969c:	059a      	lsls	r2, r3, #22
 800969e:	d402      	bmi.n	80096a6 <_vfiprintf_r+0x32>
 80096a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a2:	f000 fba5 	bl	8009df0 <__retarget_lock_acquire_recursive>
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	071b      	lsls	r3, r3, #28
 80096aa:	d501      	bpl.n	80096b0 <_vfiprintf_r+0x3c>
 80096ac:	692b      	ldr	r3, [r5, #16]
 80096ae:	b9eb      	cbnz	r3, 80096ec <_vfiprintf_r+0x78>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 f96e 	bl	8009994 <__swsetup_r>
 80096b8:	b1c0      	cbz	r0, 80096ec <_vfiprintf_r+0x78>
 80096ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096bc:	07dc      	lsls	r4, r3, #31
 80096be:	d50e      	bpl.n	80096de <_vfiprintf_r+0x6a>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	b01d      	add	sp, #116	; 0x74
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	4b7b      	ldr	r3, [pc, #492]	; (80098b8 <_vfiprintf_r+0x244>)
 80096cc:	429d      	cmp	r5, r3
 80096ce:	d101      	bne.n	80096d4 <_vfiprintf_r+0x60>
 80096d0:	68b5      	ldr	r5, [r6, #8]
 80096d2:	e7df      	b.n	8009694 <_vfiprintf_r+0x20>
 80096d4:	4b79      	ldr	r3, [pc, #484]	; (80098bc <_vfiprintf_r+0x248>)
 80096d6:	429d      	cmp	r5, r3
 80096d8:	bf08      	it	eq
 80096da:	68f5      	ldreq	r5, [r6, #12]
 80096dc:	e7da      	b.n	8009694 <_vfiprintf_r+0x20>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	0598      	lsls	r0, r3, #22
 80096e2:	d4ed      	bmi.n	80096c0 <_vfiprintf_r+0x4c>
 80096e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e6:	f000 fb84 	bl	8009df2 <__retarget_lock_release_recursive>
 80096ea:	e7e9      	b.n	80096c0 <_vfiprintf_r+0x4c>
 80096ec:	2300      	movs	r3, #0
 80096ee:	9309      	str	r3, [sp, #36]	; 0x24
 80096f0:	2320      	movs	r3, #32
 80096f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096fa:	2330      	movs	r3, #48	; 0x30
 80096fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098c0 <_vfiprintf_r+0x24c>
 8009700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009704:	f04f 0901 	mov.w	r9, #1
 8009708:	4623      	mov	r3, r4
 800970a:	469a      	mov	sl, r3
 800970c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009710:	b10a      	cbz	r2, 8009716 <_vfiprintf_r+0xa2>
 8009712:	2a25      	cmp	r2, #37	; 0x25
 8009714:	d1f9      	bne.n	800970a <_vfiprintf_r+0x96>
 8009716:	ebba 0b04 	subs.w	fp, sl, r4
 800971a:	d00b      	beq.n	8009734 <_vfiprintf_r+0xc0>
 800971c:	465b      	mov	r3, fp
 800971e:	4622      	mov	r2, r4
 8009720:	4629      	mov	r1, r5
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ff94 	bl	8009650 <__sfputs_r>
 8009728:	3001      	adds	r0, #1
 800972a:	f000 80aa 	beq.w	8009882 <_vfiprintf_r+0x20e>
 800972e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009730:	445a      	add	r2, fp
 8009732:	9209      	str	r2, [sp, #36]	; 0x24
 8009734:	f89a 3000 	ldrb.w	r3, [sl]
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 80a2 	beq.w	8009882 <_vfiprintf_r+0x20e>
 800973e:	2300      	movs	r3, #0
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009748:	f10a 0a01 	add.w	sl, sl, #1
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	9307      	str	r3, [sp, #28]
 8009750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009754:	931a      	str	r3, [sp, #104]	; 0x68
 8009756:	4654      	mov	r4, sl
 8009758:	2205      	movs	r2, #5
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	4858      	ldr	r0, [pc, #352]	; (80098c0 <_vfiprintf_r+0x24c>)
 8009760:	f7f6 fd46 	bl	80001f0 <memchr>
 8009764:	9a04      	ldr	r2, [sp, #16]
 8009766:	b9d8      	cbnz	r0, 80097a0 <_vfiprintf_r+0x12c>
 8009768:	06d1      	lsls	r1, r2, #27
 800976a:	bf44      	itt	mi
 800976c:	2320      	movmi	r3, #32
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009772:	0713      	lsls	r3, r2, #28
 8009774:	bf44      	itt	mi
 8009776:	232b      	movmi	r3, #43	; 0x2b
 8009778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800977c:	f89a 3000 	ldrb.w	r3, [sl]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d015      	beq.n	80097b0 <_vfiprintf_r+0x13c>
 8009784:	9a07      	ldr	r2, [sp, #28]
 8009786:	4654      	mov	r4, sl
 8009788:	2000      	movs	r0, #0
 800978a:	f04f 0c0a 	mov.w	ip, #10
 800978e:	4621      	mov	r1, r4
 8009790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009794:	3b30      	subs	r3, #48	; 0x30
 8009796:	2b09      	cmp	r3, #9
 8009798:	d94e      	bls.n	8009838 <_vfiprintf_r+0x1c4>
 800979a:	b1b0      	cbz	r0, 80097ca <_vfiprintf_r+0x156>
 800979c:	9207      	str	r2, [sp, #28]
 800979e:	e014      	b.n	80097ca <_vfiprintf_r+0x156>
 80097a0:	eba0 0308 	sub.w	r3, r0, r8
 80097a4:	fa09 f303 	lsl.w	r3, r9, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	46a2      	mov	sl, r4
 80097ae:	e7d2      	b.n	8009756 <_vfiprintf_r+0xe2>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	1d19      	adds	r1, r3, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	9103      	str	r1, [sp, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bfbb      	ittet	lt
 80097bc:	425b      	neglt	r3, r3
 80097be:	f042 0202 	orrlt.w	r2, r2, #2
 80097c2:	9307      	strge	r3, [sp, #28]
 80097c4:	9307      	strlt	r3, [sp, #28]
 80097c6:	bfb8      	it	lt
 80097c8:	9204      	strlt	r2, [sp, #16]
 80097ca:	7823      	ldrb	r3, [r4, #0]
 80097cc:	2b2e      	cmp	r3, #46	; 0x2e
 80097ce:	d10c      	bne.n	80097ea <_vfiprintf_r+0x176>
 80097d0:	7863      	ldrb	r3, [r4, #1]
 80097d2:	2b2a      	cmp	r3, #42	; 0x2a
 80097d4:	d135      	bne.n	8009842 <_vfiprintf_r+0x1ce>
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	1d1a      	adds	r2, r3, #4
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	9203      	str	r2, [sp, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfb8      	it	lt
 80097e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80097e6:	3402      	adds	r4, #2
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098d0 <_vfiprintf_r+0x25c>
 80097ee:	7821      	ldrb	r1, [r4, #0]
 80097f0:	2203      	movs	r2, #3
 80097f2:	4650      	mov	r0, sl
 80097f4:	f7f6 fcfc 	bl	80001f0 <memchr>
 80097f8:	b140      	cbz	r0, 800980c <_vfiprintf_r+0x198>
 80097fa:	2340      	movs	r3, #64	; 0x40
 80097fc:	eba0 000a 	sub.w	r0, r0, sl
 8009800:	fa03 f000 	lsl.w	r0, r3, r0
 8009804:	9b04      	ldr	r3, [sp, #16]
 8009806:	4303      	orrs	r3, r0
 8009808:	3401      	adds	r4, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	482c      	ldr	r0, [pc, #176]	; (80098c4 <_vfiprintf_r+0x250>)
 8009812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009816:	2206      	movs	r2, #6
 8009818:	f7f6 fcea 	bl	80001f0 <memchr>
 800981c:	2800      	cmp	r0, #0
 800981e:	d03f      	beq.n	80098a0 <_vfiprintf_r+0x22c>
 8009820:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <_vfiprintf_r+0x254>)
 8009822:	bb1b      	cbnz	r3, 800986c <_vfiprintf_r+0x1f8>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	3307      	adds	r3, #7
 8009828:	f023 0307 	bic.w	r3, r3, #7
 800982c:	3308      	adds	r3, #8
 800982e:	9303      	str	r3, [sp, #12]
 8009830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009832:	443b      	add	r3, r7
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	e767      	b.n	8009708 <_vfiprintf_r+0x94>
 8009838:	fb0c 3202 	mla	r2, ip, r2, r3
 800983c:	460c      	mov	r4, r1
 800983e:	2001      	movs	r0, #1
 8009840:	e7a5      	b.n	800978e <_vfiprintf_r+0x11a>
 8009842:	2300      	movs	r3, #0
 8009844:	3401      	adds	r4, #1
 8009846:	9305      	str	r3, [sp, #20]
 8009848:	4619      	mov	r1, r3
 800984a:	f04f 0c0a 	mov.w	ip, #10
 800984e:	4620      	mov	r0, r4
 8009850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009854:	3a30      	subs	r2, #48	; 0x30
 8009856:	2a09      	cmp	r2, #9
 8009858:	d903      	bls.n	8009862 <_vfiprintf_r+0x1ee>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0c5      	beq.n	80097ea <_vfiprintf_r+0x176>
 800985e:	9105      	str	r1, [sp, #20]
 8009860:	e7c3      	b.n	80097ea <_vfiprintf_r+0x176>
 8009862:	fb0c 2101 	mla	r1, ip, r1, r2
 8009866:	4604      	mov	r4, r0
 8009868:	2301      	movs	r3, #1
 800986a:	e7f0      	b.n	800984e <_vfiprintf_r+0x1da>
 800986c:	ab03      	add	r3, sp, #12
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	462a      	mov	r2, r5
 8009872:	4b16      	ldr	r3, [pc, #88]	; (80098cc <_vfiprintf_r+0x258>)
 8009874:	a904      	add	r1, sp, #16
 8009876:	4630      	mov	r0, r6
 8009878:	f7fd fdc4 	bl	8007404 <_printf_float>
 800987c:	4607      	mov	r7, r0
 800987e:	1c78      	adds	r0, r7, #1
 8009880:	d1d6      	bne.n	8009830 <_vfiprintf_r+0x1bc>
 8009882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009884:	07d9      	lsls	r1, r3, #31
 8009886:	d405      	bmi.n	8009894 <_vfiprintf_r+0x220>
 8009888:	89ab      	ldrh	r3, [r5, #12]
 800988a:	059a      	lsls	r2, r3, #22
 800988c:	d402      	bmi.n	8009894 <_vfiprintf_r+0x220>
 800988e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009890:	f000 faaf 	bl	8009df2 <__retarget_lock_release_recursive>
 8009894:	89ab      	ldrh	r3, [r5, #12]
 8009896:	065b      	lsls	r3, r3, #25
 8009898:	f53f af12 	bmi.w	80096c0 <_vfiprintf_r+0x4c>
 800989c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989e:	e711      	b.n	80096c4 <_vfiprintf_r+0x50>
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	462a      	mov	r2, r5
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <_vfiprintf_r+0x258>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7fe f84e 	bl	800794c <_printf_i>
 80098b0:	e7e4      	b.n	800987c <_vfiprintf_r+0x208>
 80098b2:	bf00      	nop
 80098b4:	0800a4cc 	.word	0x0800a4cc
 80098b8:	0800a4ec 	.word	0x0800a4ec
 80098bc:	0800a4ac 	.word	0x0800a4ac
 80098c0:	0800a354 	.word	0x0800a354
 80098c4:	0800a35e 	.word	0x0800a35e
 80098c8:	08007405 	.word	0x08007405
 80098cc:	08009651 	.word	0x08009651
 80098d0:	0800a35a 	.word	0x0800a35a

080098d4 <__swbuf_r>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	460e      	mov	r6, r1
 80098d8:	4614      	mov	r4, r2
 80098da:	4605      	mov	r5, r0
 80098dc:	b118      	cbz	r0, 80098e6 <__swbuf_r+0x12>
 80098de:	6983      	ldr	r3, [r0, #24]
 80098e0:	b90b      	cbnz	r3, 80098e6 <__swbuf_r+0x12>
 80098e2:	f000 f9e7 	bl	8009cb4 <__sinit>
 80098e6:	4b21      	ldr	r3, [pc, #132]	; (800996c <__swbuf_r+0x98>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	d12b      	bne.n	8009944 <__swbuf_r+0x70>
 80098ec:	686c      	ldr	r4, [r5, #4]
 80098ee:	69a3      	ldr	r3, [r4, #24]
 80098f0:	60a3      	str	r3, [r4, #8]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	071a      	lsls	r2, r3, #28
 80098f6:	d52f      	bpl.n	8009958 <__swbuf_r+0x84>
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	b36b      	cbz	r3, 8009958 <__swbuf_r+0x84>
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	6820      	ldr	r0, [r4, #0]
 8009900:	1ac0      	subs	r0, r0, r3
 8009902:	6963      	ldr	r3, [r4, #20]
 8009904:	b2f6      	uxtb	r6, r6
 8009906:	4283      	cmp	r3, r0
 8009908:	4637      	mov	r7, r6
 800990a:	dc04      	bgt.n	8009916 <__swbuf_r+0x42>
 800990c:	4621      	mov	r1, r4
 800990e:	4628      	mov	r0, r5
 8009910:	f000 f93c 	bl	8009b8c <_fflush_r>
 8009914:	bb30      	cbnz	r0, 8009964 <__swbuf_r+0x90>
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	3b01      	subs	r3, #1
 800991a:	60a3      	str	r3, [r4, #8]
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	6022      	str	r2, [r4, #0]
 8009922:	701e      	strb	r6, [r3, #0]
 8009924:	6963      	ldr	r3, [r4, #20]
 8009926:	3001      	adds	r0, #1
 8009928:	4283      	cmp	r3, r0
 800992a:	d004      	beq.n	8009936 <__swbuf_r+0x62>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	07db      	lsls	r3, r3, #31
 8009930:	d506      	bpl.n	8009940 <__swbuf_r+0x6c>
 8009932:	2e0a      	cmp	r6, #10
 8009934:	d104      	bne.n	8009940 <__swbuf_r+0x6c>
 8009936:	4621      	mov	r1, r4
 8009938:	4628      	mov	r0, r5
 800993a:	f000 f927 	bl	8009b8c <_fflush_r>
 800993e:	b988      	cbnz	r0, 8009964 <__swbuf_r+0x90>
 8009940:	4638      	mov	r0, r7
 8009942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009944:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <__swbuf_r+0x9c>)
 8009946:	429c      	cmp	r4, r3
 8009948:	d101      	bne.n	800994e <__swbuf_r+0x7a>
 800994a:	68ac      	ldr	r4, [r5, #8]
 800994c:	e7cf      	b.n	80098ee <__swbuf_r+0x1a>
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <__swbuf_r+0xa0>)
 8009950:	429c      	cmp	r4, r3
 8009952:	bf08      	it	eq
 8009954:	68ec      	ldreq	r4, [r5, #12]
 8009956:	e7ca      	b.n	80098ee <__swbuf_r+0x1a>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f81a 	bl	8009994 <__swsetup_r>
 8009960:	2800      	cmp	r0, #0
 8009962:	d0cb      	beq.n	80098fc <__swbuf_r+0x28>
 8009964:	f04f 37ff 	mov.w	r7, #4294967295
 8009968:	e7ea      	b.n	8009940 <__swbuf_r+0x6c>
 800996a:	bf00      	nop
 800996c:	0800a4cc 	.word	0x0800a4cc
 8009970:	0800a4ec 	.word	0x0800a4ec
 8009974:	0800a4ac 	.word	0x0800a4ac

08009978 <__ascii_wctomb>:
 8009978:	b149      	cbz	r1, 800998e <__ascii_wctomb+0x16>
 800997a:	2aff      	cmp	r2, #255	; 0xff
 800997c:	bf85      	ittet	hi
 800997e:	238a      	movhi	r3, #138	; 0x8a
 8009980:	6003      	strhi	r3, [r0, #0]
 8009982:	700a      	strbls	r2, [r1, #0]
 8009984:	f04f 30ff 	movhi.w	r0, #4294967295
 8009988:	bf98      	it	ls
 800998a:	2001      	movls	r0, #1
 800998c:	4770      	bx	lr
 800998e:	4608      	mov	r0, r1
 8009990:	4770      	bx	lr
	...

08009994 <__swsetup_r>:
 8009994:	4b32      	ldr	r3, [pc, #200]	; (8009a60 <__swsetup_r+0xcc>)
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	b125      	cbz	r5, 80099aa <__swsetup_r+0x16>
 80099a0:	69ab      	ldr	r3, [r5, #24]
 80099a2:	b913      	cbnz	r3, 80099aa <__swsetup_r+0x16>
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 f985 	bl	8009cb4 <__sinit>
 80099aa:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <__swsetup_r+0xd0>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d10f      	bne.n	80099d0 <__swsetup_r+0x3c>
 80099b0:	686c      	ldr	r4, [r5, #4]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b8:	0719      	lsls	r1, r3, #28
 80099ba:	d42c      	bmi.n	8009a16 <__swsetup_r+0x82>
 80099bc:	06dd      	lsls	r5, r3, #27
 80099be:	d411      	bmi.n	80099e4 <__swsetup_r+0x50>
 80099c0:	2309      	movs	r3, #9
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
 80099ce:	e03e      	b.n	8009a4e <__swsetup_r+0xba>
 80099d0:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <__swsetup_r+0xd4>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <__swsetup_r+0x46>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7eb      	b.n	80099b2 <__swsetup_r+0x1e>
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <__swsetup_r+0xd8>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7e6      	b.n	80099b2 <__swsetup_r+0x1e>
 80099e4:	0758      	lsls	r0, r3, #29
 80099e6:	d512      	bpl.n	8009a0e <__swsetup_r+0x7a>
 80099e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ea:	b141      	cbz	r1, 80099fe <__swsetup_r+0x6a>
 80099ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d002      	beq.n	80099fa <__swsetup_r+0x66>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff fb31 	bl	800905c <_free_r>
 80099fa:	2300      	movs	r3, #0
 80099fc:	6363      	str	r3, [r4, #52]	; 0x34
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	2300      	movs	r3, #0
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0308 	orr.w	r3, r3, #8
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	b94b      	cbnz	r3, 8009a2e <__swsetup_r+0x9a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a24:	d003      	beq.n	8009a2e <__swsetup_r+0x9a>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 fa09 	bl	8009e40 <__smakebuf_r>
 8009a2e:	89a0      	ldrh	r0, [r4, #12]
 8009a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a34:	f010 0301 	ands.w	r3, r0, #1
 8009a38:	d00a      	beq.n	8009a50 <__swsetup_r+0xbc>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	425b      	negs	r3, r3
 8009a42:	61a3      	str	r3, [r4, #24]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	b943      	cbnz	r3, 8009a5a <__swsetup_r+0xc6>
 8009a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a4c:	d1ba      	bne.n	80099c4 <__swsetup_r+0x30>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	0781      	lsls	r1, r0, #30
 8009a52:	bf58      	it	pl
 8009a54:	6963      	ldrpl	r3, [r4, #20]
 8009a56:	60a3      	str	r3, [r4, #8]
 8009a58:	e7f4      	b.n	8009a44 <__swsetup_r+0xb0>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e7f7      	b.n	8009a4e <__swsetup_r+0xba>
 8009a5e:	bf00      	nop
 8009a60:	20000020 	.word	0x20000020
 8009a64:	0800a4cc 	.word	0x0800a4cc
 8009a68:	0800a4ec 	.word	0x0800a4ec
 8009a6c:	0800a4ac 	.word	0x0800a4ac

08009a70 <abort>:
 8009a70:	b508      	push	{r3, lr}
 8009a72:	2006      	movs	r0, #6
 8009a74:	f000 fa54 	bl	8009f20 <raise>
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f7f7 ff23 	bl	80018c4 <_exit>
	...

08009a80 <__sflush_r>:
 8009a80:	898a      	ldrh	r2, [r1, #12]
 8009a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	4605      	mov	r5, r0
 8009a88:	0710      	lsls	r0, r2, #28
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	d458      	bmi.n	8009b40 <__sflush_r+0xc0>
 8009a8e:	684b      	ldr	r3, [r1, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc05      	bgt.n	8009aa0 <__sflush_r+0x20>
 8009a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dc02      	bgt.n	8009aa0 <__sflush_r+0x20>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d0f9      	beq.n	8009a9a <__sflush_r+0x1a>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009aac:	682f      	ldr	r7, [r5, #0]
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	d032      	beq.n	8009b18 <__sflush_r+0x98>
 8009ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	075a      	lsls	r2, r3, #29
 8009ab8:	d505      	bpl.n	8009ac6 <__sflush_r+0x46>
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	1ac0      	subs	r0, r0, r3
 8009abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ac0:	b10b      	cbz	r3, 8009ac6 <__sflush_r+0x46>
 8009ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ac4:	1ac0      	subs	r0, r0, r3
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b0      	blx	r6
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	d106      	bne.n	8009ae6 <__sflush_r+0x66>
 8009ad8:	6829      	ldr	r1, [r5, #0]
 8009ada:	291d      	cmp	r1, #29
 8009adc:	d82c      	bhi.n	8009b38 <__sflush_r+0xb8>
 8009ade:	4a2a      	ldr	r2, [pc, #168]	; (8009b88 <__sflush_r+0x108>)
 8009ae0:	40ca      	lsrs	r2, r1
 8009ae2:	07d6      	lsls	r6, r2, #31
 8009ae4:	d528      	bpl.n	8009b38 <__sflush_r+0xb8>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6062      	str	r2, [r4, #4]
 8009aea:	04d9      	lsls	r1, r3, #19
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	d504      	bpl.n	8009afc <__sflush_r+0x7c>
 8009af2:	1c42      	adds	r2, r0, #1
 8009af4:	d101      	bne.n	8009afa <__sflush_r+0x7a>
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	b903      	cbnz	r3, 8009afc <__sflush_r+0x7c>
 8009afa:	6560      	str	r0, [r4, #84]	; 0x54
 8009afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009afe:	602f      	str	r7, [r5, #0]
 8009b00:	2900      	cmp	r1, #0
 8009b02:	d0ca      	beq.n	8009a9a <__sflush_r+0x1a>
 8009b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	d002      	beq.n	8009b12 <__sflush_r+0x92>
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f7ff faa5 	bl	800905c <_free_r>
 8009b12:	2000      	movs	r0, #0
 8009b14:	6360      	str	r0, [r4, #52]	; 0x34
 8009b16:	e7c1      	b.n	8009a9c <__sflush_r+0x1c>
 8009b18:	6a21      	ldr	r1, [r4, #32]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b0      	blx	r6
 8009b20:	1c41      	adds	r1, r0, #1
 8009b22:	d1c7      	bne.n	8009ab4 <__sflush_r+0x34>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0c4      	beq.n	8009ab4 <__sflush_r+0x34>
 8009b2a:	2b1d      	cmp	r3, #29
 8009b2c:	d001      	beq.n	8009b32 <__sflush_r+0xb2>
 8009b2e:	2b16      	cmp	r3, #22
 8009b30:	d101      	bne.n	8009b36 <__sflush_r+0xb6>
 8009b32:	602f      	str	r7, [r5, #0]
 8009b34:	e7b1      	b.n	8009a9a <__sflush_r+0x1a>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	e7ad      	b.n	8009a9c <__sflush_r+0x1c>
 8009b40:	690f      	ldr	r7, [r1, #16]
 8009b42:	2f00      	cmp	r7, #0
 8009b44:	d0a9      	beq.n	8009a9a <__sflush_r+0x1a>
 8009b46:	0793      	lsls	r3, r2, #30
 8009b48:	680e      	ldr	r6, [r1, #0]
 8009b4a:	bf08      	it	eq
 8009b4c:	694b      	ldreq	r3, [r1, #20]
 8009b4e:	600f      	str	r7, [r1, #0]
 8009b50:	bf18      	it	ne
 8009b52:	2300      	movne	r3, #0
 8009b54:	eba6 0807 	sub.w	r8, r6, r7
 8009b58:	608b      	str	r3, [r1, #8]
 8009b5a:	f1b8 0f00 	cmp.w	r8, #0
 8009b5e:	dd9c      	ble.n	8009a9a <__sflush_r+0x1a>
 8009b60:	6a21      	ldr	r1, [r4, #32]
 8009b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b64:	4643      	mov	r3, r8
 8009b66:	463a      	mov	r2, r7
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b0      	blx	r6
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	dc06      	bgt.n	8009b7e <__sflush_r+0xfe>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e78e      	b.n	8009a9c <__sflush_r+0x1c>
 8009b7e:	4407      	add	r7, r0
 8009b80:	eba8 0800 	sub.w	r8, r8, r0
 8009b84:	e7e9      	b.n	8009b5a <__sflush_r+0xda>
 8009b86:	bf00      	nop
 8009b88:	20400001 	.word	0x20400001

08009b8c <_fflush_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b913      	cbnz	r3, 8009b9c <_fflush_r+0x10>
 8009b96:	2500      	movs	r5, #0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	b118      	cbz	r0, 8009ba6 <_fflush_r+0x1a>
 8009b9e:	6983      	ldr	r3, [r0, #24]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <_fflush_r+0x1a>
 8009ba2:	f000 f887 	bl	8009cb4 <__sinit>
 8009ba6:	4b14      	ldr	r3, [pc, #80]	; (8009bf8 <_fflush_r+0x6c>)
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	d11b      	bne.n	8009be4 <_fflush_r+0x58>
 8009bac:	686c      	ldr	r4, [r5, #4]
 8009bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0ef      	beq.n	8009b96 <_fflush_r+0xa>
 8009bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bb8:	07d0      	lsls	r0, r2, #31
 8009bba:	d404      	bmi.n	8009bc6 <_fflush_r+0x3a>
 8009bbc:	0599      	lsls	r1, r3, #22
 8009bbe:	d402      	bmi.n	8009bc6 <_fflush_r+0x3a>
 8009bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc2:	f000 f915 	bl	8009df0 <__retarget_lock_acquire_recursive>
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	4621      	mov	r1, r4
 8009bca:	f7ff ff59 	bl	8009a80 <__sflush_r>
 8009bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd0:	07da      	lsls	r2, r3, #31
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	d4e0      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	059b      	lsls	r3, r3, #22
 8009bda:	d4dd      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bde:	f000 f908 	bl	8009df2 <__retarget_lock_release_recursive>
 8009be2:	e7d9      	b.n	8009b98 <_fflush_r+0xc>
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <_fflush_r+0x70>)
 8009be6:	429c      	cmp	r4, r3
 8009be8:	d101      	bne.n	8009bee <_fflush_r+0x62>
 8009bea:	68ac      	ldr	r4, [r5, #8]
 8009bec:	e7df      	b.n	8009bae <_fflush_r+0x22>
 8009bee:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <_fflush_r+0x74>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	bf08      	it	eq
 8009bf4:	68ec      	ldreq	r4, [r5, #12]
 8009bf6:	e7da      	b.n	8009bae <_fflush_r+0x22>
 8009bf8:	0800a4cc 	.word	0x0800a4cc
 8009bfc:	0800a4ec 	.word	0x0800a4ec
 8009c00:	0800a4ac 	.word	0x0800a4ac

08009c04 <std>:
 8009c04:	2300      	movs	r3, #0
 8009c06:	b510      	push	{r4, lr}
 8009c08:	4604      	mov	r4, r0
 8009c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c12:	6083      	str	r3, [r0, #8]
 8009c14:	8181      	strh	r1, [r0, #12]
 8009c16:	6643      	str	r3, [r0, #100]	; 0x64
 8009c18:	81c2      	strh	r2, [r0, #14]
 8009c1a:	6183      	str	r3, [r0, #24]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	2208      	movs	r2, #8
 8009c20:	305c      	adds	r0, #92	; 0x5c
 8009c22:	f7fd fb47 	bl	80072b4 <memset>
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <std+0x38>)
 8009c28:	6263      	str	r3, [r4, #36]	; 0x24
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <std+0x3c>)
 8009c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <std+0x40>)
 8009c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c32:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <std+0x44>)
 8009c34:	6224      	str	r4, [r4, #32]
 8009c36:	6323      	str	r3, [r4, #48]	; 0x30
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08009f59 	.word	0x08009f59
 8009c40:	08009f7b 	.word	0x08009f7b
 8009c44:	08009fb3 	.word	0x08009fb3
 8009c48:	08009fd7 	.word	0x08009fd7

08009c4c <_cleanup_r>:
 8009c4c:	4901      	ldr	r1, [pc, #4]	; (8009c54 <_cleanup_r+0x8>)
 8009c4e:	f000 b8af 	b.w	8009db0 <_fwalk_reent>
 8009c52:	bf00      	nop
 8009c54:	08009b8d 	.word	0x08009b8d

08009c58 <__sfmoreglue>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	2268      	movs	r2, #104	; 0x68
 8009c5c:	1e4d      	subs	r5, r1, #1
 8009c5e:	4355      	muls	r5, r2
 8009c60:	460e      	mov	r6, r1
 8009c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c66:	f7ff fa65 	bl	8009134 <_malloc_r>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	b140      	cbz	r0, 8009c80 <__sfmoreglue+0x28>
 8009c6e:	2100      	movs	r1, #0
 8009c70:	e9c0 1600 	strd	r1, r6, [r0]
 8009c74:	300c      	adds	r0, #12
 8009c76:	60a0      	str	r0, [r4, #8]
 8009c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c7c:	f7fd fb1a 	bl	80072b4 <memset>
 8009c80:	4620      	mov	r0, r4
 8009c82:	bd70      	pop	{r4, r5, r6, pc}

08009c84 <__sfp_lock_acquire>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__sfp_lock_acquire+0x8>)
 8009c86:	f000 b8b3 	b.w	8009df0 <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	200003cd 	.word	0x200003cd

08009c90 <__sfp_lock_release>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__sfp_lock_release+0x8>)
 8009c92:	f000 b8ae 	b.w	8009df2 <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	200003cd 	.word	0x200003cd

08009c9c <__sinit_lock_acquire>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	; (8009ca4 <__sinit_lock_acquire+0x8>)
 8009c9e:	f000 b8a7 	b.w	8009df0 <__retarget_lock_acquire_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	200003ce 	.word	0x200003ce

08009ca8 <__sinit_lock_release>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	; (8009cb0 <__sinit_lock_release+0x8>)
 8009caa:	f000 b8a2 	b.w	8009df2 <__retarget_lock_release_recursive>
 8009cae:	bf00      	nop
 8009cb0:	200003ce 	.word	0x200003ce

08009cb4 <__sinit>:
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	f7ff fff0 	bl	8009c9c <__sinit_lock_acquire>
 8009cbc:	69a3      	ldr	r3, [r4, #24]
 8009cbe:	b11b      	cbz	r3, 8009cc8 <__sinit+0x14>
 8009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc4:	f7ff bff0 	b.w	8009ca8 <__sinit_lock_release>
 8009cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <__sinit+0x68>)
 8009cd0:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <__sinit+0x6c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	bf04      	itt	eq
 8009cda:	2301      	moveq	r3, #1
 8009cdc:	61a3      	streq	r3, [r4, #24]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 f820 	bl	8009d24 <__sfp>
 8009ce4:	6060      	str	r0, [r4, #4]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 f81c 	bl	8009d24 <__sfp>
 8009cec:	60a0      	str	r0, [r4, #8]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f818 	bl	8009d24 <__sfp>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	60e0      	str	r0, [r4, #12]
 8009cf8:	2104      	movs	r1, #4
 8009cfa:	6860      	ldr	r0, [r4, #4]
 8009cfc:	f7ff ff82 	bl	8009c04 <std>
 8009d00:	68a0      	ldr	r0, [r4, #8]
 8009d02:	2201      	movs	r2, #1
 8009d04:	2109      	movs	r1, #9
 8009d06:	f7ff ff7d 	bl	8009c04 <std>
 8009d0a:	68e0      	ldr	r0, [r4, #12]
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	2112      	movs	r1, #18
 8009d10:	f7ff ff78 	bl	8009c04 <std>
 8009d14:	2301      	movs	r3, #1
 8009d16:	61a3      	str	r3, [r4, #24]
 8009d18:	e7d2      	b.n	8009cc0 <__sinit+0xc>
 8009d1a:	bf00      	nop
 8009d1c:	0800a130 	.word	0x0800a130
 8009d20:	08009c4d 	.word	0x08009c4d

08009d24 <__sfp>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	4607      	mov	r7, r0
 8009d28:	f7ff ffac 	bl	8009c84 <__sfp_lock_acquire>
 8009d2c:	4b1e      	ldr	r3, [pc, #120]	; (8009da8 <__sfp+0x84>)
 8009d2e:	681e      	ldr	r6, [r3, #0]
 8009d30:	69b3      	ldr	r3, [r6, #24]
 8009d32:	b913      	cbnz	r3, 8009d3a <__sfp+0x16>
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff ffbd 	bl	8009cb4 <__sinit>
 8009d3a:	3648      	adds	r6, #72	; 0x48
 8009d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	d503      	bpl.n	8009d4c <__sfp+0x28>
 8009d44:	6833      	ldr	r3, [r6, #0]
 8009d46:	b30b      	cbz	r3, 8009d8c <__sfp+0x68>
 8009d48:	6836      	ldr	r6, [r6, #0]
 8009d4a:	e7f7      	b.n	8009d3c <__sfp+0x18>
 8009d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d50:	b9d5      	cbnz	r5, 8009d88 <__sfp+0x64>
 8009d52:	4b16      	ldr	r3, [pc, #88]	; (8009dac <__sfp+0x88>)
 8009d54:	60e3      	str	r3, [r4, #12]
 8009d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d5c:	f000 f847 	bl	8009dee <__retarget_lock_init_recursive>
 8009d60:	f7ff ff96 	bl	8009c90 <__sfp_lock_release>
 8009d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d6c:	6025      	str	r5, [r4, #0]
 8009d6e:	61a5      	str	r5, [r4, #24]
 8009d70:	2208      	movs	r2, #8
 8009d72:	4629      	mov	r1, r5
 8009d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d78:	f7fd fa9c 	bl	80072b4 <memset>
 8009d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d84:	4620      	mov	r0, r4
 8009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d88:	3468      	adds	r4, #104	; 0x68
 8009d8a:	e7d9      	b.n	8009d40 <__sfp+0x1c>
 8009d8c:	2104      	movs	r1, #4
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f7ff ff62 	bl	8009c58 <__sfmoreglue>
 8009d94:	4604      	mov	r4, r0
 8009d96:	6030      	str	r0, [r6, #0]
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1d5      	bne.n	8009d48 <__sfp+0x24>
 8009d9c:	f7ff ff78 	bl	8009c90 <__sfp_lock_release>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	e7ee      	b.n	8009d84 <__sfp+0x60>
 8009da6:	bf00      	nop
 8009da8:	0800a130 	.word	0x0800a130
 8009dac:	ffff0001 	.word	0xffff0001

08009db0 <_fwalk_reent>:
 8009db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db4:	4606      	mov	r6, r0
 8009db6:	4688      	mov	r8, r1
 8009db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009dbc:	2700      	movs	r7, #0
 8009dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009dc6:	d505      	bpl.n	8009dd4 <_fwalk_reent+0x24>
 8009dc8:	6824      	ldr	r4, [r4, #0]
 8009dca:	2c00      	cmp	r4, #0
 8009dcc:	d1f7      	bne.n	8009dbe <_fwalk_reent+0xe>
 8009dce:	4638      	mov	r0, r7
 8009dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd4:	89ab      	ldrh	r3, [r5, #12]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d907      	bls.n	8009dea <_fwalk_reent+0x3a>
 8009dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dde:	3301      	adds	r3, #1
 8009de0:	d003      	beq.n	8009dea <_fwalk_reent+0x3a>
 8009de2:	4629      	mov	r1, r5
 8009de4:	4630      	mov	r0, r6
 8009de6:	47c0      	blx	r8
 8009de8:	4307      	orrs	r7, r0
 8009dea:	3568      	adds	r5, #104	; 0x68
 8009dec:	e7e9      	b.n	8009dc2 <_fwalk_reent+0x12>

08009dee <__retarget_lock_init_recursive>:
 8009dee:	4770      	bx	lr

08009df0 <__retarget_lock_acquire_recursive>:
 8009df0:	4770      	bx	lr

08009df2 <__retarget_lock_release_recursive>:
 8009df2:	4770      	bx	lr

08009df4 <__swhatbuf_r>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	460e      	mov	r6, r1
 8009df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	b096      	sub	sp, #88	; 0x58
 8009e00:	4614      	mov	r4, r2
 8009e02:	461d      	mov	r5, r3
 8009e04:	da08      	bge.n	8009e18 <__swhatbuf_r+0x24>
 8009e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	602a      	str	r2, [r5, #0]
 8009e0e:	061a      	lsls	r2, r3, #24
 8009e10:	d410      	bmi.n	8009e34 <__swhatbuf_r+0x40>
 8009e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e16:	e00e      	b.n	8009e36 <__swhatbuf_r+0x42>
 8009e18:	466a      	mov	r2, sp
 8009e1a:	f000 f903 	bl	800a024 <_fstat_r>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	dbf1      	blt.n	8009e06 <__swhatbuf_r+0x12>
 8009e22:	9a01      	ldr	r2, [sp, #4]
 8009e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e2c:	425a      	negs	r2, r3
 8009e2e:	415a      	adcs	r2, r3
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	e7ee      	b.n	8009e12 <__swhatbuf_r+0x1e>
 8009e34:	2340      	movs	r3, #64	; 0x40
 8009e36:	2000      	movs	r0, #0
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	b016      	add	sp, #88	; 0x58
 8009e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e40 <__smakebuf_r>:
 8009e40:	898b      	ldrh	r3, [r1, #12]
 8009e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e44:	079d      	lsls	r5, r3, #30
 8009e46:	4606      	mov	r6, r0
 8009e48:	460c      	mov	r4, r1
 8009e4a:	d507      	bpl.n	8009e5c <__smakebuf_r+0x1c>
 8009e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	6123      	str	r3, [r4, #16]
 8009e54:	2301      	movs	r3, #1
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	b002      	add	sp, #8
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	ab01      	add	r3, sp, #4
 8009e5e:	466a      	mov	r2, sp
 8009e60:	f7ff ffc8 	bl	8009df4 <__swhatbuf_r>
 8009e64:	9900      	ldr	r1, [sp, #0]
 8009e66:	4605      	mov	r5, r0
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f7ff f963 	bl	8009134 <_malloc_r>
 8009e6e:	b948      	cbnz	r0, 8009e84 <__smakebuf_r+0x44>
 8009e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e74:	059a      	lsls	r2, r3, #22
 8009e76:	d4ef      	bmi.n	8009e58 <__smakebuf_r+0x18>
 8009e78:	f023 0303 	bic.w	r3, r3, #3
 8009e7c:	f043 0302 	orr.w	r3, r3, #2
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	e7e3      	b.n	8009e4c <__smakebuf_r+0xc>
 8009e84:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <__smakebuf_r+0x7c>)
 8009e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	6020      	str	r0, [r4, #0]
 8009e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	9b00      	ldr	r3, [sp, #0]
 8009e94:	6163      	str	r3, [r4, #20]
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	6120      	str	r0, [r4, #16]
 8009e9a:	b15b      	cbz	r3, 8009eb4 <__smakebuf_r+0x74>
 8009e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f000 f8d1 	bl	800a048 <_isatty_r>
 8009ea6:	b128      	cbz	r0, 8009eb4 <__smakebuf_r+0x74>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f023 0303 	bic.w	r3, r3, #3
 8009eae:	f043 0301 	orr.w	r3, r3, #1
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	89a0      	ldrh	r0, [r4, #12]
 8009eb6:	4305      	orrs	r5, r0
 8009eb8:	81a5      	strh	r5, [r4, #12]
 8009eba:	e7cd      	b.n	8009e58 <__smakebuf_r+0x18>
 8009ebc:	08009c4d 	.word	0x08009c4d

08009ec0 <_malloc_usable_size_r>:
 8009ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec4:	1f18      	subs	r0, r3, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfbc      	itt	lt
 8009eca:	580b      	ldrlt	r3, [r1, r0]
 8009ecc:	18c0      	addlt	r0, r0, r3
 8009ece:	4770      	bx	lr

08009ed0 <_raise_r>:
 8009ed0:	291f      	cmp	r1, #31
 8009ed2:	b538      	push	{r3, r4, r5, lr}
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	d904      	bls.n	8009ee4 <_raise_r+0x14>
 8009eda:	2316      	movs	r3, #22
 8009edc:	6003      	str	r3, [r0, #0]
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ee6:	b112      	cbz	r2, 8009eee <_raise_r+0x1e>
 8009ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eec:	b94b      	cbnz	r3, 8009f02 <_raise_r+0x32>
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 f830 	bl	8009f54 <_getpid_r>
 8009ef4:	462a      	mov	r2, r5
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009efe:	f000 b817 	b.w	8009f30 <_kill_r>
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d00a      	beq.n	8009f1c <_raise_r+0x4c>
 8009f06:	1c59      	adds	r1, r3, #1
 8009f08:	d103      	bne.n	8009f12 <_raise_r+0x42>
 8009f0a:	2316      	movs	r3, #22
 8009f0c:	6003      	str	r3, [r0, #0]
 8009f0e:	2001      	movs	r0, #1
 8009f10:	e7e7      	b.n	8009ee2 <_raise_r+0x12>
 8009f12:	2400      	movs	r4, #0
 8009f14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f18:	4628      	mov	r0, r5
 8009f1a:	4798      	blx	r3
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e7e0      	b.n	8009ee2 <_raise_r+0x12>

08009f20 <raise>:
 8009f20:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <raise+0xc>)
 8009f22:	4601      	mov	r1, r0
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f7ff bfd3 	b.w	8009ed0 <_raise_r>
 8009f2a:	bf00      	nop
 8009f2c:	20000020 	.word	0x20000020

08009f30 <_kill_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d07      	ldr	r5, [pc, #28]	; (8009f50 <_kill_r+0x20>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	f7f7 fcb1 	bl	80018a4 <_kill>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d102      	bne.n	8009f4c <_kill_r+0x1c>
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	b103      	cbz	r3, 8009f4c <_kill_r+0x1c>
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	200003c8 	.word	0x200003c8

08009f54 <_getpid_r>:
 8009f54:	f7f7 bc9e 	b.w	8001894 <_getpid>

08009f58 <__sread>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f60:	f000 f894 	bl	800a08c <_read_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	bfab      	itete	ge
 8009f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f6c:	181b      	addge	r3, r3, r0
 8009f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f72:	bfac      	ite	ge
 8009f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f76:	81a3      	strhlt	r3, [r4, #12]
 8009f78:	bd10      	pop	{r4, pc}

08009f7a <__swrite>:
 8009f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7e:	461f      	mov	r7, r3
 8009f80:	898b      	ldrh	r3, [r1, #12]
 8009f82:	05db      	lsls	r3, r3, #23
 8009f84:	4605      	mov	r5, r0
 8009f86:	460c      	mov	r4, r1
 8009f88:	4616      	mov	r6, r2
 8009f8a:	d505      	bpl.n	8009f98 <__swrite+0x1e>
 8009f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f90:	2302      	movs	r3, #2
 8009f92:	2200      	movs	r2, #0
 8009f94:	f000 f868 	bl	800a068 <_lseek_r>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	4628      	mov	r0, r5
 8009faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fae:	f000 b817 	b.w	8009fe0 <_write_r>

08009fb2 <__sseek>:
 8009fb2:	b510      	push	{r4, lr}
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fba:	f000 f855 	bl	800a068 <_lseek_r>
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	bf15      	itete	ne
 8009fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fce:	81a3      	strheq	r3, [r4, #12]
 8009fd0:	bf18      	it	ne
 8009fd2:	81a3      	strhne	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__sclose>:
 8009fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fda:	f000 b813 	b.w	800a004 <_close_r>
	...

08009fe0 <_write_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	; (800a000 <_write_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f7 fc8f 	bl	8001912 <_write>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_write_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_write_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200003c8 	.word	0x200003c8

0800a004 <_close_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d06      	ldr	r5, [pc, #24]	; (800a020 <_close_r+0x1c>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	f7f7 fc9b 	bl	800194a <_close>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_close_r+0x1a>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_close_r+0x1a>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200003c8 	.word	0x200003c8

0800a024 <_fstat_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d07      	ldr	r5, [pc, #28]	; (800a044 <_fstat_r+0x20>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	4611      	mov	r1, r2
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	f7f7 fc96 	bl	8001962 <_fstat>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d102      	bne.n	800a040 <_fstat_r+0x1c>
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	b103      	cbz	r3, 800a040 <_fstat_r+0x1c>
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	bd38      	pop	{r3, r4, r5, pc}
 800a042:	bf00      	nop
 800a044:	200003c8 	.word	0x200003c8

0800a048 <_isatty_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d06      	ldr	r5, [pc, #24]	; (800a064 <_isatty_r+0x1c>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f7 fc95 	bl	8001982 <_isatty>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_isatty_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_isatty_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	200003c8 	.word	0x200003c8

0800a068 <_lseek_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	; (800a088 <_lseek_r+0x20>)
 800a06c:	4604      	mov	r4, r0
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f7f7 fc8e 	bl	8001998 <_lseek>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_lseek_r+0x1e>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_lseek_r+0x1e>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	200003c8 	.word	0x200003c8

0800a08c <_read_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_read_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f7 fc1c 	bl	80018d8 <_read>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_read_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_read_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	200003c8 	.word	0x200003c8

0800a0b0 <_init>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr

0800a0bc <_fini>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr
